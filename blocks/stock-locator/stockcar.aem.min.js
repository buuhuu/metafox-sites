/*
      @bmwkit/stockcar (Stockcar)
      Version: 0.0.1
      (c) Interone
      */
      
  if (typeof console == "undefined" || !console.log || !console.warn || !console.error || !console.info) {
    this.console = {
      log: function() {},
      warn: function() {},
      error: function() {},
      info: function() {}
    };
  }

    
define('Stockcar', ['vue'], function (Vue) { 'use strict';

  Vue = Vue && Vue.hasOwnProperty('default') ? Vue['default'] : Vue;

  /*
  @bmwkit/fetch-json
  Version: 0.0.1
  (c) Interone
  */
  function unfetch(url, options) {
  	options = options || {};
  	return new Promise( (resolve, reject) => {
  		let request = new XMLHttpRequest();

  		request.open(options.method || 'get', url, true);

  		for (let i in options.headers) {
  			request.setRequestHeader(i, options.headers[i]);
  		}

  		request.withCredentials = options.credentials=='include';

  		request.onload = () => {
  			resolve(response());
  		};

  		request.onerror = reject;

  		request.send(options.body || null);

  		function response() {
  			let keys = [],
  				all = [],
  				headers = {},
  				header;

  			request.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, (m, key, value) => {
  				keys.push(key = key.toLowerCase());
  				all.push([key, value]);
  				header = headers[key];
  				headers[key] = header ? `${header},${value}` : value;
  			});

  			return {
  				ok: (request.status/100|0) == 2,		// 200-299
  				status: request.status,
  				statusText: request.statusText,
  				url: request.responseURL,
  				clone: response,
  				text: () => Promise.resolve(request.responseText),
  				json: () => Promise.resolve(request.responseText).then(JSON.parse),
  				blob: () => Promise.resolve(new Blob([request.response])),
  				headers: {
  					keys: () => keys,
  					entries: () => all,
  					get: n => headers[n.toLowerCase()],
  					has: n => n.toLowerCase() in headers
  				}
  			};
  		}
  	});
  }

  if (!self.fetch) self.fetch = unfetch;

  /**
   * vue-promised v1.0.0
   * (c) 2018 Eduardo San Martin Morote <posva13@gmail.com>
   * @license MIT
   */

  function assert (condition, message) {
    if (!condition) {
      // useful when testing
      // console.warn(`[vue-promised] ${message}`)
      throw new Error(("[vue-promised] " + message))
    }
  }

  var Promised = {
    props: {
      tag: {
        type: String,
        default: 'span',
      },
      promise: {
        // allow polyfied Promise
        validator: function (p) { return p && typeof p.then === 'function' && typeof p.catch === 'function'; },
      },
      pendingDelay: {
        type: [Number, String],
        default: 200,
      },
    },

    data: function () { return ({
      resolved: false,
      data: null,
      error: null,

      isDelayElapsed: false,
    }); },

    render: function render (h) {
      if (this.$scopedSlots.combined) {
        var node = this.$scopedSlots.combined({
          isPending: !this.resolved,
          isDelayOver: this.isDelayElapsed,
          data: this.data,
          error: this.error,
        });
        assert(
          (Array.isArray(node) && node.length === 1) || node,
          'Provided "combined" scoped-slot cannot be empty and must contain one single children'
        );
        return Array.isArray(node) ? node[0] : node
      }

      if (this.error) {
        assert(this.$scopedSlots.rejected, 'No slot "rejected" provided. Cannot display the error');
        var node$1 = this.$scopedSlots.rejected(this.error);
        assert(
          (Array.isArray(node$1) && node$1.length) || node$1,
          'Provided slot "rejected" is empty. Cannot display the error'
        );
        return Array.isArray(node$1) ? convertVNodeArray(h, this.tag, node$1) : node$1
      }

      var defaultSlot = this.$slots.default;
      if (this.resolved) {
        if (this.$scopedSlots.default) {
          var node$2 = this.$scopedSlots.default(this.data);
          assert(
            (Array.isArray(node$2) && node$2.length) || node$2,
            'Provided default scoped-slot is empty. Cannot display the data'
          );
          return Array.isArray(node$2) ? convertVNodeArray(h, this.tag, node$2) : node$2
        }
        assert(defaultSlot, 'No default slot provided. Cannot display the data');
        assert(defaultSlot.length, 'Provided default slot is empty. Cannot display the data');
        return convertVNodeArray(h, this.tag, defaultSlot)
      }

      if (!this.isDelayElapsed) { return h() }

      var pendingSlot = this.$slots.pending;
      assert(pendingSlot, 'No "pending" slot provided. Cannot display pending state');
      assert(pendingSlot.length, 'Provided "pending" slot is empty. Cannot display pending state');
      return convertVNodeArray(h, this.tag, pendingSlot)
    },

    watch: {
      promise: {
        handler: function handler (promise) {
          var this$1 = this;

          if (!promise) { return }
          this.resolved = false;
          this.error = null;
          this.setupDelay();
          promise
            .then(function (data) {
              if (this$1.promise === promise) {
                this$1.data = data;
                this$1.resolved = true;
              }
            })
            .catch(function (err) {
              if (this$1.promise === promise) {
                this$1.error = err;
                this$1.resolved = true;
              }
            });
        },
        immediate: true,
      },
    },

    methods: {
      setupDelay: function setupDelay () {
        var this$1 = this;

        if (this.pendingDelay > 0) {
          this.isDelayElapsed = false;
          if (this.timerId) { clearTimeout(this.timerId); }
          this.timerId = setTimeout(function () { return (this$1.isDelayElapsed = true); }, this.pendingDelay);
        } else {
          this.isDelayElapsed = true;
        }
      },
    },
  };

  function convertVNodeArray (h, wrapperTag, nodes) {
    if (nodes.length > 1 || !nodes[0].tag) { return h(wrapperTag, {}, nodes) }
    return nodes[0]
  }

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".loader-spinner[data-v-40b6ee19]:before{position:fixed;top:50%;left:50%;display:block;width:30px;height:30px;margin:-15px 0 0 -15px;content:\" \";background:url(\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB2aWV3Qm94PSIwIDAgMTAwIDEwMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4NCiAgPHN0eWxlPg0KICAuc3Bpbm5lciB7DQogICAgYW5pbWF0aW9uLW5hbWU6IHNwaW47DQogICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAxMzAwbXM7DQogICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7DQogICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyOw0KICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjsNCn0NCi5pbm5lci1jaXJjbGUgew0KICAgIGFuaW1hdGlvbi1uYW1lOiB6b29tSW5PdXQ7DQogICAgYW5pbWF0aW9uLWR1cmF0aW9uOiA1MjAwbXM7DQogICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7DQogICAgLy9hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBsaW5lYXI7IA0KfQ0KDQpAa2V5ZnJhbWVzIHpvb21Jbk91dCB7DQogICAgMCUsIDUlLCA5NSUsIDEwMCUgew0KICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSg1MHB4LCA1MHB4KSBzY2FsZSgwKTsNCiAgICB9DQogICAgMjAlLCA4MCUgew0KICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgxMHB4LCAxMHB4KSBzY2FsZSgwLjgpOw0KICAgIH0NCn0NCkBrZXlmcmFtZXMgc3BpbiB7DQogICAgZnJvbSB7DQogICAgICAgIHRyYW5zZm9ybTpyb3RhdGUoMGRlZyk7DQogICAgfQ0KICAgIHRvIHsNCiAgICAgICAgdHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpOw0KICAgIH0NCn0NCiAgPC9zdHlsZT4NCiA8Zz4NCiAgPHJlY3QgeD0iMCIgeT0iMCIgd2lkdGg9IjEwMCIgaGVpZ2h0PSIxMDAiIGlkPSJjYW52YXNfYmFja2dyb3VuZCIgZmlsbD0iI2ZmZmZmZiIvPg0KIDwvZz4NCiA8ZyBjbGFzcz0ic3Bpbm5lciI+DQogIDxlbGxpcHNlIGZpbGw9IiMxYzY5ZDQiIHN0cm9rZT0iIzAwMCIgc3Ryb2tlLXdpZHRoPSIwIiBjeD0iNTAiIGN5PSI1MCIgcng9IjUwIiByeT0iNTAiLz4NCiAgPHJlY3QgaGVpZ2h0PSI1MCIgd2lkdGg9IjUwIiB5PSIwIiB4PSIwIiBzdHJva2Utd2lkdGg9IjAiIHN0cm9rZT0iIzAwMCIgZmlsbD0iI2ZmZmZmZiIvPg0KICA8cmVjdCBoZWlnaHQ9IjUwIiB3aWR0aD0iNTAiIHk9IjUwIiB4PSI1MCIgc3Ryb2tlLW9wYWNpdHk9Im51bGwiIHN0cm9rZS13aWR0aD0iMCIgc3Ryb2tlPSIjMDAwIiBmaWxsPSIjZmZmZmZmIi8+DQogIDxlbGxpcHNlIHJ5PSI1MCIgcng9IjUwIiBjbGFzcz0iaW5uZXItY2lyY2xlIiBjeT0iNTAiIGN4PSI1MCIgc3Ryb2tlLW9wYWNpdHk9Im51bGwiIHN0cm9rZS13aWR0aD0iMCIgc3Ryb2tlPSIjMDAwIiBmaWxsPSIjZmZmZmZmIi8+DQogPC9nPg0KPC9zdmc+\");background-repeat:no-repeat}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var FetchJson = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Promised',{attrs:{"promise":_vm.promiseComputed},scopedSlots:_vm._u([{key:"default",fn:function(data){return _c('div',{staticClass:"tw-h-full tw-w-full"},[_vm._t("default",null,{"fetchedJson":data})],2)}},{key:"rejected",fn:function(error){return _c('div',{},[_vm._t("rejected",null,{"error":error})],2)}}],null,true)},[_c('div',{attrs:{"slot":"pending"},slot:"pending"},[_vm._t("pending"),_vm._v(" "),(!_vm.$slots.pending)?_c('div',{staticClass:"loader-spinner"}):_vm._e()],2)])},staticRenderFns: [],_scopeId: 'data-v-40b6ee19',
    name: 'FetchJson',
    components: {
      Promised
    },
    props: {
      url: {
        type: String,
        default: ''
      },
      options: {
        type: Object,
        default() {
          return {};
        },
      },
      promise: {
        type: [Promise, Object],
        default: null
      },
    },
    computed: {
      promiseComputed() {
        if (this.promise) {
          return this.promise;
        }
        return this.fetchJSONPromise(this.url, this.options);
      },
    },
    methods: {
      fetchJSONPromise(url, options) {
        return fetch(this.url, this.options)
          .then(resp => {
            if (!resp.ok) {
              throw Error(resp.statusText);
            }
            return resp.json();
          })
      }
    },
    errorCaptured(err, vm, info) {
      console.warn(`${err.stack}\n\nfound in ${info} inside FetchJson component`);
      this.$emit('error', err);
      return false;
    },
  };

  const translateOption = (data, i18n) => {
    return data.map(object =>
      Object.assign({}, object, { label: i18n[object.label] })
    );
  };

  const getMinMaxValue = (value, postfix = '') => {
    if (value) {
      const postfixString = postfix ? ` ${  postfix}` : '';
      if (typeof value === 'object' && value.constructor === Object) {
        const { min, max } = value;

        if (min === max) {
          return `${max}${postfixString}`;
        }

        return `${min || ''}${min && max ? ' - ' : ' '}${max ||
        ''}${postfixString}`;
      }

      return `${value}${postfixString}`;
    }
    return '';
  };

  const formatNumber = (value) => {
    return value.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1.");
  };

  const translateLabel = (label, value) => {
    if (label === undefined) return '';

    if (Array.isArray(value)) {
      value.forEach((currVal, index) => {
        label = label.replace(`{${index}}`, currVal);
      });
    } else if (label.indexOf('{0}') >= 0) {
      label = label.replace('{0}', value);
    } else {
      label = `${label} - ${value}`;
    }

    return label;
  };

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Built-in value references. */
  var Symbol$1 = root.Symbol;

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;

  /** Built-in value references. */
  var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$1.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString$1.call(value);
  }

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag$1 && symToStringTag$1 in Object(value))
      ? getRawTag(value)
      : objectToString(value);
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  /** `Object#toString` result references. */
  var symbolTag = '[object Symbol]';

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return typeof value == 'symbol' ||
      (isObjectLike(value) && baseGetTag(value) == symbolTag);
  }

  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0;

  /**
   * The base implementation of `_.toNumber` which doesn't ensure correct
   * conversions of binary, hexadecimal, or octal string values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   */
  function baseToNumber(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    return +value;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isArray(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return arrayMap(value, baseToString) + '';
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
  }

  /**
   * Creates a function that performs a mathematical operation on two values.
   *
   * @private
   * @param {Function} operator The function to perform the operation.
   * @param {number} [defaultValue] The value used for `undefined` arguments.
   * @returns {Function} Returns the new mathematical operation function.
   */
  function createMathOperation(operator, defaultValue) {
    return function(value, other) {
      var result;
      if (value === undefined && other === undefined) {
        return defaultValue;
      }
      if (value !== undefined) {
        result = value;
      }
      if (other !== undefined) {
        if (result === undefined) {
          return other;
        }
        if (typeof value == 'string' || typeof other == 'string') {
          value = baseToString(value);
          other = baseToString(other);
        } else {
          value = baseToNumber(value);
          other = baseToNumber(other);
        }
        result = operator(value, other);
      }
      return result;
    };
  }

  /**
   * Adds two numbers.
   *
   * @static
   * @memberOf _
   * @since 3.4.0
   * @category Math
   * @param {number} augend The first number in an addition.
   * @param {number} addend The second number in an addition.
   * @returns {number} Returns the total.
   * @example
   *
   * _.add(6, 4);
   * // => 10
   */
  var add = createMathOperation(function(augend, addend) {
    return augend + addend;
  }, 0);

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  /** Used as references for various `Number` constants. */
  var NAN$1 = 0 / 0;

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol(value)) {
      return NAN$1;
    }
    if (isObject(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject(other) ? (other + '') : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return (isBinary || reIsOctal.test(value))
      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
      : (reIsBadHex.test(value) ? NAN$1 : +value);
  }

  /** Used as references for various `Number` constants. */
  var INFINITY$1 = 1 / 0,
      MAX_INTEGER = 1.7976931348623157e+308;

  /**
   * Converts `value` to a finite number.
   *
   * @static
   * @memberOf _
   * @since 4.12.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted number.
   * @example
   *
   * _.toFinite(3.2);
   * // => 3.2
   *
   * _.toFinite(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toFinite(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toFinite('3.2');
   * // => 3.2
   */
  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber(value);
    if (value === INFINITY$1 || value === -INFINITY$1) {
      var sign = (value < 0 ? -1 : 1);
      return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }

  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */
  function toInteger(value) {
    var result = toFinite(value),
        remainder = result % 1;

    return result === result ? (remainder ? result - remainder : result) : 0;
  }

  /** Error message constants. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * The opposite of `_.before`; this method creates a function that invokes
   * `func` once it's called `n` or more times.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {number} n The number of calls before `func` is invoked.
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new restricted function.
   * @example
   *
   * var saves = ['profile', 'settings'];
   *
   * var done = _.after(saves.length, function() {
   *   console.log('done saving!');
   * });
   *
   * _.forEach(saves, function(type) {
   *   asyncSave({ 'type': type, 'complete': done });
   * });
   * // => Logs 'done saving!' after the two async saves have completed.
   */
  function after(n, func) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    n = toInteger(n);
    return function() {
      if (--n < 1) {
        return func.apply(this, arguments);
      }
    };
  }

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }

  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  /** Used to detect overreaching core-js shims. */
  var coreJsData = root['__core-js_shared__'];

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }

  /** Used for built-in method references. */
  var funcProto = Function.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for built-in method references. */
  var funcProto$1 = Function.prototype,
      objectProto$2 = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$1 = funcProto$1.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$1 = objectProto$2.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  /* Built-in method references that are verified to be native. */
  var WeakMap$1 = getNative(root, 'WeakMap');

  /** Used to store function metadata. */
  var metaMap = WeakMap$1 && new WeakMap$1;

  /**
   * The base implementation of `setData` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to associate metadata with.
   * @param {*} data The metadata.
   * @returns {Function} Returns `func`.
   */
  var baseSetData = !metaMap ? identity : function(func, data) {
    metaMap.set(func, data);
    return func;
  };

  /** Built-in value references. */
  var objectCreate = Object.create;

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate = (function() {
    function object() {}
    return function(proto) {
      if (!isObject(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object;
      object.prototype = undefined;
      return result;
    };
  }());

  /**
   * Creates a function that produces an instance of `Ctor` regardless of
   * whether it was invoked as part of a `new` expression or by `call` or `apply`.
   *
   * @private
   * @param {Function} Ctor The constructor to wrap.
   * @returns {Function} Returns the new wrapped function.
   */
  function createCtor(Ctor) {
    return function() {
      // Use a `switch` statement to work with class constructors. See
      // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
      // for more details.
      var args = arguments;
      switch (args.length) {
        case 0: return new Ctor;
        case 1: return new Ctor(args[0]);
        case 2: return new Ctor(args[0], args[1]);
        case 3: return new Ctor(args[0], args[1], args[2]);
        case 4: return new Ctor(args[0], args[1], args[2], args[3]);
        case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
        case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
        case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
      }
      var thisBinding = baseCreate(Ctor.prototype),
          result = Ctor.apply(thisBinding, args);

      // Mimic the constructor's `return` behavior.
      // See https://es5.github.io/#x13.2.2 for more details.
      return isObject(result) ? result : thisBinding;
    };
  }

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1;

  /**
   * Creates a function that wraps `func` to invoke it with the optional `this`
   * binding of `thisArg`.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
   * @param {*} [thisArg] The `this` binding of `func`.
   * @returns {Function} Returns the new wrapped function.
   */
  function createBind(func, bitmask, thisArg) {
    var isBind = bitmask & WRAP_BIND_FLAG,
        Ctor = createCtor(func);

    function wrapper() {
      var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
      return fn.apply(isBind ? thisArg : this, arguments);
    }
    return wrapper;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * Creates an array that is the composition of partially applied arguments,
   * placeholders, and provided arguments into a single array of arguments.
   *
   * @private
   * @param {Array} args The provided arguments.
   * @param {Array} partials The arguments to prepend to those provided.
   * @param {Array} holders The `partials` placeholder indexes.
   * @params {boolean} [isCurried] Specify composing for a curried function.
   * @returns {Array} Returns the new array of composed arguments.
   */
  function composeArgs(args, partials, holders, isCurried) {
    var argsIndex = -1,
        argsLength = args.length,
        holdersLength = holders.length,
        leftIndex = -1,
        leftLength = partials.length,
        rangeLength = nativeMax(argsLength - holdersLength, 0),
        result = Array(leftLength + rangeLength),
        isUncurried = !isCurried;

    while (++leftIndex < leftLength) {
      result[leftIndex] = partials[leftIndex];
    }
    while (++argsIndex < holdersLength) {
      if (isUncurried || argsIndex < argsLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
    }
    while (rangeLength--) {
      result[leftIndex++] = args[argsIndex++];
    }
    return result;
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$1 = Math.max;

  /**
   * This function is like `composeArgs` except that the arguments composition
   * is tailored for `_.partialRight`.
   *
   * @private
   * @param {Array} args The provided arguments.
   * @param {Array} partials The arguments to append to those provided.
   * @param {Array} holders The `partials` placeholder indexes.
   * @params {boolean} [isCurried] Specify composing for a curried function.
   * @returns {Array} Returns the new array of composed arguments.
   */
  function composeArgsRight(args, partials, holders, isCurried) {
    var argsIndex = -1,
        argsLength = args.length,
        holdersIndex = -1,
        holdersLength = holders.length,
        rightIndex = -1,
        rightLength = partials.length,
        rangeLength = nativeMax$1(argsLength - holdersLength, 0),
        result = Array(rangeLength + rightLength),
        isUncurried = !isCurried;

    while (++argsIndex < rangeLength) {
      result[argsIndex] = args[argsIndex];
    }
    var offset = argsIndex;
    while (++rightIndex < rightLength) {
      result[offset + rightIndex] = partials[rightIndex];
    }
    while (++holdersIndex < holdersLength) {
      if (isUncurried || argsIndex < argsLength) {
        result[offset + holders[holdersIndex]] = args[argsIndex++];
      }
    }
    return result;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * The function whose prototype chain sequence wrappers inherit from.
   *
   * @private
   */
  function baseLodash() {
    // No operation performed.
  }

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295;

  /**
   * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
   *
   * @private
   * @constructor
   * @param {*} value The value to wrap.
   */
  function LazyWrapper(value) {
    this.__wrapped__ = value;
    this.__actions__ = [];
    this.__dir__ = 1;
    this.__filtered__ = false;
    this.__iteratees__ = [];
    this.__takeCount__ = MAX_ARRAY_LENGTH;
    this.__views__ = [];
  }

  // Ensure `LazyWrapper` is an instance of `baseLodash`.
  LazyWrapper.prototype = baseCreate(baseLodash.prototype);
  LazyWrapper.prototype.constructor = LazyWrapper;

  /**
   * This method returns `undefined`.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Util
   * @example
   *
   * _.times(2, _.noop);
   * // => [undefined, undefined]
   */
  function noop() {
    // No operation performed.
  }

  /**
   * Gets metadata for `func`.
   *
   * @private
   * @param {Function} func The function to query.
   * @returns {*} Returns the metadata for `func`.
   */
  var getData = !metaMap ? noop : function(func) {
    return metaMap.get(func);
  };

  /** Used to lookup unminified function names. */
  var realNames = {};

  /** Used for built-in method references. */
  var objectProto$3 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

  /**
   * Gets the name of `func`.
   *
   * @private
   * @param {Function} func The function to query.
   * @returns {string} Returns the function name.
   */
  function getFuncName(func) {
    var result = (func.name + ''),
        array = realNames[result],
        length = hasOwnProperty$2.call(realNames, result) ? array.length : 0;

    while (length--) {
      var data = array[length],
          otherFunc = data.func;
      if (otherFunc == null || otherFunc == func) {
        return data.name;
      }
    }
    return result;
  }

  /**
   * The base constructor for creating `lodash` wrapper objects.
   *
   * @private
   * @param {*} value The value to wrap.
   * @param {boolean} [chainAll] Enable explicit method chain sequences.
   */
  function LodashWrapper(value, chainAll) {
    this.__wrapped__ = value;
    this.__actions__ = [];
    this.__chain__ = !!chainAll;
    this.__index__ = 0;
    this.__values__ = undefined;
  }

  LodashWrapper.prototype = baseCreate(baseLodash.prototype);
  LodashWrapper.prototype.constructor = LodashWrapper;

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
        length = source.length;

    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  /**
   * Creates a clone of `wrapper`.
   *
   * @private
   * @param {Object} wrapper The wrapper to clone.
   * @returns {Object} Returns the cloned wrapper.
   */
  function wrapperClone(wrapper) {
    if (wrapper instanceof LazyWrapper) {
      return wrapper.clone();
    }
    var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
    result.__actions__ = copyArray(wrapper.__actions__);
    result.__index__  = wrapper.__index__;
    result.__values__ = wrapper.__values__;
    return result;
  }

  /** Used for built-in method references. */
  var objectProto$4 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto$4.hasOwnProperty;

  /**
   * Creates a `lodash` object which wraps `value` to enable implicit method
   * chain sequences. Methods that operate on and return arrays, collections,
   * and functions can be chained together. Methods that retrieve a single value
   * or may return a primitive value will automatically end the chain sequence
   * and return the unwrapped value. Otherwise, the value must be unwrapped
   * with `_#value`.
   *
   * Explicit chain sequences, which must be unwrapped with `_#value`, may be
   * enabled using `_.chain`.
   *
   * The execution of chained methods is lazy, that is, it's deferred until
   * `_#value` is implicitly or explicitly called.
   *
   * Lazy evaluation allows several methods to support shortcut fusion.
   * Shortcut fusion is an optimization to merge iteratee calls; this avoids
   * the creation of intermediate arrays and can greatly reduce the number of
   * iteratee executions. Sections of a chain sequence qualify for shortcut
   * fusion if the section is applied to an array and iteratees accept only
   * one argument. The heuristic for whether a section qualifies for shortcut
   * fusion is subject to change.
   *
   * Chaining is supported in custom builds as long as the `_#value` method is
   * directly or indirectly included in the build.
   *
   * In addition to lodash methods, wrappers have `Array` and `String` methods.
   *
   * The wrapper `Array` methods are:
   * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
   *
   * The wrapper `String` methods are:
   * `replace` and `split`
   *
   * The wrapper methods that support shortcut fusion are:
   * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
   * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
   * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
   *
   * The chainable wrapper methods are:
   * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
   * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
   * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
   * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
   * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
   * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
   * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
   * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
   * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
   * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
   * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
   * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
   * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
   * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
   * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
   * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
   * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
   * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
   * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
   * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
   * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
   * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
   * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
   * `zipObject`, `zipObjectDeep`, and `zipWith`
   *
   * The wrapper methods that are **not** chainable by default are:
   * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
   * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
   * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
   * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
   * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
   * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
   * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
   * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
   * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
   * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
   * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
   * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
   * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
   * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
   * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
   * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
   * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
   * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
   * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
   * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
   * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
   * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
   * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
   * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
   * `upperFirst`, `value`, and `words`
   *
   * @name _
   * @constructor
   * @category Seq
   * @param {*} value The value to wrap in a `lodash` instance.
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * var wrapped = _([1, 2, 3]);
   *
   * // Returns an unwrapped value.
   * wrapped.reduce(_.add);
   * // => 6
   *
   * // Returns a wrapped value.
   * var squares = wrapped.map(square);
   *
   * _.isArray(squares);
   * // => false
   *
   * _.isArray(squares.value());
   * // => true
   */
  function lodash(value) {
    if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
      if (value instanceof LodashWrapper) {
        return value;
      }
      if (hasOwnProperty$3.call(value, '__wrapped__')) {
        return wrapperClone(value);
      }
    }
    return new LodashWrapper(value);
  }

  // Ensure wrappers are instances of `baseLodash`.
  lodash.prototype = baseLodash.prototype;
  lodash.prototype.constructor = lodash;

  /**
   * Checks if `func` has a lazy counterpart.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
   *  else `false`.
   */
  function isLaziable(func) {
    var funcName = getFuncName(func),
        other = lodash[funcName];

    if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
      return false;
    }
    if (func === other) {
      return true;
    }
    var data = getData(other);
    return !!data && func === data[0];
  }

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeNow = Date.now;

  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */
  function shortOut(func) {
    var count = 0,
        lastCalled = 0;

    return function() {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);

      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(undefined, arguments);
    };
  }

  /**
   * Sets metadata for `func`.
   *
   * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
   * period of time, it will trip its breaker and transition to an identity
   * function to avoid garbage collection pauses in V8. See
   * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
   * for more details.
   *
   * @private
   * @param {Function} func The function to associate metadata with.
   * @param {*} data The metadata.
   * @returns {Function} Returns `func`.
   */
  var setData = shortOut(baseSetData);

  /** Used to match wrap detail comments. */
  var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /**
   * Extracts wrapper details from the `source` body comment.
   *
   * @private
   * @param {string} source The source to inspect.
   * @returns {Array} Returns the wrapper details.
   */
  function getWrapDetails(source) {
    var match = source.match(reWrapDetails);
    return match ? match[1].split(reSplitDetails) : [];
  }

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;

  /**
   * Inserts wrapper `details` in a comment at the top of the `source` body.
   *
   * @private
   * @param {string} source The source to modify.
   * @returns {Array} details The details to insert.
   * @returns {string} Returns the modified source.
   */
  function insertWrapDetails(source, details) {
    var length = details.length;
    if (!length) {
      return source;
    }
    var lastIndex = length - 1;
    details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
    details = details.join(length > 2 ? ', ' : ' ');
    return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
  }

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant(value) {
    return function() {
      return value;
    };
  }

  var defineProperty = (function() {
    try {
      var func = getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }());

  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var baseSetToString = !defineProperty ? identity : function(func, string) {
    return defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var setToString = shortOut(baseSetToString);

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG$1 = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG$1],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /**
   * Updates wrapper `details` based on `bitmask` flags.
   *
   * @private
   * @returns {Array} details The details to modify.
   * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
   * @returns {Array} Returns `details`.
   */
  function updateWrapDetails(details, bitmask) {
    arrayEach(wrapFlags, function(pair) {
      var value = '_.' + pair[0];
      if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
        details.push(value);
      }
    });
    return details.sort();
  }

  /**
   * Sets the `toString` method of `wrapper` to mimic the source of `reference`
   * with wrapper details in a comment at the top of the source body.
   *
   * @private
   * @param {Function} wrapper The function to modify.
   * @param {Function} reference The reference function.
   * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
   * @returns {Function} Returns `wrapper`.
   */
  function setWrapToString(wrapper, reference, bitmask) {
    var source = (reference + '');
    return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
  }

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG$2 = 1,
      WRAP_BIND_KEY_FLAG$1 = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG$1 = 8,
      WRAP_PARTIAL_FLAG$1 = 32,
      WRAP_PARTIAL_RIGHT_FLAG$1 = 64;

  /**
   * Creates a function that wraps `func` to continue currying.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
   * @param {Function} wrapFunc The function to create the `func` wrapper.
   * @param {*} placeholder The placeholder value.
   * @param {*} [thisArg] The `this` binding of `func`.
   * @param {Array} [partials] The arguments to prepend to those provided to
   *  the new function.
   * @param {Array} [holders] The `partials` placeholder indexes.
   * @param {Array} [argPos] The argument positions of the new function.
   * @param {number} [ary] The arity cap of `func`.
   * @param {number} [arity] The arity of `func`.
   * @returns {Function} Returns the new wrapped function.
   */
  function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
    var isCurry = bitmask & WRAP_CURRY_FLAG$1,
        newHolders = isCurry ? holders : undefined,
        newHoldersRight = isCurry ? undefined : holders,
        newPartials = isCurry ? partials : undefined,
        newPartialsRight = isCurry ? undefined : partials;

    bitmask |= (isCurry ? WRAP_PARTIAL_FLAG$1 : WRAP_PARTIAL_RIGHT_FLAG$1);
    bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG$1 : WRAP_PARTIAL_FLAG$1);

    if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
      bitmask &= ~(WRAP_BIND_FLAG$2 | WRAP_BIND_KEY_FLAG$1);
    }
    var newData = [
      func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
      newHoldersRight, argPos, ary, arity
    ];

    var result = wrapFunc.apply(undefined, newData);
    if (isLaziable(func)) {
      setData(result, newData);
    }
    result.placeholder = placeholder;
    return setWrapToString(result, func, bitmask);
  }

  /**
   * Gets the argument placeholder value for `func`.
   *
   * @private
   * @param {Function} func The function to inspect.
   * @returns {*} Returns the placeholder value.
   */
  function getHolder(func) {
    var object = func;
    return object.placeholder;
  }

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;

    return !!length &&
      (type == 'number' ||
        (type != 'symbol' && reIsUint.test(value))) &&
          (value > -1 && value % 1 == 0 && value < length);
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMin = Math.min;

  /**
   * Reorder `array` according to the specified indexes where the element at
   * the first index is assigned as the first element, the element at
   * the second index is assigned as the second element, and so on.
   *
   * @private
   * @param {Array} array The array to reorder.
   * @param {Array} indexes The arranged array indexes.
   * @returns {Array} Returns `array`.
   */
  function reorder(array, indexes) {
    var arrLength = array.length,
        length = nativeMin(indexes.length, arrLength),
        oldArray = copyArray(array);

    while (length--) {
      var index = indexes[length];
      array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
    }
    return array;
  }

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG$3 = 1,
      WRAP_BIND_KEY_FLAG$2 = 2,
      WRAP_CURRY_FLAG$2 = 8,
      WRAP_CURRY_RIGHT_FLAG$1 = 16,
      WRAP_ARY_FLAG$1 = 128,
      WRAP_FLIP_FLAG$1 = 512;

  /**
   * Creates a function that wraps `func` to invoke it with optional `this`
   * binding of `thisArg`, partial application, and currying.
   *
   * @private
   * @param {Function|string} func The function or method name to wrap.
   * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
   * @param {*} [thisArg] The `this` binding of `func`.
   * @param {Array} [partials] The arguments to prepend to those provided to
   *  the new function.
   * @param {Array} [holders] The `partials` placeholder indexes.
   * @param {Array} [partialsRight] The arguments to append to those provided
   *  to the new function.
   * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
   * @param {Array} [argPos] The argument positions of the new function.
   * @param {number} [ary] The arity cap of `func`.
   * @param {number} [arity] The arity of `func`.
   * @returns {Function} Returns the new wrapped function.
   */
  function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
    var isAry = bitmask & WRAP_ARY_FLAG$1,
        isBind = bitmask & WRAP_BIND_FLAG$3,
        isBindKey = bitmask & WRAP_BIND_KEY_FLAG$2,
        isCurried = bitmask & (WRAP_CURRY_FLAG$2 | WRAP_CURRY_RIGHT_FLAG$1),
        isFlip = bitmask & WRAP_FLIP_FLAG$1,
        Ctor = isBindKey ? undefined : createCtor(func);

    function wrapper() {
      var length = arguments.length,
          args = Array(length),
          index = length;

      while (index--) {
        args[index] = arguments[index];
      }
      if (isCurried) {
        var placeholder = getHolder(wrapper),
            holdersCount = countHolders(args, placeholder);
      }
      if (partials) {
        args = composeArgs(args, partials, holders, isCurried);
      }
      if (partialsRight) {
        args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
      }
      length -= holdersCount;
      if (isCurried && length < arity) {
        var newHolders = replaceHolders(args, placeholder);
        return createRecurry(
          func, bitmask, createHybrid, wrapper.placeholder, thisArg,
          args, newHolders, argPos, ary, arity - length
        );
      }
      var thisBinding = isBind ? thisArg : this,
          fn = isBindKey ? thisBinding[func] : func;

      length = args.length;
      if (argPos) {
        args = reorder(args, argPos);
      } else if (isFlip && length > 1) {
        args.reverse();
      }
      if (isAry && ary < length) {
        args.length = ary;
      }
      if (this && this !== root && this instanceof wrapper) {
        fn = Ctor || createCtor(fn);
      }
      return fn.apply(thisBinding, args);
    }
    return wrapper;
  }

  /**
   * Creates a function that wraps `func` to enable currying.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
   * @param {number} arity The arity of `func`.
   * @returns {Function} Returns the new wrapped function.
   */
  function createCurry(func, bitmask, arity) {
    var Ctor = createCtor(func);

    function wrapper() {
      var length = arguments.length,
          args = Array(length),
          index = length,
          placeholder = getHolder(wrapper);

      while (index--) {
        args[index] = arguments[index];
      }
      var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
        ? []
        : replaceHolders(args, placeholder);

      length -= holders.length;
      if (length < arity) {
        return createRecurry(
          func, bitmask, createHybrid, wrapper.placeholder, undefined,
          args, holders, undefined, undefined, arity - length);
      }
      var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
      return apply(fn, this, args);
    }
    return wrapper;
  }

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG$4 = 1;

  /**
   * Creates a function that wraps `func` to invoke it with the `this` binding
   * of `thisArg` and `partials` prepended to the arguments it receives.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} partials The arguments to prepend to those provided to
   *  the new function.
   * @returns {Function} Returns the new wrapped function.
   */
  function createPartial(func, bitmask, thisArg, partials) {
    var isBind = bitmask & WRAP_BIND_FLAG$4,
        Ctor = createCtor(func);

    function wrapper() {
      var argsIndex = -1,
          argsLength = arguments.length,
          leftIndex = -1,
          leftLength = partials.length,
          args = Array(leftLength + argsLength),
          fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

      while (++leftIndex < leftLength) {
        args[leftIndex] = partials[leftIndex];
      }
      while (argsLength--) {
        args[leftIndex++] = arguments[++argsIndex];
      }
      return apply(fn, isBind ? thisArg : this, args);
    }
    return wrapper;
  }

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER$1 = '__lodash_placeholder__';

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG$5 = 1,
      WRAP_BIND_KEY_FLAG$3 = 2,
      WRAP_CURRY_BOUND_FLAG$1 = 4,
      WRAP_CURRY_FLAG$3 = 8,
      WRAP_ARY_FLAG$2 = 128,
      WRAP_REARG_FLAG$1 = 256;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMin$1 = Math.min;

  /**
   * Merges the function metadata of `source` into `data`.
   *
   * Merging metadata reduces the number of wrappers used to invoke a function.
   * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
   * may be applied regardless of execution order. Methods like `_.ary` and
   * `_.rearg` modify function arguments, making the order in which they are
   * executed important, preventing the merging of metadata. However, we make
   * an exception for a safe combined case where curried functions have `_.ary`
   * and or `_.rearg` applied.
   *
   * @private
   * @param {Array} data The destination metadata.
   * @param {Array} source The source metadata.
   * @returns {Array} Returns `data`.
   */
  function mergeData(data, source) {
    var bitmask = data[1],
        srcBitmask = source[1],
        newBitmask = bitmask | srcBitmask,
        isCommon = newBitmask < (WRAP_BIND_FLAG$5 | WRAP_BIND_KEY_FLAG$3 | WRAP_ARY_FLAG$2);

    var isCombo =
      ((srcBitmask == WRAP_ARY_FLAG$2) && (bitmask == WRAP_CURRY_FLAG$3)) ||
      ((srcBitmask == WRAP_ARY_FLAG$2) && (bitmask == WRAP_REARG_FLAG$1) && (data[7].length <= source[8])) ||
      ((srcBitmask == (WRAP_ARY_FLAG$2 | WRAP_REARG_FLAG$1)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG$3));

    // Exit early if metadata can't be merged.
    if (!(isCommon || isCombo)) {
      return data;
    }
    // Use source `thisArg` if available.
    if (srcBitmask & WRAP_BIND_FLAG$5) {
      data[2] = source[2];
      // Set when currying a bound function.
      newBitmask |= bitmask & WRAP_BIND_FLAG$5 ? 0 : WRAP_CURRY_BOUND_FLAG$1;
    }
    // Compose partial arguments.
    var value = source[3];
    if (value) {
      var partials = data[3];
      data[3] = partials ? composeArgs(partials, value, source[4]) : value;
      data[4] = partials ? replaceHolders(data[3], PLACEHOLDER$1) : source[4];
    }
    // Compose partial right arguments.
    value = source[5];
    if (value) {
      partials = data[5];
      data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
      data[6] = partials ? replaceHolders(data[5], PLACEHOLDER$1) : source[6];
    }
    // Use source `argPos` if available.
    value = source[7];
    if (value) {
      data[7] = value;
    }
    // Use source `ary` if it's smaller.
    if (srcBitmask & WRAP_ARY_FLAG$2) {
      data[8] = data[8] == null ? source[8] : nativeMin$1(data[8], source[8]);
    }
    // Use source `arity` if one is not provided.
    if (data[9] == null) {
      data[9] = source[9];
    }
    // Use source `func` and merge bitmasks.
    data[0] = source[0];
    data[1] = newBitmask;

    return data;
  }

  /** Error message constants. */
  var FUNC_ERROR_TEXT$1 = 'Expected a function';

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG$6 = 1,
      WRAP_BIND_KEY_FLAG$4 = 2,
      WRAP_CURRY_FLAG$4 = 8,
      WRAP_CURRY_RIGHT_FLAG$2 = 16,
      WRAP_PARTIAL_FLAG$2 = 32,
      WRAP_PARTIAL_RIGHT_FLAG$2 = 64;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$2 = Math.max;

  /**
   * Creates a function that either curries or invokes `func` with optional
   * `this` binding and partially applied arguments.
   *
   * @private
   * @param {Function|string} func The function or method name to wrap.
   * @param {number} bitmask The bitmask flags.
   *    1 - `_.bind`
   *    2 - `_.bindKey`
   *    4 - `_.curry` or `_.curryRight` of a bound function
   *    8 - `_.curry`
   *   16 - `_.curryRight`
   *   32 - `_.partial`
   *   64 - `_.partialRight`
   *  128 - `_.rearg`
   *  256 - `_.ary`
   *  512 - `_.flip`
   * @param {*} [thisArg] The `this` binding of `func`.
   * @param {Array} [partials] The arguments to be partially applied.
   * @param {Array} [holders] The `partials` placeholder indexes.
   * @param {Array} [argPos] The argument positions of the new function.
   * @param {number} [ary] The arity cap of `func`.
   * @param {number} [arity] The arity of `func`.
   * @returns {Function} Returns the new wrapped function.
   */
  function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
    var isBindKey = bitmask & WRAP_BIND_KEY_FLAG$4;
    if (!isBindKey && typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$1);
    }
    var length = partials ? partials.length : 0;
    if (!length) {
      bitmask &= ~(WRAP_PARTIAL_FLAG$2 | WRAP_PARTIAL_RIGHT_FLAG$2);
      partials = holders = undefined;
    }
    ary = ary === undefined ? ary : nativeMax$2(toInteger(ary), 0);
    arity = arity === undefined ? arity : toInteger(arity);
    length -= holders ? holders.length : 0;

    if (bitmask & WRAP_PARTIAL_RIGHT_FLAG$2) {
      var partialsRight = partials,
          holdersRight = holders;

      partials = holders = undefined;
    }
    var data = isBindKey ? undefined : getData(func);

    var newData = [
      func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
      argPos, ary, arity
    ];

    if (data) {
      mergeData(newData, data);
    }
    func = newData[0];
    bitmask = newData[1];
    thisArg = newData[2];
    partials = newData[3];
    holders = newData[4];
    arity = newData[9] = newData[9] === undefined
      ? (isBindKey ? 0 : func.length)
      : nativeMax$2(newData[9] - length, 0);

    if (!arity && bitmask & (WRAP_CURRY_FLAG$4 | WRAP_CURRY_RIGHT_FLAG$2)) {
      bitmask &= ~(WRAP_CURRY_FLAG$4 | WRAP_CURRY_RIGHT_FLAG$2);
    }
    if (!bitmask || bitmask == WRAP_BIND_FLAG$6) {
      var result = createBind(func, bitmask, thisArg);
    } else if (bitmask == WRAP_CURRY_FLAG$4 || bitmask == WRAP_CURRY_RIGHT_FLAG$2) {
      result = createCurry(func, bitmask, arity);
    } else if ((bitmask == WRAP_PARTIAL_FLAG$2 || bitmask == (WRAP_BIND_FLAG$6 | WRAP_PARTIAL_FLAG$2)) && !holders.length) {
      result = createPartial(func, bitmask, thisArg, partials);
    } else {
      result = createHybrid.apply(undefined, newData);
    }
    var setter = data ? baseSetData : setData;
    return setWrapToString(setter(result, newData), func, bitmask);
  }

  /** Used to compose bitmasks for function metadata. */
  var WRAP_ARY_FLAG$3 = 128;

  /**
   * Creates a function that invokes `func`, with up to `n` arguments,
   * ignoring any additional arguments.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Function
   * @param {Function} func The function to cap arguments for.
   * @param {number} [n=func.length] The arity cap.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Function} Returns the new capped function.
   * @example
   *
   * _.map(['6', '8', '10'], _.ary(parseInt, 1));
   * // => [6, 8, 10]
   */
  function ary(func, n, guard) {
    n = guard ? undefined : n;
    n = (func && n == null) ? func.length : n;
    return createWrap(func, WRAP_ARY_FLAG$3, undefined, undefined, undefined, undefined, n);
  }

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) {
      defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$4 = objectProto$5.hasOwnProperty;

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty$4.call(object, key) && eq(objValue, value)) ||
        (value === undefined && !(key in object))) {
      baseAssignValue(object, key, value);
    }
  }

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];

      var newValue = customizer
        ? customizer(object[key], source[key], key, object, source)
        : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }
    return object;
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$3 = Math.max;

  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */
  function overRest(func, start, transform) {
    start = nativeMax$3(start === undefined ? (func.length - 1) : start, 0);
    return function() {
      var args = arguments,
          index = -1,
          length = nativeMax$3(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + '');
  }

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$1 = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
  }

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)
        ) {
      return eq(object[index], value);
    }
    return false;
  }

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner(assigner) {
    return baseRest(function(object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;

      customizer = (assigner.length > 3 && typeof customizer == 'function')
        ? (length--, customizer)
        : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }

  /** Used for built-in method references. */
  var objectProto$6 = Object.prototype;

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$6;

    return value === proto;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]';

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }

  /** Used for built-in method references. */
  var objectProto$7 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$5 = objectProto$7.hasOwnProperty;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$7.propertyIsEnumerable;

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty$5.call(value, 'callee') &&
      !propertyIsEnumerable.call(value, 'callee');
  };

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? root.Buffer : undefined;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse;

  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag$1 = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike(value) &&
      isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /** Detect free variable `exports`. */
  var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports$1 && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

  /** Used for built-in method references. */
  var objectProto$8 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$6 = objectProto$8.hasOwnProperty;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$6.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             isIndex(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = overArg(Object.keys, Object);

  /** Used for built-in method references. */
  var objectProto$9 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$7 = objectProto$9.hasOwnProperty;

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$7.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  /** Used for built-in method references. */
  var objectProto$a = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$8 = objectProto$a.hasOwnProperty;

  /**
   * Assigns own enumerable string keyed properties of source objects to the
   * destination object. Source objects are applied from left to right.
   * Subsequent sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object` and is loosely based on
   * [`Object.assign`](https://mdn.io/Object/assign).
   *
   * @static
   * @memberOf _
   * @since 0.10.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.assignIn
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * function Bar() {
   *   this.c = 3;
   * }
   *
   * Foo.prototype.b = 2;
   * Bar.prototype.d = 4;
   *
   * _.assign({ 'a': 0 }, new Foo, new Bar);
   * // => { 'a': 1, 'c': 3 }
   */
  var assign = createAssigner(function(object, source) {
    if (isPrototype(source) || isArrayLike(source)) {
      copyObject(source, keys(source), object);
      return;
    }
    for (var key in source) {
      if (hasOwnProperty$8.call(source, key)) {
        assignValue(object, key, source[key]);
      }
    }
  });

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }

  /** Used for built-in method references. */
  var objectProto$b = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$9 = objectProto$b.hasOwnProperty;

  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$9.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn$1(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  /**
   * This method is like `_.assign` except that it iterates over own and
   * inherited source properties.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @alias extend
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.assign
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * function Bar() {
   *   this.c = 3;
   * }
   *
   * Foo.prototype.b = 2;
   * Bar.prototype.d = 4;
   *
   * _.assignIn({ 'a': 0 }, new Foo, new Bar);
   * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
   */
  var assignIn = createAssigner(function(object, source) {
    copyObject(source, keysIn$1(source), object);
  });

  /**
   * This method is like `_.assignIn` except that it accepts `customizer`
   * which is invoked to produce the assigned values. If `customizer` returns
   * `undefined`, assignment is handled by the method instead. The `customizer`
   * is invoked with five arguments: (objValue, srcValue, key, object, source).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @alias extendWith
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} [customizer] The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @see _.assignWith
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   return _.isUndefined(objValue) ? srcValue : objValue;
   * }
   *
   * var defaults = _.partialRight(_.assignInWith, customizer);
   *
   * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
   * // => { 'a': 1, 'b': 2 }
   */
  var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
    copyObject(source, keysIn$1(source), object, customizer);
  });

  /**
   * This method is like `_.assign` except that it accepts `customizer`
   * which is invoked to produce the assigned values. If `customizer` returns
   * `undefined`, assignment is handled by the method instead. The `customizer`
   * is invoked with five arguments: (objValue, srcValue, key, object, source).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} [customizer] The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @see _.assignInWith
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   return _.isUndefined(objValue) ? srcValue : objValue;
   * }
   *
   * var defaults = _.partialRight(_.assignWith, customizer);
   *
   * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
   * // => { 'a': 1, 'b': 2 }
   */
  var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
    copyObject(source, keys(source), object, customizer);
  });

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' ||
        value == null || isSymbol(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
      (object != null && value in Object(object));
  }

  /* Built-in method references that are verified to be native. */
  var nativeCreate = getNative(Object, 'create');

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used for built-in method references. */
  var objectProto$c = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$a = objectProto$c.hasOwnProperty;

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty$a.call(data, key) ? data[key] : undefined;
  }

  /** Used for built-in method references. */
  var objectProto$d = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$b = objectProto$d.hasOwnProperty;

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? (data[key] !== undefined) : hasOwnProperty$b.call(data, key);
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
    return this;
  }

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  /** Used for built-in method references. */
  var arrayProto = Array.prototype;

  /** Built-in value references. */
  var splice = arrayProto.splice;

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  /* Built-in method references that are verified to be native. */
  var Map$1 = getNative(root, 'Map');

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash,
      'map': new (Map$1 || ListCache),
      'string': new Hash
    };
  }

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    var data = getMapData(this, key),
        size = data.size;

    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  /** Error message constants. */
  var FUNC_ERROR_TEXT$2 = 'Expected a function';

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize(func, resolver) {
    if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
      throw new TypeError(FUNC_ERROR_TEXT$2);
    }
    var memoized = function() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    memoized.cache = new (memoize.Cache || MapCache);
    return memoized;
  }

  // Expose `MapCache`.
  memoize.Cache = MapCache;

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */
  function memoizeCapped(func) {
    var result = memoize(func, function(key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });

    var cache = result.cache;
    return result;
  }

  /** Used to match property names within property paths. */
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath = memoizeCapped(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */) {
      result.push('');
    }
    string.replace(rePropName, function(match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
    });
    return result;
  });

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath(value, object) {
    if (isArray(value)) {
      return value;
    }
    return isKey(value, object) ? [value] : stringToPath(toString(value));
  }

  /** Used as references for various `Number` constants. */
  var INFINITY$2 = 1 / 0;

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY$2) ? '-0' : result;
  }

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet(object, path) {
    path = castPath(path, object);

    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }
    return (index && index == length) ? object : undefined;
  }

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  /**
   * The base implementation of `_.at` without support for individual paths.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {string[]} paths The property paths to pick.
   * @returns {Array} Returns the picked elements.
   */
  function baseAt(object, paths) {
    var index = -1,
        length = paths.length,
        result = Array(length),
        skip = object == null;

    while (++index < length) {
      result[index] = skip ? undefined : get(object, paths[index]);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /** Built-in value references. */
  var spreadableSymbol = Symbol$1 ? Symbol$1.isConcatSpreadable : undefined;

  /**
   * Checks if `value` is a flattenable `arguments` object or array.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */
  function isFlattenable(value) {
    return isArray(value) || isArguments(value) ||
      !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;

    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }

  /**
   * Flattens `array` a single level deep.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, [3, [4]], 5]]);
   * // => [1, 2, [3, [4]], 5]
   */
  function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, 1) : [];
  }

  /**
   * A specialized version of `baseRest` which flattens the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @returns {Function} Returns the new function.
   */
  function flatRest(func) {
    return setToString(overRest(func, undefined, flatten), func + '');
  }

  /**
   * Creates an array of values corresponding to `paths` of `object`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {...(string|string[])} [paths] The property paths to pick.
   * @returns {Array} Returns the picked values.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
   *
   * _.at(object, ['a[0].b.c', 'a[1]']);
   * // => [3, 4]
   */
  var at = flatRest(baseAt);

  /** Built-in value references. */
  var getPrototype = overArg(Object.getPrototypeOf, Object);

  /** `Object#toString` result references. */
  var objectTag$1 = '[object Object]';

  /** Used for built-in method references. */
  var funcProto$2 = Function.prototype,
      objectProto$e = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$2 = funcProto$2.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$c = objectProto$e.hasOwnProperty;

  /** Used to infer the `Object` constructor. */
  var objectCtorString = funcToString$2.call(Object);

  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */
  function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag$1) {
      return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty$c.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor &&
      funcToString$2.call(Ctor) == objectCtorString;
  }

  /** `Object#toString` result references. */
  var domExcTag = '[object DOMException]',
      errorTag$1 = '[object Error]';

  /**
   * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
   * `SyntaxError`, `TypeError`, or `URIError` object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
   * @example
   *
   * _.isError(new Error);
   * // => true
   *
   * _.isError(Error);
   * // => false
   */
  function isError(value) {
    if (!isObjectLike(value)) {
      return false;
    }
    var tag = baseGetTag(value);
    return tag == errorTag$1 || tag == domExcTag ||
      (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
  }

  /**
   * Attempts to invoke `func`, returning either the result or the caught error
   * object. Any additional arguments are provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Util
   * @param {Function} func The function to attempt.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {*} Returns the `func` result or error object.
   * @example
   *
   * // Avoid throwing errors for invalid selectors.
   * var elements = _.attempt(function(selector) {
   *   return document.querySelectorAll(selector);
   * }, '>_>');
   *
   * if (_.isError(elements)) {
   *   elements = [];
   * }
   */
  var attempt = baseRest(function(func, args) {
    try {
      return apply(func, undefined, args);
    } catch (e) {
      return isError(e) ? e : new Error(e);
    }
  });

  /** Error message constants. */
  var FUNC_ERROR_TEXT$3 = 'Expected a function';

  /**
   * Creates a function that invokes `func`, with the `this` binding and arguments
   * of the created function, while it's called less than `n` times. Subsequent
   * calls to the created function return the result of the last `func` invocation.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Function
   * @param {number} n The number of calls at which `func` is no longer invoked.
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new restricted function.
   * @example
   *
   * jQuery(element).on('click', _.before(5, addContactToList));
   * // => Allows adding up to 4 contacts to the list.
   */
  function before(n, func) {
    var result;
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$3);
    }
    n = toInteger(n);
    return function() {
      if (--n > 0) {
        result = func.apply(this, arguments);
      }
      if (n <= 1) {
        func = undefined;
      }
      return result;
    };
  }

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG$7 = 1,
      WRAP_PARTIAL_FLAG$3 = 32;

  /**
   * Creates a function that invokes `func` with the `this` binding of `thisArg`
   * and `partials` prepended to the arguments it receives.
   *
   * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
   * may be used as a placeholder for partially applied arguments.
   *
   * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
   * property of bound functions.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to bind.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {...*} [partials] The arguments to be partially applied.
   * @returns {Function} Returns the new bound function.
   * @example
   *
   * function greet(greeting, punctuation) {
   *   return greeting + ' ' + this.user + punctuation;
   * }
   *
   * var object = { 'user': 'fred' };
   *
   * var bound = _.bind(greet, object, 'hi');
   * bound('!');
   * // => 'hi fred!'
   *
   * // Bound with placeholders.
   * var bound = _.bind(greet, object, _, '!');
   * bound('hi');
   * // => 'hi fred!'
   */
  var bind = baseRest(function(func, thisArg, partials) {
    var bitmask = WRAP_BIND_FLAG$7;
    if (partials.length) {
      var holders = replaceHolders(partials, getHolder(bind));
      bitmask |= WRAP_PARTIAL_FLAG$3;
    }
    return createWrap(func, bitmask, thisArg, partials, holders);
  });

  // Assign default placeholders.
  bind.placeholder = {};

  /**
   * Binds methods of an object to the object itself, overwriting the existing
   * method.
   *
   * **Note:** This method doesn't set the "length" property of bound functions.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {Object} object The object to bind and assign the bound methods to.
   * @param {...(string|string[])} methodNames The object method names to bind.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var view = {
   *   'label': 'docs',
   *   'click': function() {
   *     console.log('clicked ' + this.label);
   *   }
   * };
   *
   * _.bindAll(view, ['click']);
   * jQuery(element).on('click', view.click);
   * // => Logs 'clicked docs' when clicked.
   */
  var bindAll = flatRest(function(object, methodNames) {
    arrayEach(methodNames, function(key) {
      key = toKey(key);
      baseAssignValue(object, key, bind(object[key], object));
    });
    return object;
  });

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG$8 = 1,
      WRAP_BIND_KEY_FLAG$5 = 2,
      WRAP_PARTIAL_FLAG$4 = 32;

  /**
   * Creates a function that invokes the method at `object[key]` with `partials`
   * prepended to the arguments it receives.
   *
   * This method differs from `_.bind` by allowing bound functions to reference
   * methods that may be redefined or don't yet exist. See
   * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
   * for more details.
   *
   * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
   * builds, may be used as a placeholder for partially applied arguments.
   *
   * @static
   * @memberOf _
   * @since 0.10.0
   * @category Function
   * @param {Object} object The object to invoke the method on.
   * @param {string} key The key of the method.
   * @param {...*} [partials] The arguments to be partially applied.
   * @returns {Function} Returns the new bound function.
   * @example
   *
   * var object = {
   *   'user': 'fred',
   *   'greet': function(greeting, punctuation) {
   *     return greeting + ' ' + this.user + punctuation;
   *   }
   * };
   *
   * var bound = _.bindKey(object, 'greet', 'hi');
   * bound('!');
   * // => 'hi fred!'
   *
   * object.greet = function(greeting, punctuation) {
   *   return greeting + 'ya ' + this.user + punctuation;
   * };
   *
   * bound('!');
   * // => 'hiya fred!'
   *
   * // Bound with placeholders.
   * var bound = _.bindKey(object, 'greet', _, '!');
   * bound('hi');
   * // => 'hiya fred!'
   */
  var bindKey = baseRest(function(object, key, partials) {
    var bitmask = WRAP_BIND_FLAG$8 | WRAP_BIND_KEY_FLAG$5;
    if (partials.length) {
      var holders = replaceHolders(partials, getHolder(bindKey));
      bitmask |= WRAP_PARTIAL_FLAG$4;
    }
    return createWrap(key, bitmask, object, partials, holders);
  });

  // Assign default placeholders.
  bindKey.placeholder = {};

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : (length + start);
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : ((end - start) >>> 0);
    start >>>= 0;

    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }

  /**
   * Casts `array` to a slice if it's needed.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {number} start The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the cast slice.
   */
  function castSlice(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return (!start && end >= length) ? array : baseSlice(array, start, end);
  }

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsVarRange = '\\ufe0e\\ufe0f';

  /** Used to compose unicode capture groups. */
  var rsZWJ = '\\u200d';

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /** Used to compose unicode character classes. */
  var rsAstralRange$1 = '\\ud800-\\udfff',
      rsComboMarksRange$1 = '\\u0300-\\u036f',
      reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
      rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
      rsVarRange$1 = '\\ufe0e\\ufe0f';

  /** Used to compose unicode capture groups. */
  var rsAstral = '[' + rsAstralRange$1 + ']',
      rsCombo = '[' + rsComboRange$1 + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange$1 + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsZWJ$1 = '\\u200d';

  /** Used to compose unicode regexes. */
  var reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange$1 + ']?',
      rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Creates a function like `_.lowerFirst`.
   *
   * @private
   * @param {string} methodName The name of the `String` case method to use.
   * @returns {Function} Returns the new case function.
   */
  function createCaseFirst(methodName) {
    return function(string) {
      string = toString(string);

      var strSymbols = hasUnicode(string)
        ? stringToArray(string)
        : undefined;

      var chr = strSymbols
        ? strSymbols[0]
        : string.charAt(0);

      var trailing = strSymbols
        ? castSlice(strSymbols, 1).join('')
        : string.slice(1);

      return chr[methodName]() + trailing;
    };
  }

  /**
   * Converts the first character of `string` to upper case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.upperFirst('fred');
   * // => 'Fred'
   *
   * _.upperFirst('FRED');
   * // => 'FRED'
   */
  var upperFirst = createCaseFirst('toUpperCase');

  /**
   * Converts the first character of `string` to upper case and the remaining
   * to lower case.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to capitalize.
   * @returns {string} Returns the capitalized string.
   * @example
   *
   * _.capitalize('FRED');
   * // => 'Fred'
   */
  function capitalize(string) {
    return upperFirst(toString(string).toLowerCase());
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to compose unicode character classes. */
  var rsComboMarksRange$2 = '\\u0300-\\u036f',
      reComboHalfMarksRange$2 = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange$2 = '\\u20d0-\\u20ff',
      rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2;

  /** Used to compose unicode capture groups. */
  var rsCombo$1 = '[' + rsComboRange$2 + ']';

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo$1, 'g');

  /**
   * Deburrs `string` by converting
   * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
   * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
   * letters to basic Latin letters and removing
   * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to deburr.
   * @returns {string} Returns the deburred string.
   * @example
   *
   * _.deburr('déjà vu');
   * // => 'deja vu'
   */
  function deburr(string) {
    string = toString(string);
    return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
  }

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /** Used to compose unicode character classes. */
  var rsAstralRange$2 = '\\ud800-\\udfff',
      rsComboMarksRange$3 = '\\u0300-\\u036f',
      reComboHalfMarksRange$3 = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange$3 = '\\u20d0-\\u20ff',
      rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange$2 = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo$2 = '[' + rsComboRange$3 + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange$2 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz$1 = '\\ud83c[\\udffb-\\udfff]',
      rsModifier$1 = '(?:' + rsCombo$2 + '|' + rsFitz$1 + ')',
      rsNonAstral$1 = '[^' + rsAstralRange$2 + ']',
      rsRegional$1 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair$1 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ$2 = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod$1 = rsModifier$1 + '?',
      rsOptVar$1 = '[' + rsVarRange$2 + ']?',
      rsOptJoin$1 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
      rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /**
   * Splits `string` into an array of its words.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to inspect.
   * @param {RegExp|string} [pattern] The pattern to match words.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the words of `string`.
   * @example
   *
   * _.words('fred, barney, & pebbles');
   * // => ['fred', 'barney', 'pebbles']
   *
   * _.words('fred, barney, & pebbles', /[^, ]+/g);
   * // => ['fred', 'barney', '&', 'pebbles']
   */
  function words(string, pattern, guard) {
    string = toString(string);
    pattern = guard ? undefined : pattern;

    if (pattern === undefined) {
      return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
    }
    return string.match(pattern) || [];
  }

  /** Used to compose unicode capture groups. */
  var rsApos$1 = "['\u2019]";

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos$1, 'g');

  /**
   * Creates a function like `_.camelCase`.
   *
   * @private
   * @param {Function} callback The function to combine each word.
   * @returns {Function} Returns the new compounder function.
   */
  function createCompounder(callback) {
    return function(string) {
      return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
    };
  }

  /**
   * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the camel cased string.
   * @example
   *
   * _.camelCase('Foo Bar');
   * // => 'fooBar'
   *
   * _.camelCase('--foo-bar--');
   * // => 'fooBar'
   *
   * _.camelCase('__FOO_BAR__');
   * // => 'fooBar'
   */
  var camelCase = createCompounder(function(result, word, index) {
    word = word.toLowerCase();
    return result + (index ? capitalize(word) : word);
  });

  /**
   * Casts `value` as an array if it's not one.
   *
   * @static
   * @memberOf _
   * @since 4.4.0
   * @category Lang
   * @param {*} value The value to inspect.
   * @returns {Array} Returns the cast array.
   * @example
   *
   * _.castArray(1);
   * // => [1]
   *
   * _.castArray({ 'a': 1 });
   * // => [{ 'a': 1 }]
   *
   * _.castArray('abc');
   * // => ['abc']
   *
   * _.castArray(null);
   * // => [null]
   *
   * _.castArray(undefined);
   * // => [undefined]
   *
   * _.castArray();
   * // => []
   *
   * var array = [1, 2, 3];
   * console.log(_.castArray(array) === array);
   * // => true
   */
  function castArray() {
    if (!arguments.length) {
      return [];
    }
    var value = arguments[0];
    return isArray(value) ? value : [value];
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsFinite = root.isFinite,
      nativeMin$2 = Math.min;

  /**
   * Creates a function like `_.round`.
   *
   * @private
   * @param {string} methodName The name of the `Math` method to use when rounding.
   * @returns {Function} Returns the new round function.
   */
  function createRound(methodName) {
    var func = Math[methodName];
    return function(number, precision) {
      number = toNumber(number);
      precision = precision == null ? 0 : nativeMin$2(toInteger(precision), 292);
      if (precision && nativeIsFinite(number)) {
        // Shift with exponential notation to avoid floating-point issues.
        // See [MDN](https://mdn.io/round#Examples) for more details.
        var pair = (toString(number) + 'e').split('e'),
            value = func(pair[0] + 'e' + (+pair[1] + precision));

        pair = (toString(value) + 'e').split('e');
        return +(pair[0] + 'e' + (+pair[1] - precision));
      }
      return func(number);
    };
  }

  /**
   * Computes `number` rounded up to `precision`.
   *
   * @static
   * @memberOf _
   * @since 3.10.0
   * @category Math
   * @param {number} number The number to round up.
   * @param {number} [precision=0] The precision to round up to.
   * @returns {number} Returns the rounded up number.
   * @example
   *
   * _.ceil(4.006);
   * // => 5
   *
   * _.ceil(6.004, 2);
   * // => 6.01
   *
   * _.ceil(6040, -2);
   * // => 6100
   */
  var ceil = createRound('ceil');

  /**
   * Creates a `lodash` wrapper instance that wraps `value` with explicit method
   * chain sequences enabled. The result of such sequences must be unwrapped
   * with `_#value`.
   *
   * @static
   * @memberOf _
   * @since 1.3.0
   * @category Seq
   * @param {*} value The value to wrap.
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'age': 36 },
   *   { 'user': 'fred',    'age': 40 },
   *   { 'user': 'pebbles', 'age': 1 }
   * ];
   *
   * var youngest = _
   *   .chain(users)
   *   .sortBy('age')
   *   .map(function(o) {
   *     return o.user + ' is ' + o.age;
   *   })
   *   .head()
   *   .value();
   * // => 'pebbles is 1'
   */
  function chain(value) {
    var result = lodash(value);
    result.__chain__ = true;
    return result;
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil = Math.ceil,
      nativeMax$4 = Math.max;

  /**
   * Creates an array of elements split into groups the length of `size`.
   * If `array` can't be split evenly, the final chunk will be the remaining
   * elements.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to process.
   * @param {number} [size=1] The length of each chunk
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the new array of chunks.
   * @example
   *
   * _.chunk(['a', 'b', 'c', 'd'], 2);
   * // => [['a', 'b'], ['c', 'd']]
   *
   * _.chunk(['a', 'b', 'c', 'd'], 3);
   * // => [['a', 'b', 'c'], ['d']]
   */
  function chunk(array, size, guard) {
    if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
      size = 1;
    } else {
      size = nativeMax$4(toInteger(size), 0);
    }
    var length = array == null ? 0 : array.length;
    if (!length || size < 1) {
      return [];
    }
    var index = 0,
        resIndex = 0,
        result = Array(nativeCeil(length / size));

    while (index < length) {
      result[resIndex++] = baseSlice(array, index, (index += size));
    }
    return result;
  }

  /**
   * The base implementation of `_.clamp` which doesn't coerce arguments.
   *
   * @private
   * @param {number} number The number to clamp.
   * @param {number} [lower] The lower bound.
   * @param {number} upper The upper bound.
   * @returns {number} Returns the clamped number.
   */
  function baseClamp(number, lower, upper) {
    if (number === number) {
      if (upper !== undefined) {
        number = number <= upper ? number : upper;
      }
      if (lower !== undefined) {
        number = number >= lower ? number : lower;
      }
    }
    return number;
  }

  /**
   * Clamps `number` within the inclusive `lower` and `upper` bounds.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Number
   * @param {number} number The number to clamp.
   * @param {number} [lower] The lower bound.
   * @param {number} upper The upper bound.
   * @returns {number} Returns the clamped number.
   * @example
   *
   * _.clamp(-10, -5, 5);
   * // => -5
   *
   * _.clamp(10, -5, 5);
   * // => 5
   */
  function clamp(number, lower, upper) {
    if (upper === undefined) {
      upper = lower;
      lower = undefined;
    }
    if (upper !== undefined) {
      upper = toNumber(upper);
      upper = upper === upper ? upper : 0;
    }
    if (lower !== undefined) {
      lower = toNumber(lower);
      lower = lower === lower ? lower : 0;
    }
    return baseClamp(toNumber(number), lower, upper);
  }

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new ListCache;
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);

    this.size = data.size;
    return result;
  }

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map$1 || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  // Add methods to `Stack`.
  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;

  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
  }

  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssignIn(object, source) {
    return object && copyObject(source, keysIn$1(source), object);
  }

  /** Detect free variable `exports`. */
  var freeExports$2 = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule$2 = freeExports$2 && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;

  /** Built-in value references. */
  var Buffer$1 = moduleExports$2 ? root.Buffer : undefined,
      allocUnsafe = Buffer$1 ? Buffer$1.allocUnsafe : undefined;

  /**
   * Creates a clone of  `buffer`.
   *
   * @private
   * @param {Buffer} buffer The buffer to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Buffer} Returns the cloned buffer.
   */
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

    buffer.copy(result);
    return result;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  /** Used for built-in method references. */
  var objectProto$f = Object.prototype;

  /** Built-in value references. */
  var propertyIsEnumerable$1 = objectProto$f.propertyIsEnumerable;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable$1.call(object, symbol);
    });
  };

  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbolsIn = !nativeGetSymbols$1 ? stubArray : function(object) {
    var result = [];
    while (object) {
      arrayPush(result, getSymbols(object));
      object = getPrototype(object);
    }
    return result;
  };

  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbolsIn(source, object) {
    return copyObject(source, getSymbolsIn(source), object);
  }

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }

  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn$1, getSymbolsIn);
  }

  /* Built-in method references that are verified to be native. */
  var DataView = getNative(root, 'DataView');

  /* Built-in method references that are verified to be native. */
  var Promise$1 = getNative(root, 'Promise');

  /* Built-in method references that are verified to be native. */
  var Set$1 = getNative(root, 'Set');

  /** `Object#toString` result references. */
  var mapTag$1 = '[object Map]',
      objectTag$2 = '[object Object]',
      promiseTag = '[object Promise]',
      setTag$1 = '[object Set]',
      weakMapTag$1 = '[object WeakMap]';

  var dataViewTag$1 = '[object DataView]';

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map$1),
      promiseCtorString = toSource(Promise$1),
      setCtorString = toSource(Set$1),
      weakMapCtorString = toSource(WeakMap$1);

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag = baseGetTag;

  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag$1) ||
      (Map$1 && getTag(new Map$1) != mapTag$1) ||
      (Promise$1 && getTag(Promise$1.resolve()) != promiseTag) ||
      (Set$1 && getTag(new Set$1) != setTag$1) ||
      (WeakMap$1 && getTag(new WeakMap$1) != weakMapTag$1)) {
    getTag = function(value) {
      var result = baseGetTag(value),
          Ctor = result == objectTag$2 ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString: return dataViewTag$1;
          case mapCtorString: return mapTag$1;
          case promiseCtorString: return promiseTag;
          case setCtorString: return setTag$1;
          case weakMapCtorString: return weakMapTag$1;
        }
      }
      return result;
    };
  }

  var getTag$1 = getTag;

  /** Used for built-in method references. */
  var objectProto$g = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$d = objectProto$g.hasOwnProperty;

  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */
  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length);

    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty$d.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }

  /** Built-in value references. */
  var Uint8Array$1 = root.Uint8Array;

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
    return result;
  }

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$1 = Symbol$1 ? Symbol$1.prototype : undefined,
      symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : undefined;

  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */
  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  /** `Object#toString` result references. */
  var boolTag$1 = '[object Boolean]',
      dateTag$1 = '[object Date]',
      mapTag$2 = '[object Map]',
      numberTag$1 = '[object Number]',
      regexpTag$1 = '[object RegExp]',
      setTag$2 = '[object Set]',
      stringTag$1 = '[object String]',
      symbolTag$1 = '[object Symbol]';

  var arrayBufferTag$1 = '[object ArrayBuffer]',
      dataViewTag$2 = '[object DataView]',
      float32Tag$1 = '[object Float32Array]',
      float64Tag$1 = '[object Float64Array]',
      int8Tag$1 = '[object Int8Array]',
      int16Tag$1 = '[object Int16Array]',
      int32Tag$1 = '[object Int32Array]',
      uint8Tag$1 = '[object Uint8Array]',
      uint8ClampedTag$1 = '[object Uint8ClampedArray]',
      uint16Tag$1 = '[object Uint16Array]',
      uint32Tag$1 = '[object Uint32Array]';

  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag$1:
        return cloneArrayBuffer(object);

      case boolTag$1:
      case dateTag$1:
        return new Ctor(+object);

      case dataViewTag$2:
        return cloneDataView(object, isDeep);

      case float32Tag$1: case float64Tag$1:
      case int8Tag$1: case int16Tag$1: case int32Tag$1:
      case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
        return cloneTypedArray(object, isDeep);

      case mapTag$2:
        return new Ctor;

      case numberTag$1:
      case stringTag$1:
        return new Ctor(object);

      case regexpTag$1:
        return cloneRegExp(object);

      case setTag$2:
        return new Ctor;

      case symbolTag$1:
        return cloneSymbol(object);
    }
  }

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject(object) {
    return (typeof object.constructor == 'function' && !isPrototype(object))
      ? baseCreate(getPrototype(object))
      : {};
  }

  /** `Object#toString` result references. */
  var mapTag$3 = '[object Map]';

  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */
  function baseIsMap(value) {
    return isObjectLike(value) && getTag$1(value) == mapTag$3;
  }

  /* Node.js helper references. */
  var nodeIsMap = nodeUtil && nodeUtil.isMap;

  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */
  var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

  /** `Object#toString` result references. */
  var setTag$3 = '[object Set]';

  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */
  function baseIsSet(value) {
    return isObjectLike(value) && getTag$1(value) == setTag$3;
  }

  /* Node.js helper references. */
  var nodeIsSet = nodeUtil && nodeUtil.isSet;

  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */
  var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** `Object#toString` result references. */
  var argsTag$2 = '[object Arguments]',
      arrayTag$1 = '[object Array]',
      boolTag$2 = '[object Boolean]',
      dateTag$2 = '[object Date]',
      errorTag$2 = '[object Error]',
      funcTag$2 = '[object Function]',
      genTag$1 = '[object GeneratorFunction]',
      mapTag$4 = '[object Map]',
      numberTag$2 = '[object Number]',
      objectTag$3 = '[object Object]',
      regexpTag$2 = '[object RegExp]',
      setTag$4 = '[object Set]',
      stringTag$2 = '[object String]',
      symbolTag$2 = '[object Symbol]',
      weakMapTag$2 = '[object WeakMap]';

  var arrayBufferTag$2 = '[object ArrayBuffer]',
      dataViewTag$3 = '[object DataView]',
      float32Tag$2 = '[object Float32Array]',
      float64Tag$2 = '[object Float64Array]',
      int8Tag$2 = '[object Int8Array]',
      int16Tag$2 = '[object Int16Array]',
      int32Tag$2 = '[object Int32Array]',
      uint8Tag$2 = '[object Uint8Array]',
      uint8ClampedTag$2 = '[object Uint8ClampedArray]',
      uint16Tag$2 = '[object Uint16Array]',
      uint32Tag$2 = '[object Uint32Array]';

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag$2] = cloneableTags[arrayTag$1] =
  cloneableTags[arrayBufferTag$2] = cloneableTags[dataViewTag$3] =
  cloneableTags[boolTag$2] = cloneableTags[dateTag$2] =
  cloneableTags[float32Tag$2] = cloneableTags[float64Tag$2] =
  cloneableTags[int8Tag$2] = cloneableTags[int16Tag$2] =
  cloneableTags[int32Tag$2] = cloneableTags[mapTag$4] =
  cloneableTags[numberTag$2] = cloneableTags[objectTag$3] =
  cloneableTags[regexpTag$2] = cloneableTags[setTag$4] =
  cloneableTags[stringTag$2] = cloneableTags[symbolTag$2] =
  cloneableTags[uint8Tag$2] = cloneableTags[uint8ClampedTag$2] =
  cloneableTags[uint16Tag$2] = cloneableTags[uint32Tag$2] = true;
  cloneableTags[errorTag$2] = cloneableTags[funcTag$2] =
  cloneableTags[weakMapTag$2] = false;

  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */
  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG,
        isFlat = bitmask & CLONE_FLAT_FLAG,
        isFull = bitmask & CLONE_SYMBOLS_FLAG;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== undefined) {
      return result;
    }
    if (!isObject(value)) {
      return value;
    }
    var isArr = isArray(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag$1(value),
          isFunc = tag == funcTag$2 || tag == genTag$1;

      if (isBuffer(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag == objectTag$3 || tag == argsTag$2 || (isFunc && !object)) {
        result = (isFlat || isFunc) ? {} : initCloneObject(value);
        if (!isDeep) {
          return isFlat
            ? copySymbolsIn(value, baseAssignIn(result, value))
            : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = initCloneByTag(value, tag, isDeep);
      }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new Stack);
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);

    if (isSet(value)) {
      value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap(value)) {
      value.forEach(function(subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
    }

    var keysFunc = isFull
      ? (isFlat ? getAllKeysIn : getAllKeys)
      : (isFlat ? keysIn : keys);

    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function(subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }
      // Recursively populate clone (susceptible to call stack limits).
      assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  /** Used to compose bitmasks for cloning. */
  var CLONE_SYMBOLS_FLAG$1 = 4;

  /**
   * Creates a shallow clone of `value`.
   *
   * **Note:** This method is loosely based on the
   * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
   * and supports cloning arrays, array buffers, booleans, date objects, maps,
   * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
   * arrays. The own enumerable properties of `arguments` objects are cloned
   * as plain objects. An empty object is returned for uncloneable values such
   * as error objects, functions, DOM nodes, and WeakMaps.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to clone.
   * @returns {*} Returns the cloned value.
   * @see _.cloneDeep
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var shallow = _.clone(objects);
   * console.log(shallow[0] === objects[0]);
   * // => true
   */
  function clone(value) {
    return baseClone(value, CLONE_SYMBOLS_FLAG$1);
  }

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$1 = 1,
      CLONE_SYMBOLS_FLAG$2 = 4;

  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */
  function cloneDeep(value) {
    return baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$2);
  }

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$2 = 1,
      CLONE_SYMBOLS_FLAG$3 = 4;

  /**
   * This method is like `_.cloneWith` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @param {Function} [customizer] The function to customize cloning.
   * @returns {*} Returns the deep cloned value.
   * @see _.cloneWith
   * @example
   *
   * function customizer(value) {
   *   if (_.isElement(value)) {
   *     return value.cloneNode(true);
   *   }
   * }
   *
   * var el = _.cloneDeepWith(document.body, customizer);
   *
   * console.log(el === document.body);
   * // => false
   * console.log(el.nodeName);
   * // => 'BODY'
   * console.log(el.childNodes.length);
   * // => 20
   */
  function cloneDeepWith(value, customizer) {
    customizer = typeof customizer == 'function' ? customizer : undefined;
    return baseClone(value, CLONE_DEEP_FLAG$2 | CLONE_SYMBOLS_FLAG$3, customizer);
  }

  /** Used to compose bitmasks for cloning. */
  var CLONE_SYMBOLS_FLAG$4 = 4;

  /**
   * This method is like `_.clone` except that it accepts `customizer` which
   * is invoked to produce the cloned value. If `customizer` returns `undefined`,
   * cloning is handled by the method instead. The `customizer` is invoked with
   * up to four arguments; (value [, index|key, object, stack]).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to clone.
   * @param {Function} [customizer] The function to customize cloning.
   * @returns {*} Returns the cloned value.
   * @see _.cloneDeepWith
   * @example
   *
   * function customizer(value) {
   *   if (_.isElement(value)) {
   *     return value.cloneNode(false);
   *   }
   * }
   *
   * var el = _.cloneWith(document.body, customizer);
   *
   * console.log(el === document.body);
   * // => false
   * console.log(el.nodeName);
   * // => 'BODY'
   * console.log(el.childNodes.length);
   * // => 0
   */
  function cloneWith(value, customizer) {
    customizer = typeof customizer == 'function' ? customizer : undefined;
    return baseClone(value, CLONE_SYMBOLS_FLAG$4, customizer);
  }

  /**
   * Executes the chain sequence and returns the wrapped result.
   *
   * @name commit
   * @memberOf _
   * @since 3.2.0
   * @category Seq
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var array = [1, 2];
   * var wrapped = _(array).push(3);
   *
   * console.log(array);
   * // => [1, 2]
   *
   * wrapped = wrapped.commit();
   * console.log(array);
   * // => [1, 2, 3]
   *
   * wrapped.last();
   * // => 3
   *
   * console.log(array);
   * // => [1, 2, 3]
   */
  function wrapperCommit() {
    return new LodashWrapper(this.value(), this.__chain__);
  }

  /**
   * Creates an array with all falsey values removed. The values `false`, `null`,
   * `0`, `""`, `undefined`, and `NaN` are falsey.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to compact.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * _.compact([0, 1, false, 2, '', 3]);
   * // => [1, 2, 3]
   */
  function compact(array) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * Creates a new array concatenating `array` with any additional arrays
   * and/or values.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to concatenate.
   * @param {...*} [values] The values to concatenate.
   * @returns {Array} Returns the new concatenated array.
   * @example
   *
   * var array = [1];
   * var other = _.concat(array, 2, [3], [[4]]);
   *
   * console.log(other);
   * // => [1, 2, 3, [4]]
   *
   * console.log(array);
   * // => [1]
   */
  function concat() {
    var length = arguments.length;
    if (!length) {
      return [];
    }
    var args = Array(length - 1),
        array = arguments[0],
        index = length;

    while (index--) {
      args[index - 1] = arguments[index];
    }
    return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED$2);
    return this;
  }

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */
  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new MapCache;
    while (++index < length) {
      this.add(values[index]);
    }
  }

  // Add methods to `SetCache`.
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(array);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var index = -1,
        result = true,
        seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

    stack.set(array, other);
    stack.set(other, array);

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, arrValue, index, other, array, stack)
          : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!arraySome(other, function(othValue, othIndex) {
              if (!cacheHas(seen, othIndex) &&
                  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
          result = false;
          break;
        }
      } else if (!(
            arrValue === othValue ||
              equalFunc(arrValue, othValue, bitmask, customizer, stack)
          )) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$1 = 1,
      COMPARE_UNORDERED_FLAG$1 = 2;

  /** `Object#toString` result references. */
  var boolTag$3 = '[object Boolean]',
      dateTag$3 = '[object Date]',
      errorTag$3 = '[object Error]',
      mapTag$5 = '[object Map]',
      numberTag$3 = '[object Number]',
      regexpTag$3 = '[object RegExp]',
      setTag$5 = '[object Set]',
      stringTag$3 = '[object String]',
      symbolTag$3 = '[object Symbol]';

  var arrayBufferTag$3 = '[object ArrayBuffer]',
      dataViewTag$4 = '[object DataView]';

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$2 = Symbol$1 ? Symbol$1.prototype : undefined,
      symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag$4:
        if ((object.byteLength != other.byteLength) ||
            (object.byteOffset != other.byteOffset)) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag$3:
        if ((object.byteLength != other.byteLength) ||
            !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
          return false;
        }
        return true;

      case boolTag$3:
      case dateTag$3:
      case numberTag$3:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq(+object, +other);

      case errorTag$3:
        return object.name == other.name && object.message == other.message;

      case regexpTag$3:
      case stringTag$3:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == (other + '');

      case mapTag$5:
        var convert = mapToArray;

      case setTag$5:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG$1;

        // Recursively compare objects (susceptible to call stack limits).
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag$3:
        if (symbolValueOf$1) {
          return symbolValueOf$1.call(object) == symbolValueOf$1.call(other);
        }
    }
    return false;
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$2 = 1;

  /** Used for built-in method references. */
  var objectProto$h = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$e = objectProto$h.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty$e.call(other, key))) {
        return false;
      }
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(object);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);

    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, objValue, key, other, object, stack)
          : customizer(objValue, othValue, key, object, other, stack);
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined
            ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
            : compared
          )) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor &&
          ('constructor' in object && 'constructor' in other) &&
          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$3 = 1;

  /** `Object#toString` result references. */
  var argsTag$3 = '[object Arguments]',
      arrayTag$2 = '[object Array]',
      objectTag$4 = '[object Object]';

  /** Used for built-in method references. */
  var objectProto$i = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$f = objectProto$i.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? arrayTag$2 : getTag$1(object),
        othTag = othIsArr ? arrayTag$2 : getTag$1(other);

    objTag = objTag == argsTag$3 ? objectTag$4 : objTag;
    othTag = othTag == argsTag$3 ? objectTag$4 : othTag;

    var objIsObj = objTag == objectTag$4,
        othIsObj = othTag == objectTag$4,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack);
      return (objIsArr || isTypedArray(object))
        ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
        : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {
      var objIsWrapped = objIsObj && hasOwnProperty$f.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty$f.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;

        stack || (stack = new Stack);
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack);
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$4 = 1,
      COMPARE_UNORDERED_FLAG$2 = 2;

  /**
   * The base implementation of `_.isMatch` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Array} matchData The property names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */
  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if ((noCustomizer && data[2])
            ? data[1] !== object[data[0]]
            : !(data[0] in object)
          ) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack;
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === undefined
              ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$4 | COMPARE_UNORDERED_FLAG$2, customizer, stack)
              : result
            )) {
          return false;
        }
      }
    }
    return true;
  }

  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */
  function isStrictComparable(value) {
    return value === value && !isObject(value);
  }

  /**
   * Gets the property names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */
  function getMatchData(object) {
    var result = keys(object),
        length = result.length;

    while (length--) {
      var key = result[length],
          value = object[key];

      result[length] = [key, value, isStrictComparable(value)];
    }
    return result;
  }

  /**
   * A specialized version of `matchesProperty` for source values suitable
   * for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function matchesStrictComparable(key, srcValue) {
    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue &&
        (srcValue !== undefined || (key in Object(object)));
    };
  }

  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }
    return function(object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */
  function hasPath(object, path, hasFunc) {
    path = castPath(path, object);

    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = toKey(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length) {
      return result;
    }
    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) &&
      (isArray(object) || isArguments(object));
  }

  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */
  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$5 = 1,
      COMPARE_UNORDERED_FLAG$3 = 2;

  /**
   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey(path), srcValue);
    }
    return function(object) {
      var objValue = get(object, path);
      return (objValue === undefined && objValue === srcValue)
        ? hasIn(object, path)
        : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$5 | COMPARE_UNORDERED_FLAG$3);
    };
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyDeep(path) {
    return function(object) {
      return baseGet(object, path);
    };
  }

  /**
   * Creates a function that returns the value at `path` of a given object.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': 2 } },
   *   { 'a': { 'b': 1 } }
   * ];
   *
   * _.map(objects, _.property('a.b'));
   * // => [2, 1]
   *
   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
   * // => [1, 2]
   */
  function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }

  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */
  function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') {
      return value;
    }
    if (value == null) {
      return identity;
    }
    if (typeof value == 'object') {
      return isArray(value)
        ? baseMatchesProperty(value[0], value[1])
        : baseMatches(value);
    }
    return property(value);
  }

  /** Error message constants. */
  var FUNC_ERROR_TEXT$4 = 'Expected a function';

  /**
   * Creates a function that iterates over `pairs` and invokes the corresponding
   * function of the first predicate to return truthy. The predicate-function
   * pairs are invoked with the `this` binding and arguments of the created
   * function.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Util
   * @param {Array} pairs The predicate-function pairs.
   * @returns {Function} Returns the new composite function.
   * @example
   *
   * var func = _.cond([
   *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
   *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
   *   [_.stubTrue,                      _.constant('no match')]
   * ]);
   *
   * func({ 'a': 1, 'b': 2 });
   * // => 'matches A'
   *
   * func({ 'a': 0, 'b': 1 });
   * // => 'matches B'
   *
   * func({ 'a': '1', 'b': '2' });
   * // => 'no match'
   */
  function cond(pairs) {
    var length = pairs == null ? 0 : pairs.length,
        toIteratee = baseIteratee;

    pairs = !length ? [] : arrayMap(pairs, function(pair) {
      if (typeof pair[1] != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$4);
      }
      return [toIteratee(pair[0]), pair[1]];
    });

    return baseRest(function(args) {
      var index = -1;
      while (++index < length) {
        var pair = pairs[index];
        if (apply(pair[0], this, args)) {
          return apply(pair[1], this, args);
        }
      }
    });
  }

  /**
   * The base implementation of `_.conformsTo` which accepts `props` to check.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property predicates to conform to.
   * @returns {boolean} Returns `true` if `object` conforms, else `false`.
   */
  function baseConformsTo(object, source, props) {
    var length = props.length;
    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (length--) {
      var key = props[length],
          predicate = source[key],
          value = object[key];

      if ((value === undefined && !(key in object)) || !predicate(value)) {
        return false;
      }
    }
    return true;
  }

  /**
   * The base implementation of `_.conforms` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property predicates to conform to.
   * @returns {Function} Returns the new spec function.
   */
  function baseConforms(source) {
    var props = keys(source);
    return function(object) {
      return baseConformsTo(object, source, props);
    };
  }

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$3 = 1;

  /**
   * Creates a function that invokes the predicate properties of `source` with
   * the corresponding property values of a given object, returning `true` if
   * all predicates return truthy, else `false`.
   *
   * **Note:** The created function is equivalent to `_.conformsTo` with
   * `source` partially applied.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Util
   * @param {Object} source The object of property predicates to conform to.
   * @returns {Function} Returns the new spec function.
   * @example
   *
   * var objects = [
   *   { 'a': 2, 'b': 1 },
   *   { 'a': 1, 'b': 2 }
   * ];
   *
   * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
   * // => [{ 'a': 1, 'b': 2 }]
   */
  function conforms(source) {
    return baseConforms(baseClone(source, CLONE_DEEP_FLAG$3));
  }

  /**
   * Checks if `object` conforms to `source` by invoking the predicate
   * properties of `source` with the corresponding property values of `object`.
   *
   * **Note:** This method is equivalent to `_.conforms` when `source` is
   * partially applied.
   *
   * @static
   * @memberOf _
   * @since 4.14.0
   * @category Lang
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property predicates to conform to.
   * @returns {boolean} Returns `true` if `object` conforms, else `false`.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   *
   * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
   * // => true
   *
   * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
   * // => false
   */
  function conformsTo(object, source) {
    return source == null || baseConformsTo(object, source, keys(source));
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = createBaseFor();

  /**
   * The base implementation of `_.forOwn` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  }

  /**
   * Creates a `baseEach` or `baseEachRight` function.
   *
   * @private
   * @param {Function} eachFunc The function to iterate over a collection.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length,
          index = fromRight ? length : -1,
          iterable = Object(collection);

      while ((fromRight ? index-- : ++index < length)) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }

  /**
   * The base implementation of `_.forEach` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   */
  var baseEach = createBaseEach(baseForOwn);

  /**
   * Aggregates elements of `collection` on `accumulator` with keys transformed
   * by `iteratee` and values set by `setter`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function baseAggregator(collection, setter, iteratee, accumulator) {
    baseEach(collection, function(value, key, collection) {
      setter(accumulator, value, iteratee(value), collection);
    });
    return accumulator;
  }

  /**
   * Creates a function like `_.groupBy`.
   *
   * @private
   * @param {Function} setter The function to set accumulator values.
   * @param {Function} [initializer] The accumulator object initializer.
   * @returns {Function} Returns the new aggregator function.
   */
  function createAggregator(setter, initializer) {
    return function(collection, iteratee) {
      var func = isArray(collection) ? arrayAggregator : baseAggregator,
          accumulator = initializer ? initializer() : {};

      return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
    };
  }

  /** Used for built-in method references. */
  var objectProto$j = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$g = objectProto$j.hasOwnProperty;

  /**
   * Creates an object composed of keys generated from the results of running
   * each element of `collection` thru `iteratee`. The corresponding value of
   * each key is the number of times the key was returned by `iteratee`. The
   * iteratee is invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 0.5.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
   * @returns {Object} Returns the composed aggregate object.
   * @example
   *
   * _.countBy([6.1, 4.2, 6.3], Math.floor);
   * // => { '4': 1, '6': 2 }
   *
   * // The `_.property` iteratee shorthand.
   * _.countBy(['one', 'two', 'three'], 'length');
   * // => { '3': 2, '5': 1 }
   */
  var countBy = createAggregator(function(result, value, key) {
    if (hasOwnProperty$g.call(result, key)) {
      ++result[key];
    } else {
      baseAssignValue(result, key, 1);
    }
  });

  /**
   * Creates an object that inherits from the `prototype` object. If a
   * `properties` object is given, its own enumerable string keyed properties
   * are assigned to the created object.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Object
   * @param {Object} prototype The object to inherit from.
   * @param {Object} [properties] The properties to assign to the object.
   * @returns {Object} Returns the new object.
   * @example
   *
   * function Shape() {
   *   this.x = 0;
   *   this.y = 0;
   * }
   *
   * function Circle() {
   *   Shape.call(this);
   * }
   *
   * Circle.prototype = _.create(Shape.prototype, {
   *   'constructor': Circle
   * });
   *
   * var circle = new Circle;
   * circle instanceof Circle;
   * // => true
   *
   * circle instanceof Shape;
   * // => true
   */
  function create(prototype, properties) {
    var result = baseCreate(prototype);
    return properties == null ? result : baseAssign(result, properties);
  }

  /** Used to compose bitmasks for function metadata. */
  var WRAP_CURRY_FLAG$5 = 8;

  /**
   * Creates a function that accepts arguments of `func` and either invokes
   * `func` returning its result, if at least `arity` number of arguments have
   * been provided, or returns a function that accepts the remaining `func`
   * arguments, and so on. The arity of `func` may be specified if `func.length`
   * is not sufficient.
   *
   * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
   * may be used as a placeholder for provided arguments.
   *
   * **Note:** This method doesn't set the "length" property of curried functions.
   *
   * @static
   * @memberOf _
   * @since 2.0.0
   * @category Function
   * @param {Function} func The function to curry.
   * @param {number} [arity=func.length] The arity of `func`.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Function} Returns the new curried function.
   * @example
   *
   * var abc = function(a, b, c) {
   *   return [a, b, c];
   * };
   *
   * var curried = _.curry(abc);
   *
   * curried(1)(2)(3);
   * // => [1, 2, 3]
   *
   * curried(1, 2)(3);
   * // => [1, 2, 3]
   *
   * curried(1, 2, 3);
   * // => [1, 2, 3]
   *
   * // Curried with placeholders.
   * curried(1)(_, 3)(2);
   * // => [1, 2, 3]
   */
  function curry(func, arity, guard) {
    arity = guard ? undefined : arity;
    var result = createWrap(func, WRAP_CURRY_FLAG$5, undefined, undefined, undefined, undefined, undefined, arity);
    result.placeholder = curry.placeholder;
    return result;
  }

  // Assign default placeholders.
  curry.placeholder = {};

  /** Used to compose bitmasks for function metadata. */
  var WRAP_CURRY_RIGHT_FLAG$3 = 16;

  /**
   * This method is like `_.curry` except that arguments are applied to `func`
   * in the manner of `_.partialRight` instead of `_.partial`.
   *
   * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
   * builds, may be used as a placeholder for provided arguments.
   *
   * **Note:** This method doesn't set the "length" property of curried functions.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Function
   * @param {Function} func The function to curry.
   * @param {number} [arity=func.length] The arity of `func`.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Function} Returns the new curried function.
   * @example
   *
   * var abc = function(a, b, c) {
   *   return [a, b, c];
   * };
   *
   * var curried = _.curryRight(abc);
   *
   * curried(3)(2)(1);
   * // => [1, 2, 3]
   *
   * curried(2, 3)(1);
   * // => [1, 2, 3]
   *
   * curried(1, 2, 3);
   * // => [1, 2, 3]
   *
   * // Curried with placeholders.
   * curried(3)(1, _)(2);
   * // => [1, 2, 3]
   */
  function curryRight(func, arity, guard) {
    arity = guard ? undefined : arity;
    var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG$3, undefined, undefined, undefined, undefined, undefined, arity);
    result.placeholder = curryRight.placeholder;
    return result;
  }

  // Assign default placeholders.
  curryRight.placeholder = {};

  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */
  var now = function() {
    return root.Date.now();
  };

  /** Error message constants. */
  var FUNC_ERROR_TEXT$5 = 'Expected a function';

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$5 = Math.max,
      nativeMin$3 = Math.min;

  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */
  function debounce(func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$5);
    }
    wait = toNumber(wait) || 0;
    if (isObject(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax$5(toNumber(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function invokeFunc(time) {
      var args = lastArgs,
          thisArg = lastThis;

      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }

    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time;
      // Start the timer for the trailing edge.
      timerId = setTimeout(timerExpired, wait);
      // Invoke the leading edge.
      return leading ? invokeFunc(time) : result;
    }

    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime,
          timeWaiting = wait - timeSinceLastCall;

      return maxing
        ? nativeMin$3(timeWaiting, maxWait - timeSinceLastInvoke)
        : timeWaiting;
    }

    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime;

      // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.
      return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
        (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    }

    function timerExpired() {
      var time = now();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      // Restart the timer.
      timerId = setTimeout(timerExpired, remainingWait(time));
    }

    function trailingEdge(time) {
      timerId = undefined;

      // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = undefined;
      return result;
    }

    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }

    function flush() {
      return timerId === undefined ? result : trailingEdge(now());
    }

    function debounced() {
      var time = now(),
          isInvoking = shouldInvoke(time);

      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;

      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          // Handle invocations in a tight loop.
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  /**
   * Checks `value` to determine whether a default value should be returned in
   * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
   * or `undefined`.
   *
   * @static
   * @memberOf _
   * @since 4.14.0
   * @category Util
   * @param {*} value The value to check.
   * @param {*} defaultValue The default value.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * _.defaultTo(1, 10);
   * // => 1
   *
   * _.defaultTo(undefined, 10);
   * // => 10
   */
  function defaultTo(value, defaultValue) {
    return (value == null || value !== value) ? defaultValue : value;
  }

  /** Used for built-in method references. */
  var objectProto$k = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$h = objectProto$k.hasOwnProperty;

  /**
   * Assigns own and inherited enumerable string keyed properties of source
   * objects to the destination object for all destination properties that
   * resolve to `undefined`. Source objects are applied from left to right.
   * Once a property is set, additional values of the same property are ignored.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.defaultsDeep
   * @example
   *
   * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
   * // => { 'a': 1, 'b': 2 }
   */
  var defaults = baseRest(function(object, sources) {
    object = Object(object);

    var index = -1;
    var length = sources.length;
    var guard = length > 2 ? sources[2] : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      length = 1;
    }

    while (++index < length) {
      var source = sources[index];
      var props = keysIn$1(source);
      var propsIndex = -1;
      var propsLength = props.length;

      while (++propsIndex < propsLength) {
        var key = props[propsIndex];
        var value = object[key];

        if (value === undefined ||
            (eq(value, objectProto$k[key]) && !hasOwnProperty$h.call(object, key))) {
          object[key] = source[key];
        }
      }
    }

    return object;
  });

  /**
   * This function is like `assignValue` except that it doesn't assign
   * `undefined` values.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignMergeValue(object, key, value) {
    if ((value !== undefined && !eq(object[key], value)) ||
        (value === undefined && !(key in object))) {
      baseAssignValue(object, key, value);
    }
  }

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  /**
   * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function safeGet(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') {
      return;
    }

    if (key == '__proto__') {
      return;
    }

    return object[key];
  }

  /**
   * Converts `value` to a plain object flattening inherited enumerable string
   * keyed properties of `value` to own properties of the plain object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Object} Returns the converted plain object.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.assign({ 'a': 1 }, new Foo);
   * // => { 'a': 1, 'b': 2 }
   *
   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
   * // => { 'a': 1, 'b': 2, 'c': 3 }
   */
  function toPlainObject(value) {
    return copyObject(value, keysIn$1(value));
  }

  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object, key),
        srcValue = safeGet(source, key),
        stacked = stack.get(srcValue);

    if (stacked) {
      assignMergeValue(object, key, stacked);
      return;
    }
    var newValue = customizer
      ? customizer(objValue, srcValue, (key + ''), object, source, stack)
      : undefined;

    var isCommon = newValue === undefined;

    if (isCommon) {
      var isArr = isArray(srcValue),
          isBuff = !isArr && isBuffer(srcValue),
          isTyped = !isArr && !isBuff && isTypedArray(srcValue);

      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray(objValue)) {
          newValue = objValue;
        }
        else if (isArrayLikeObject(objValue)) {
          newValue = copyArray(objValue);
        }
        else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer(srcValue, true);
        }
        else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray(srcValue, true);
        }
        else {
          newValue = [];
        }
      }
      else if (isPlainObject(srcValue) || isArguments(srcValue)) {
        newValue = objValue;
        if (isArguments(objValue)) {
          newValue = toPlainObject(objValue);
        }
        else if (!isObject(objValue) || isFunction(objValue)) {
          newValue = initCloneObject(srcValue);
        }
      }
      else {
        isCommon = false;
      }
    }
    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack['delete'](srcValue);
    }
    assignMergeValue(object, key, newValue);
  }

  /**
   * The base implementation of `_.merge` without support for multiple sources.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    baseFor(source, function(srcValue, key) {
      stack || (stack = new Stack);
      if (isObject(srcValue)) {
        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
      }
      else {
        var newValue = customizer
          ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
          : undefined;

        if (newValue === undefined) {
          newValue = srcValue;
        }
        assignMergeValue(object, key, newValue);
      }
    }, keysIn$1);
  }

  /**
   * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
   * objects into destination objects that are passed thru.
   *
   * @private
   * @param {*} objValue The destination value.
   * @param {*} srcValue The source value.
   * @param {string} key The key of the property to merge.
   * @param {Object} object The parent object of `objValue`.
   * @param {Object} source The parent object of `srcValue`.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   * @returns {*} Returns the value to assign.
   */
  function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
    if (isObject(objValue) && isObject(srcValue)) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      stack.set(srcValue, objValue);
      baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
      stack['delete'](srcValue);
    }
    return objValue;
  }

  /**
   * This method is like `_.merge` except that it accepts `customizer` which
   * is invoked to produce the merged values of the destination and source
   * properties. If `customizer` returns `undefined`, merging is handled by the
   * method instead. The `customizer` is invoked with six arguments:
   * (objValue, srcValue, key, object, source, stack).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} customizer The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   if (_.isArray(objValue)) {
   *     return objValue.concat(srcValue);
   *   }
   * }
   *
   * var object = { 'a': [1], 'b': [2] };
   * var other = { 'a': [3], 'b': [4] };
   *
   * _.mergeWith(object, other, customizer);
   * // => { 'a': [1, 3], 'b': [2, 4] }
   */
  var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
    baseMerge(object, source, srcIndex, customizer);
  });

  /**
   * This method is like `_.defaults` except that it recursively assigns
   * default properties.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 3.10.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.defaults
   * @example
   *
   * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
   * // => { 'a': { 'b': 2, 'c': 3 } }
   */
  var defaultsDeep = baseRest(function(args) {
    args.push(undefined, customDefaultsMerge);
    return apply(mergeWith, undefined, args);
  });

  /** Error message constants. */
  var FUNC_ERROR_TEXT$6 = 'Expected a function';

  /**
   * The base implementation of `_.delay` and `_.defer` which accepts `args`
   * to provide to `func`.
   *
   * @private
   * @param {Function} func The function to delay.
   * @param {number} wait The number of milliseconds to delay invocation.
   * @param {Array} args The arguments to provide to `func`.
   * @returns {number|Object} Returns the timer id or timeout object.
   */
  function baseDelay(func, wait, args) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$6);
    }
    return setTimeout(function() { func.apply(undefined, args); }, wait);
  }

  /**
   * Defers invoking the `func` until the current call stack has cleared. Any
   * additional arguments are provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to defer.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {number} Returns the timer id.
   * @example
   *
   * _.defer(function(text) {
   *   console.log(text);
   * }, 'deferred');
   * // => Logs 'deferred' after one millisecond.
   */
  var defer = baseRest(function(func, args) {
    return baseDelay(func, 1, args);
  });

  /**
   * Invokes `func` after `wait` milliseconds. Any additional arguments are
   * provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to delay.
   * @param {number} wait The number of milliseconds to delay invocation.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {number} Returns the timer id.
   * @example
   *
   * _.delay(function(text) {
   *   console.log(text);
   * }, 1000, 'later');
   * // => Logs 'later' after one second.
   */
  var delay = baseRest(function(func, wait, args) {
    return baseDelay(func, toNumber(wait) || 0, args);
  });

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE$1 = 200;

  /**
   * The base implementation of methods like `_.difference` without support
   * for excluding multiple arrays or iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Array} values The values to exclude.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of filtered values.
   */
  function baseDifference(array, values, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        isCommon = true,
        length = array.length,
        result = [],
        valuesLength = values.length;

    if (!length) {
      return result;
    }
    if (iteratee) {
      values = arrayMap(values, baseUnary(iteratee));
    }
    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    }
    else if (values.length >= LARGE_ARRAY_SIZE$1) {
      includes = cacheHas;
      isCommon = false;
      values = new SetCache(values);
    }
    outer:
    while (++index < length) {
      var value = array[index],
          computed = iteratee == null ? value : iteratee(value);

      value = (comparator || value !== 0) ? value : 0;
      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;
        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }
        result.push(value);
      }
      else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }
    return result;
  }

  /**
   * Creates an array of `array` values not included in the other given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * **Note:** Unlike `_.pullAll`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...Array} [values] The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   * @see _.without, _.xor
   * @example
   *
   * _.difference([2, 1], [2, 3]);
   * // => [1]
   */
  var difference = baseRest(function(array, values) {
    return isArrayLikeObject(array)
      ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
      : [];
  });

  /**
   * Gets the last element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the last element of `array`.
   * @example
   *
   * _.last([1, 2, 3]);
   * // => 3
   */
  function last(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
  }

  /**
   * This method is like `_.difference` except that it accepts `iteratee` which
   * is invoked for each element of `array` and `values` to generate the criterion
   * by which they're compared. The order and references of result values are
   * determined by the first array. The iteratee is invoked with one argument:
   * (value).
   *
   * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...Array} [values] The values to exclude.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
   * // => [1.2]
   *
   * // The `_.property` iteratee shorthand.
   * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
   * // => [{ 'x': 2 }]
   */
  var differenceBy = baseRest(function(array, values) {
    var iteratee = last(values);
    if (isArrayLikeObject(iteratee)) {
      iteratee = undefined;
    }
    return isArrayLikeObject(array)
      ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2))
      : [];
  });

  /**
   * This method is like `_.difference` except that it accepts `comparator`
   * which is invoked to compare elements of `array` to `values`. The order and
   * references of result values are determined by the first array. The comparator
   * is invoked with two arguments: (arrVal, othVal).
   *
   * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...Array} [values] The values to exclude.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
   *
   * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
   * // => [{ 'x': 2, 'y': 1 }]
   */
  var differenceWith = baseRest(function(array, values) {
    var comparator = last(values);
    if (isArrayLikeObject(comparator)) {
      comparator = undefined;
    }
    return isArrayLikeObject(array)
      ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
      : [];
  });

  /**
   * Divide two numbers.
   *
   * @static
   * @memberOf _
   * @since 4.7.0
   * @category Math
   * @param {number} dividend The first number in a division.
   * @param {number} divisor The second number in a division.
   * @returns {number} Returns the quotient.
   * @example
   *
   * _.divide(6, 4);
   * // => 1.5
   */
  var divide = createMathOperation(function(dividend, divisor) {
    return dividend / divisor;
  }, 1);

  /**
   * Creates a slice of `array` with `n` elements dropped from the beginning.
   *
   * @static
   * @memberOf _
   * @since 0.5.0
   * @category Array
   * @param {Array} array The array to query.
   * @param {number} [n=1] The number of elements to drop.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.drop([1, 2, 3]);
   * // => [2, 3]
   *
   * _.drop([1, 2, 3], 2);
   * // => [3]
   *
   * _.drop([1, 2, 3], 5);
   * // => []
   *
   * _.drop([1, 2, 3], 0);
   * // => [1, 2, 3]
   */
  function drop(array, n, guard) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return [];
    }
    n = (guard || n === undefined) ? 1 : toInteger(n);
    return baseSlice(array, n < 0 ? 0 : n, length);
  }

  /**
   * Creates a slice of `array` with `n` elements dropped from the end.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to query.
   * @param {number} [n=1] The number of elements to drop.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.dropRight([1, 2, 3]);
   * // => [1, 2]
   *
   * _.dropRight([1, 2, 3], 2);
   * // => [1]
   *
   * _.dropRight([1, 2, 3], 5);
   * // => []
   *
   * _.dropRight([1, 2, 3], 0);
   * // => [1, 2, 3]
   */
  function dropRight(array, n, guard) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return [];
    }
    n = (guard || n === undefined) ? 1 : toInteger(n);
    n = length - n;
    return baseSlice(array, 0, n < 0 ? 0 : n);
  }

  /**
   * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
   * without support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to query.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseWhile(array, predicate, isDrop, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length) &&
      predicate(array[index], index, array)) {}

    return isDrop
      ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
      : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
  }

  /**
   * Creates a slice of `array` excluding elements dropped from the end.
   * Elements are dropped until `predicate` returns falsey. The predicate is
   * invoked with three arguments: (value, index, array).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to query.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': true },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': false }
   * ];
   *
   * _.dropRightWhile(users, function(o) { return !o.active; });
   * // => objects for ['barney']
   *
   * // The `_.matches` iteratee shorthand.
   * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
   * // => objects for ['barney', 'fred']
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.dropRightWhile(users, ['active', false]);
   * // => objects for ['barney']
   *
   * // The `_.property` iteratee shorthand.
   * _.dropRightWhile(users, 'active');
   * // => objects for ['barney', 'fred', 'pebbles']
   */
  function dropRightWhile(array, predicate) {
    return (array && array.length)
      ? baseWhile(array, baseIteratee(predicate, 3), true, true)
      : [];
  }

  /**
   * Creates a slice of `array` excluding elements dropped from the beginning.
   * Elements are dropped until `predicate` returns falsey. The predicate is
   * invoked with three arguments: (value, index, array).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to query.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * _.dropWhile(users, function(o) { return !o.active; });
   * // => objects for ['pebbles']
   *
   * // The `_.matches` iteratee shorthand.
   * _.dropWhile(users, { 'user': 'barney', 'active': false });
   * // => objects for ['fred', 'pebbles']
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.dropWhile(users, ['active', false]);
   * // => objects for ['pebbles']
   *
   * // The `_.property` iteratee shorthand.
   * _.dropWhile(users, 'active');
   * // => objects for ['barney', 'fred', 'pebbles']
   */
  function dropWhile(array, predicate) {
    return (array && array.length)
      ? baseWhile(array, baseIteratee(predicate, 3), true)
      : [];
  }

  /**
   * Casts `value` to `identity` if it's not a function.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Function} Returns cast function.
   */
  function castFunction(value) {
    return typeof value == 'function' ? value : identity;
  }

  /**
   * Iterates over elements of `collection` and invokes `iteratee` for each element.
   * The iteratee is invoked with three arguments: (value, index|key, collection).
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * **Note:** As with other "Collections" methods, objects with a "length"
   * property are iterated like arrays. To avoid this behavior use `_.forIn`
   * or `_.forOwn` for object iteration.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @alias each
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   * @see _.forEachRight
   * @example
   *
   * _.forEach([1, 2], function(value) {
   *   console.log(value);
   * });
   * // => Logs `1` then `2`.
   *
   * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
   *   console.log(key);
   * });
   * // => Logs 'a' then 'b' (iteration order is not guaranteed).
   */
  function forEach(collection, iteratee) {
    var func = isArray(collection) ? arrayEach : baseEach;
    return func(collection, castFunction(iteratee));
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * This function is like `baseFor` except that it iterates over properties
   * in the opposite order.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseForRight = createBaseFor(true);

  /**
   * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwnRight(object, iteratee) {
    return object && baseForRight(object, iteratee, keys);
  }

  /**
   * The base implementation of `_.forEachRight` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   */
  var baseEachRight = createBaseEach(baseForOwnRight, true);

  /**
   * This method is like `_.forEach` except that it iterates over elements of
   * `collection` from right to left.
   *
   * @static
   * @memberOf _
   * @since 2.0.0
   * @alias eachRight
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   * @see _.forEach
   * @example
   *
   * _.forEachRight([1, 2], function(value) {
   *   console.log(value);
   * });
   * // => Logs `2` then `1`.
   */
  function forEachRight(collection, iteratee) {
    var func = isArray(collection) ? arrayEachRight : baseEachRight;
    return func(collection, castFunction(iteratee));
  }

  /**
   * Checks if `string` ends with the given target string.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to inspect.
   * @param {string} [target] The string to search for.
   * @param {number} [position=string.length] The position to search up to.
   * @returns {boolean} Returns `true` if `string` ends with `target`,
   *  else `false`.
   * @example
   *
   * _.endsWith('abc', 'c');
   * // => true
   *
   * _.endsWith('abc', 'b');
   * // => false
   *
   * _.endsWith('abc', 'b', 2);
   * // => true
   */
  function endsWith(string, target, position) {
    string = toString(string);
    target = baseToString(target);

    var length = string.length;
    position = position === undefined
      ? length
      : baseClamp(toInteger(position), 0, length);

    var end = position;
    position -= target.length;
    return position >= 0 && string.slice(position, end) == target;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /** `Object#toString` result references. */
  var mapTag$6 = '[object Map]',
      setTag$6 = '[object Set]';

  /**
   * Creates a `_.toPairs` or `_.toPairsIn` function.
   *
   * @private
   * @param {Function} keysFunc The function to get the keys of a given object.
   * @returns {Function} Returns the new pairs function.
   */
  function createToPairs(keysFunc) {
    return function(object) {
      var tag = getTag$1(object);
      if (tag == mapTag$6) {
        return mapToArray(object);
      }
      if (tag == setTag$6) {
        return setToPairs(object);
      }
      return baseToPairs(object, keysFunc(object));
    };
  }

  /**
   * Creates an array of own enumerable string keyed-value pairs for `object`
   * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
   * entries are returned.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @alias entries
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the key-value pairs.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.toPairs(new Foo);
   * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
   */
  var toPairs = createToPairs(keys);

  /**
   * Creates an array of own and inherited enumerable string keyed-value pairs
   * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
   * or set, its entries are returned.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @alias entriesIn
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the key-value pairs.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.toPairsIn(new Foo);
   * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
   */
  var toPairsIn = createToPairs(keysIn$1);

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /** Used to match HTML entities and HTML characters. */
  var reUnescapedHtml = /[&<>"']/g,
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /**
   * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
   * corresponding HTML entities.
   *
   * **Note:** No other characters are escaped. To escape additional
   * characters use a third-party library like [_he_](https://mths.be/he).
   *
   * Though the ">" character is escaped for symmetry, characters like
   * ">" and "/" don't need escaping in HTML and have no special meaning
   * unless they're part of a tag or unquoted attribute value. See
   * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
   * (under "semi-related fun fact") for more details.
   *
   * When working with HTML you should always
   * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
   * XSS vectors.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to escape.
   * @returns {string} Returns the escaped string.
   * @example
   *
   * _.escape('fred, barney, & pebbles');
   * // => 'fred, barney, &amp; pebbles'
   */
  function escape(string) {
    string = toString(string);
    return (string && reHasUnescapedHtml.test(string))
      ? string.replace(reUnescapedHtml, escapeHtmlChar)
      : string;
  }

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar$1 = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar$1.source);

  /**
   * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
   * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to escape.
   * @returns {string} Returns the escaped string.
   * @example
   *
   * _.escapeRegExp('[lodash](https://lodash.com/)');
   * // => '\[lodash\]\(https://lodash\.com/\)'
   */
  function escapeRegExp(string) {
    string = toString(string);
    return (string && reHasRegExpChar.test(string))
      ? string.replace(reRegExpChar$1, '\\$&')
      : string;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * The base implementation of `_.every` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`
   */
  function baseEvery(collection, predicate) {
    var result = true;
    baseEach(collection, function(value, index, collection) {
      result = !!predicate(value, index, collection);
      return result;
    });
    return result;
  }

  /**
   * Checks if `predicate` returns truthy for **all** elements of `collection`.
   * Iteration is stopped once `predicate` returns falsey. The predicate is
   * invoked with three arguments: (value, index|key, collection).
   *
   * **Note:** This method returns `true` for
   * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
   * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
   * elements of empty collections.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   * @example
   *
   * _.every([true, 1, null, 'yes'], Boolean);
   * // => false
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': false },
   *   { 'user': 'fred',   'age': 40, 'active': false }
   * ];
   *
   * // The `_.matches` iteratee shorthand.
   * _.every(users, { 'user': 'barney', 'active': false });
   * // => false
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.every(users, ['active', false]);
   * // => true
   *
   * // The `_.property` iteratee shorthand.
   * _.every(users, 'active');
   * // => false
   */
  function every(collection, predicate, guard) {
    var func = isArray(collection) ? arrayEvery : baseEvery;
    if (guard && isIterateeCall(collection, predicate, guard)) {
      predicate = undefined;
    }
    return func(collection, baseIteratee(predicate, 3));
  }

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH$1 = 4294967295;

  /**
   * Converts `value` to an integer suitable for use as the length of an
   * array-like object.
   *
   * **Note:** This method is based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toLength(3.2);
   * // => 3
   *
   * _.toLength(Number.MIN_VALUE);
   * // => 0
   *
   * _.toLength(Infinity);
   * // => 4294967295
   *
   * _.toLength('3.2');
   * // => 3
   */
  function toLength(value) {
    return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH$1) : 0;
  }

  /**
   * The base implementation of `_.fill` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to fill.
   * @param {*} value The value to fill `array` with.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns `array`.
   */
  function baseFill(array, value, start, end) {
    var length = array.length;

    start = toInteger(start);
    if (start < 0) {
      start = -start > length ? 0 : (length + start);
    }
    end = (end === undefined || end > length) ? length : toInteger(end);
    if (end < 0) {
      end += length;
    }
    end = start > end ? 0 : toLength(end);
    while (start < end) {
      array[start++] = value;
    }
    return array;
  }

  /**
   * Fills elements of `array` with `value` from `start` up to, but not
   * including, `end`.
   *
   * **Note:** This method mutates `array`.
   *
   * @static
   * @memberOf _
   * @since 3.2.0
   * @category Array
   * @param {Array} array The array to fill.
   * @param {*} value The value to fill `array` with.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns `array`.
   * @example
   *
   * var array = [1, 2, 3];
   *
   * _.fill(array, 'a');
   * console.log(array);
   * // => ['a', 'a', 'a']
   *
   * _.fill(Array(3), 2);
   * // => [2, 2, 2]
   *
   * _.fill([4, 6, 8, 10], '*', 1, 3);
   * // => [4, '*', '*', 10]
   */
  function fill(array, value, start, end) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return [];
    }
    if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
      start = 0;
      end = length;
    }
    return baseFill(array, value, start, end);
  }

  /**
   * The base implementation of `_.filter` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function baseFilter(collection, predicate) {
    var result = [];
    baseEach(collection, function(value, index, collection) {
      if (predicate(value, index, collection)) {
        result.push(value);
      }
    });
    return result;
  }

  /**
   * Iterates over elements of `collection`, returning an array of all elements
   * `predicate` returns truthy for. The predicate is invoked with three
   * arguments: (value, index|key, collection).
   *
   * **Note:** Unlike `_.remove`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   * @see _.reject
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': true },
   *   { 'user': 'fred',   'age': 40, 'active': false }
   * ];
   *
   * _.filter(users, function(o) { return !o.active; });
   * // => objects for ['fred']
   *
   * // The `_.matches` iteratee shorthand.
   * _.filter(users, { 'age': 36, 'active': true });
   * // => objects for ['barney']
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.filter(users, ['active', false]);
   * // => objects for ['fred']
   *
   * // The `_.property` iteratee shorthand.
   * _.filter(users, 'active');
   * // => objects for ['barney']
   */
  function filter(collection, predicate) {
    var func = isArray(collection) ? arrayFilter : baseFilter;
    return func(collection, baseIteratee(predicate, 3));
  }

  /**
   * Creates a `_.find` or `_.findLast` function.
   *
   * @private
   * @param {Function} findIndexFunc The function to find the collection index.
   * @returns {Function} Returns the new find function.
   */
  function createFind(findIndexFunc) {
    return function(collection, predicate, fromIndex) {
      var iterable = Object(collection);
      if (!isArrayLike(collection)) {
        var iteratee = baseIteratee(predicate, 3);
        collection = keys(collection);
        predicate = function(key) { return iteratee(iterable[key], key, iterable); };
      }
      var index = findIndexFunc(collection, predicate, fromIndex);
      return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
    };
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$6 = Math.max;

  /**
   * This method is like `_.find` except that it returns the index of the first
   * element `predicate` returns truthy for instead of the element itself.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the found element, else `-1`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * _.findIndex(users, function(o) { return o.user == 'barney'; });
   * // => 0
   *
   * // The `_.matches` iteratee shorthand.
   * _.findIndex(users, { 'user': 'fred', 'active': false });
   * // => 1
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.findIndex(users, ['active', false]);
   * // => 0
   *
   * // The `_.property` iteratee shorthand.
   * _.findIndex(users, 'active');
   * // => 2
   */
  function findIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return -1;
    }
    var index = fromIndex == null ? 0 : toInteger(fromIndex);
    if (index < 0) {
      index = nativeMax$6(length + index, 0);
    }
    return baseFindIndex(array, baseIteratee(predicate, 3), index);
  }

  /**
   * Iterates over elements of `collection`, returning the first element
   * `predicate` returns truthy for. The predicate is invoked with three
   * arguments: (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {*} Returns the matched element, else `undefined`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'age': 36, 'active': true },
   *   { 'user': 'fred',    'age': 40, 'active': false },
   *   { 'user': 'pebbles', 'age': 1,  'active': true }
   * ];
   *
   * _.find(users, function(o) { return o.age < 40; });
   * // => object for 'barney'
   *
   * // The `_.matches` iteratee shorthand.
   * _.find(users, { 'age': 1, 'active': true });
   * // => object for 'pebbles'
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.find(users, ['active', false]);
   * // => object for 'fred'
   *
   * // The `_.property` iteratee shorthand.
   * _.find(users, 'active');
   * // => object for 'barney'
   */
  var find = createFind(findIndex);

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * This method is like `_.find` except that it returns the key of the first
   * element `predicate` returns truthy for instead of the element itself.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Object
   * @param {Object} object The object to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {string|undefined} Returns the key of the matched element,
   *  else `undefined`.
   * @example
   *
   * var users = {
   *   'barney':  { 'age': 36, 'active': true },
   *   'fred':    { 'age': 40, 'active': false },
   *   'pebbles': { 'age': 1,  'active': true }
   * };
   *
   * _.findKey(users, function(o) { return o.age < 40; });
   * // => 'barney' (iteration order is not guaranteed)
   *
   * // The `_.matches` iteratee shorthand.
   * _.findKey(users, { 'age': 1, 'active': true });
   * // => 'pebbles'
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.findKey(users, ['active', false]);
   * // => 'fred'
   *
   * // The `_.property` iteratee shorthand.
   * _.findKey(users, 'active');
   * // => 'barney'
   */
  function findKey(object, predicate) {
    return baseFindKey(object, baseIteratee(predicate, 3), baseForOwn);
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$7 = Math.max,
      nativeMin$4 = Math.min;

  /**
   * This method is like `_.findIndex` except that it iterates over elements
   * of `collection` from right to left.
   *
   * @static
   * @memberOf _
   * @since 2.0.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=array.length-1] The index to search from.
   * @returns {number} Returns the index of the found element, else `-1`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': true },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': false }
   * ];
   *
   * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
   * // => 2
   *
   * // The `_.matches` iteratee shorthand.
   * _.findLastIndex(users, { 'user': 'barney', 'active': true });
   * // => 0
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.findLastIndex(users, ['active', false]);
   * // => 2
   *
   * // The `_.property` iteratee shorthand.
   * _.findLastIndex(users, 'active');
   * // => 0
   */
  function findLastIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return -1;
    }
    var index = length - 1;
    if (fromIndex !== undefined) {
      index = toInteger(fromIndex);
      index = fromIndex < 0
        ? nativeMax$7(length + index, 0)
        : nativeMin$4(index, length - 1);
    }
    return baseFindIndex(array, baseIteratee(predicate, 3), index, true);
  }

  /**
   * This method is like `_.find` except that it iterates over elements of
   * `collection` from right to left.
   *
   * @static
   * @memberOf _
   * @since 2.0.0
   * @category Collection
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=collection.length-1] The index to search from.
   * @returns {*} Returns the matched element, else `undefined`.
   * @example
   *
   * _.findLast([1, 2, 3, 4], function(n) {
   *   return n % 2 == 1;
   * });
   * // => 3
   */
  var findLast = createFind(findLastIndex);

  /**
   * This method is like `_.findKey` except that it iterates over elements of
   * a collection in the opposite order.
   *
   * @static
   * @memberOf _
   * @since 2.0.0
   * @category Object
   * @param {Object} object The object to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {string|undefined} Returns the key of the matched element,
   *  else `undefined`.
   * @example
   *
   * var users = {
   *   'barney':  { 'age': 36, 'active': true },
   *   'fred':    { 'age': 40, 'active': false },
   *   'pebbles': { 'age': 1,  'active': true }
   * };
   *
   * _.findLastKey(users, function(o) { return o.age < 40; });
   * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
   *
   * // The `_.matches` iteratee shorthand.
   * _.findLastKey(users, { 'age': 36, 'active': true });
   * // => 'barney'
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.findLastKey(users, ['active', false]);
   * // => 'fred'
   *
   * // The `_.property` iteratee shorthand.
   * _.findLastKey(users, 'active');
   * // => 'pebbles'
   */
  function findLastKey(object, predicate) {
    return baseFindKey(object, baseIteratee(predicate, 3), baseForOwnRight);
  }

  /**
   * Gets the first element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @alias first
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the first element of `array`.
   * @example
   *
   * _.head([1, 2, 3]);
   * // => 1
   *
   * _.head([]);
   * // => undefined
   */
  function head(array) {
    return (array && array.length) ? array[0] : undefined;
  }

  /**
   * The base implementation of `_.map` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function baseMap(collection, iteratee) {
    var index = -1,
        result = isArrayLike(collection) ? Array(collection.length) : [];

    baseEach(collection, function(value, key, collection) {
      result[++index] = iteratee(value, key, collection);
    });
    return result;
  }

  /**
   * Creates an array of values by running each element in `collection` thru
   * `iteratee`. The iteratee is invoked with three arguments:
   * (value, index|key, collection).
   *
   * Many lodash methods are guarded to work as iteratees for methods like
   * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
   *
   * The guarded methods are:
   * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
   * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
   * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
   * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * _.map([4, 8], square);
   * // => [16, 64]
   *
   * _.map({ 'a': 4, 'b': 8 }, square);
   * // => [16, 64] (iteration order is not guaranteed)
   *
   * var users = [
   *   { 'user': 'barney' },
   *   { 'user': 'fred' }
   * ];
   *
   * // The `_.property` iteratee shorthand.
   * _.map(users, 'user');
   * // => ['barney', 'fred']
   */
  function map(collection, iteratee) {
    var func = isArray(collection) ? arrayMap : baseMap;
    return func(collection, baseIteratee(iteratee, 3));
  }

  /**
   * Creates a flattened array of values by running each element in `collection`
   * thru `iteratee` and flattening the mapped results. The iteratee is invoked
   * with three arguments: (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * function duplicate(n) {
   *   return [n, n];
   * }
   *
   * _.flatMap([1, 2], duplicate);
   * // => [1, 1, 2, 2]
   */
  function flatMap(collection, iteratee) {
    return baseFlatten(map(collection, iteratee), 1);
  }

  /** Used as references for various `Number` constants. */
  var INFINITY$3 = 1 / 0;

  /**
   * This method is like `_.flatMap` except that it recursively flattens the
   * mapped results.
   *
   * @static
   * @memberOf _
   * @since 4.7.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * function duplicate(n) {
   *   return [[[n, n]]];
   * }
   *
   * _.flatMapDeep([1, 2], duplicate);
   * // => [1, 1, 2, 2]
   */
  function flatMapDeep(collection, iteratee) {
    return baseFlatten(map(collection, iteratee), INFINITY$3);
  }

  /**
   * This method is like `_.flatMap` except that it recursively flattens the
   * mapped results up to `depth` times.
   *
   * @static
   * @memberOf _
   * @since 4.7.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {number} [depth=1] The maximum recursion depth.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * function duplicate(n) {
   *   return [[[n, n]]];
   * }
   *
   * _.flatMapDepth([1, 2], duplicate, 2);
   * // => [[1, 1], [2, 2]]
   */
  function flatMapDepth(collection, iteratee, depth) {
    depth = depth === undefined ? 1 : toInteger(depth);
    return baseFlatten(map(collection, iteratee), depth);
  }

  /** Used as references for various `Number` constants. */
  var INFINITY$4 = 1 / 0;

  /**
   * Recursively flattens `array`.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flattenDeep([1, [2, [3, [4]], 5]]);
   * // => [1, 2, 3, 4, 5]
   */
  function flattenDeep(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, INFINITY$4) : [];
  }

  /**
   * Recursively flatten `array` up to `depth` times.
   *
   * @static
   * @memberOf _
   * @since 4.4.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @param {number} [depth=1] The maximum recursion depth.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * var array = [1, [2, [3, [4]], 5]];
   *
   * _.flattenDepth(array, 1);
   * // => [1, 2, [3, [4]], 5]
   *
   * _.flattenDepth(array, 2);
   * // => [1, 2, 3, [4], 5]
   */
  function flattenDepth(array, depth) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return [];
    }
    depth = depth === undefined ? 1 : toInteger(depth);
    return baseFlatten(array, depth);
  }

  /** Used to compose bitmasks for function metadata. */
  var WRAP_FLIP_FLAG$2 = 512;

  /**
   * Creates a function that invokes `func` with arguments reversed.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Function
   * @param {Function} func The function to flip arguments for.
   * @returns {Function} Returns the new flipped function.
   * @example
   *
   * var flipped = _.flip(function() {
   *   return _.toArray(arguments);
   * });
   *
   * flipped('a', 'b', 'c', 'd');
   * // => ['d', 'c', 'b', 'a']
   */
  function flip(func) {
    return createWrap(func, WRAP_FLIP_FLAG$2);
  }

  /**
   * Computes `number` rounded down to `precision`.
   *
   * @static
   * @memberOf _
   * @since 3.10.0
   * @category Math
   * @param {number} number The number to round down.
   * @param {number} [precision=0] The precision to round down to.
   * @returns {number} Returns the rounded down number.
   * @example
   *
   * _.floor(4.006);
   * // => 4
   *
   * _.floor(0.046, 2);
   * // => 0.04
   *
   * _.floor(4060, -2);
   * // => 4000
   */
  var floor = createRound('floor');

  /** Error message constants. */
  var FUNC_ERROR_TEXT$7 = 'Expected a function';

  /** Used to compose bitmasks for function metadata. */
  var WRAP_CURRY_FLAG$6 = 8,
      WRAP_PARTIAL_FLAG$5 = 32,
      WRAP_ARY_FLAG$4 = 128,
      WRAP_REARG_FLAG$2 = 256;

  /**
   * Creates a `_.flow` or `_.flowRight` function.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new flow function.
   */
  function createFlow(fromRight) {
    return flatRest(function(funcs) {
      var length = funcs.length,
          index = length,
          prereq = LodashWrapper.prototype.thru;

      if (fromRight) {
        funcs.reverse();
      }
      while (index--) {
        var func = funcs[index];
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT$7);
        }
        if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
          var wrapper = new LodashWrapper([], true);
        }
      }
      index = wrapper ? index : length;
      while (++index < length) {
        func = funcs[index];

        var funcName = getFuncName(func),
            data = funcName == 'wrapper' ? getData(func) : undefined;

        if (data && isLaziable(data[0]) &&
              data[1] == (WRAP_ARY_FLAG$4 | WRAP_CURRY_FLAG$6 | WRAP_PARTIAL_FLAG$5 | WRAP_REARG_FLAG$2) &&
              !data[4].length && data[9] == 1
            ) {
          wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
        } else {
          wrapper = (func.length == 1 && isLaziable(func))
            ? wrapper[funcName]()
            : wrapper.thru(func);
        }
      }
      return function() {
        var args = arguments,
            value = args[0];

        if (wrapper && args.length == 1 && isArray(value)) {
          return wrapper.plant(value).value();
        }
        var index = 0,
            result = length ? funcs[index].apply(this, args) : value;

        while (++index < length) {
          result = funcs[index].call(this, result);
        }
        return result;
      };
    });
  }

  /**
   * Creates a function that returns the result of invoking the given functions
   * with the `this` binding of the created function, where each successive
   * invocation is supplied the return value of the previous.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Util
   * @param {...(Function|Function[])} [funcs] The functions to invoke.
   * @returns {Function} Returns the new composite function.
   * @see _.flowRight
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * var addSquare = _.flow([_.add, square]);
   * addSquare(1, 2);
   * // => 9
   */
  var flow = createFlow();

  /**
   * This method is like `_.flow` except that it creates a function that
   * invokes the given functions from right to left.
   *
   * @static
   * @since 3.0.0
   * @memberOf _
   * @category Util
   * @param {...(Function|Function[])} [funcs] The functions to invoke.
   * @returns {Function} Returns the new composite function.
   * @see _.flow
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * var addSquare = _.flowRight([square, _.add]);
   * addSquare(1, 2);
   * // => 9
   */
  var flowRight = createFlow(true);

  /**
   * Iterates over own and inherited enumerable string keyed properties of an
   * object and invokes `iteratee` for each property. The iteratee is invoked
   * with three arguments: (value, key, object). Iteratee functions may exit
   * iteration early by explicitly returning `false`.
   *
   * @static
   * @memberOf _
   * @since 0.3.0
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Object} Returns `object`.
   * @see _.forInRight
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.forIn(new Foo, function(value, key) {
   *   console.log(key);
   * });
   * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
   */
  function forIn(object, iteratee) {
    return object == null
      ? object
      : baseFor(object, castFunction(iteratee), keysIn$1);
  }

  /**
   * This method is like `_.forIn` except that it iterates over properties of
   * `object` in the opposite order.
   *
   * @static
   * @memberOf _
   * @since 2.0.0
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Object} Returns `object`.
   * @see _.forIn
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.forInRight(new Foo, function(value, key) {
   *   console.log(key);
   * });
   * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
   */
  function forInRight(object, iteratee) {
    return object == null
      ? object
      : baseForRight(object, castFunction(iteratee), keysIn$1);
  }

  /**
   * Iterates over own enumerable string keyed properties of an object and
   * invokes `iteratee` for each property. The iteratee is invoked with three
   * arguments: (value, key, object). Iteratee functions may exit iteration
   * early by explicitly returning `false`.
   *
   * @static
   * @memberOf _
   * @since 0.3.0
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Object} Returns `object`.
   * @see _.forOwnRight
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.forOwn(new Foo, function(value, key) {
   *   console.log(key);
   * });
   * // => Logs 'a' then 'b' (iteration order is not guaranteed).
   */
  function forOwn(object, iteratee) {
    return object && baseForOwn(object, castFunction(iteratee));
  }

  /**
   * This method is like `_.forOwn` except that it iterates over properties of
   * `object` in the opposite order.
   *
   * @static
   * @memberOf _
   * @since 2.0.0
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Object} Returns `object`.
   * @see _.forOwn
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.forOwnRight(new Foo, function(value, key) {
   *   console.log(key);
   * });
   * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
   */
  function forOwnRight(object, iteratee) {
    return object && baseForOwnRight(object, castFunction(iteratee));
  }

  /**
   * The inverse of `_.toPairs`; this method returns an object composed
   * from key-value `pairs`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} pairs The key-value pairs.
   * @returns {Object} Returns the new object.
   * @example
   *
   * _.fromPairs([['a', 1], ['b', 2]]);
   * // => { 'a': 1, 'b': 2 }
   */
  function fromPairs(pairs) {
    var index = -1,
        length = pairs == null ? 0 : pairs.length,
        result = {};

    while (++index < length) {
      var pair = pairs[index];
      result[pair[0]] = pair[1];
    }
    return result;
  }

  /**
   * The base implementation of `_.functions` which creates an array of
   * `object` function property names filtered from `props`.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Array} props The property names to filter.
   * @returns {Array} Returns the function names.
   */
  function baseFunctions(object, props) {
    return arrayFilter(props, function(key) {
      return isFunction(object[key]);
    });
  }

  /**
   * Creates an array of function property names from own enumerable properties
   * of `object`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to inspect.
   * @returns {Array} Returns the function names.
   * @see _.functionsIn
   * @example
   *
   * function Foo() {
   *   this.a = _.constant('a');
   *   this.b = _.constant('b');
   * }
   *
   * Foo.prototype.c = _.constant('c');
   *
   * _.functions(new Foo);
   * // => ['a', 'b']
   */
  function functions(object) {
    return object == null ? [] : baseFunctions(object, keys(object));
  }

  /**
   * Creates an array of function property names from own and inherited
   * enumerable properties of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to inspect.
   * @returns {Array} Returns the function names.
   * @see _.functions
   * @example
   *
   * function Foo() {
   *   this.a = _.constant('a');
   *   this.b = _.constant('b');
   * }
   *
   * Foo.prototype.c = _.constant('c');
   *
   * _.functionsIn(new Foo);
   * // => ['a', 'b', 'c']
   */
  function functionsIn(object) {
    return object == null ? [] : baseFunctions(object, keysIn$1(object));
  }

  /** Used for built-in method references. */
  var objectProto$l = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$i = objectProto$l.hasOwnProperty;

  /**
   * Creates an object composed of keys generated from the results of running
   * each element of `collection` thru `iteratee`. The order of grouped values
   * is determined by the order they occur in `collection`. The corresponding
   * value of each key is an array of elements responsible for generating the
   * key. The iteratee is invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
   * @returns {Object} Returns the composed aggregate object.
   * @example
   *
   * _.groupBy([6.1, 4.2, 6.3], Math.floor);
   * // => { '4': [4.2], '6': [6.1, 6.3] }
   *
   * // The `_.property` iteratee shorthand.
   * _.groupBy(['one', 'two', 'three'], 'length');
   * // => { '3': ['one', 'two'], '5': ['three'] }
   */
  var groupBy = createAggregator(function(result, value, key) {
    if (hasOwnProperty$i.call(result, key)) {
      result[key].push(value);
    } else {
      baseAssignValue(result, key, [value]);
    }
  });

  /**
   * The base implementation of `_.gt` which doesn't coerce arguments.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is greater than `other`,
   *  else `false`.
   */
  function baseGt(value, other) {
    return value > other;
  }

  /**
   * Creates a function that performs a relational operation on two values.
   *
   * @private
   * @param {Function} operator The function to perform the operation.
   * @returns {Function} Returns the new relational operation function.
   */
  function createRelationalOperation(operator) {
    return function(value, other) {
      if (!(typeof value == 'string' && typeof other == 'string')) {
        value = toNumber(value);
        other = toNumber(other);
      }
      return operator(value, other);
    };
  }

  /**
   * Checks if `value` is greater than `other`.
   *
   * @static
   * @memberOf _
   * @since 3.9.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is greater than `other`,
   *  else `false`.
   * @see _.lt
   * @example
   *
   * _.gt(3, 1);
   * // => true
   *
   * _.gt(3, 3);
   * // => false
   *
   * _.gt(1, 3);
   * // => false
   */
  var gt = createRelationalOperation(baseGt);

  /**
   * Checks if `value` is greater than or equal to `other`.
   *
   * @static
   * @memberOf _
   * @since 3.9.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is greater than or equal to
   *  `other`, else `false`.
   * @see _.lte
   * @example
   *
   * _.gte(3, 1);
   * // => true
   *
   * _.gte(3, 3);
   * // => true
   *
   * _.gte(1, 3);
   * // => false
   */
  var gte = createRelationalOperation(function(value, other) {
    return value >= other;
  });

  /** Used for built-in method references. */
  var objectProto$m = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$j = objectProto$m.hasOwnProperty;

  /**
   * The base implementation of `_.has` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHas(object, key) {
    return object != null && hasOwnProperty$j.call(object, key);
  }

  /**
   * Checks if `path` is a direct property of `object`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = { 'a': { 'b': 2 } };
   * var other = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.has(object, 'a');
   * // => true
   *
   * _.has(object, 'a.b');
   * // => true
   *
   * _.has(object, ['a', 'b']);
   * // => true
   *
   * _.has(other, 'a');
   * // => false
   */
  function has(object, path) {
    return object != null && hasPath(object, path, baseHas);
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$8 = Math.max,
      nativeMin$5 = Math.min;

  /**
   * The base implementation of `_.inRange` which doesn't coerce arguments.
   *
   * @private
   * @param {number} number The number to check.
   * @param {number} start The start of the range.
   * @param {number} end The end of the range.
   * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
   */
  function baseInRange(number, start, end) {
    return number >= nativeMin$5(start, end) && number < nativeMax$8(start, end);
  }

  /**
   * Checks if `n` is between `start` and up to, but not including, `end`. If
   * `end` is not specified, it's set to `start` with `start` then set to `0`.
   * If `start` is greater than `end` the params are swapped to support
   * negative ranges.
   *
   * @static
   * @memberOf _
   * @since 3.3.0
   * @category Number
   * @param {number} number The number to check.
   * @param {number} [start=0] The start of the range.
   * @param {number} end The end of the range.
   * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
   * @see _.range, _.rangeRight
   * @example
   *
   * _.inRange(3, 2, 4);
   * // => true
   *
   * _.inRange(4, 8);
   * // => true
   *
   * _.inRange(4, 2);
   * // => false
   *
   * _.inRange(2, 2);
   * // => false
   *
   * _.inRange(1.2, 2);
   * // => true
   *
   * _.inRange(5.2, 4);
   * // => false
   *
   * _.inRange(-3, -2, -6);
   * // => true
   */
  function inRange(number, start, end) {
    start = toFinite(start);
    if (end === undefined) {
      end = start;
      start = 0;
    } else {
      end = toFinite(end);
    }
    number = toNumber(number);
    return baseInRange(number, start, end);
  }

  /** `Object#toString` result references. */
  var stringTag$4 = '[object String]';

  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a string, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */
  function isString(value) {
    return typeof value == 'string' ||
      (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag$4);
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Creates an array of the own enumerable string keyed property values of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property values.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.values(new Foo);
   * // => [1, 2] (iteration order is not guaranteed)
   *
   * _.values('hi');
   * // => ['h', 'i']
   */
  function values(object) {
    return object == null ? [] : baseValues(object, keys(object));
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$9 = Math.max;

  /**
   * Checks if `value` is in `collection`. If `collection` is a string, it's
   * checked for a substring of `value`, otherwise
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * is used for equality comparisons. If `fromIndex` is negative, it's used as
   * the offset from the end of `collection`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object|string} collection The collection to inspect.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
   * @returns {boolean} Returns `true` if `value` is found, else `false`.
   * @example
   *
   * _.includes([1, 2, 3], 1);
   * // => true
   *
   * _.includes([1, 2, 3], 1, 2);
   * // => false
   *
   * _.includes({ 'a': 1, 'b': 2 }, 1);
   * // => true
   *
   * _.includes('abcd', 'bc');
   * // => true
   */
  function includes(collection, value, fromIndex, guard) {
    collection = isArrayLike(collection) ? collection : values(collection);
    fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

    var length = collection.length;
    if (fromIndex < 0) {
      fromIndex = nativeMax$9(length + fromIndex, 0);
    }
    return isString(collection)
      ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
      : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$a = Math.max;

  /**
   * Gets the index at which the first occurrence of `value` is found in `array`
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. If `fromIndex` is negative, it's used as the
   * offset from the end of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   * @example
   *
   * _.indexOf([1, 2, 1, 2], 2);
   * // => 1
   *
   * // Search from the `fromIndex`.
   * _.indexOf([1, 2, 1, 2], 2, 2);
   * // => 3
   */
  function indexOf(array, value, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return -1;
    }
    var index = fromIndex == null ? 0 : toInteger(fromIndex);
    if (index < 0) {
      index = nativeMax$a(length + index, 0);
    }
    return baseIndexOf(array, value, index);
  }

  /**
   * Gets all but the last element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to query.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.initial([1, 2, 3]);
   * // => [1, 2]
   */
  function initial(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseSlice(array, 0, -1) : [];
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMin$6 = Math.min;

  /**
   * The base implementation of methods like `_.intersection`, without support
   * for iteratee shorthands, that accepts an array of arrays to inspect.
   *
   * @private
   * @param {Array} arrays The arrays to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of shared values.
   */
  function baseIntersection(arrays, iteratee, comparator) {
    var includes = comparator ? arrayIncludesWith : arrayIncludes,
        length = arrays[0].length,
        othLength = arrays.length,
        othIndex = othLength,
        caches = Array(othLength),
        maxLength = Infinity,
        result = [];

    while (othIndex--) {
      var array = arrays[othIndex];
      if (othIndex && iteratee) {
        array = arrayMap(array, baseUnary(iteratee));
      }
      maxLength = nativeMin$6(array.length, maxLength);
      caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
        ? new SetCache(othIndex && array)
        : undefined;
    }
    array = arrays[0];

    var index = -1,
        seen = caches[0];

    outer:
    while (++index < length && result.length < maxLength) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;

      value = (comparator || value !== 0) ? value : 0;
      if (!(seen
            ? cacheHas(seen, computed)
            : includes(result, computed, comparator)
          )) {
        othIndex = othLength;
        while (--othIndex) {
          var cache = caches[othIndex];
          if (!(cache
                ? cacheHas(cache, computed)
                : includes(arrays[othIndex], computed, comparator))
              ) {
            continue outer;
          }
        }
        if (seen) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
    return result;
  }

  /**
   * Casts `value` to an empty array if it's not an array like object.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Array|Object} Returns the cast array-like object.
   */
  function castArrayLikeObject(value) {
    return isArrayLikeObject(value) ? value : [];
  }

  /**
   * Creates an array of unique values that are included in all given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @returns {Array} Returns the new array of intersecting values.
   * @example
   *
   * _.intersection([2, 1], [2, 3]);
   * // => [2]
   */
  var intersection = baseRest(function(arrays) {
    var mapped = arrayMap(arrays, castArrayLikeObject);
    return (mapped.length && mapped[0] === arrays[0])
      ? baseIntersection(mapped)
      : [];
  });

  /**
   * This method is like `_.intersection` except that it accepts `iteratee`
   * which is invoked for each element of each `arrays` to generate the criterion
   * by which they're compared. The order and references of result values are
   * determined by the first array. The iteratee is invoked with one argument:
   * (value).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {Array} Returns the new array of intersecting values.
   * @example
   *
   * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
   * // => [2.1]
   *
   * // The `_.property` iteratee shorthand.
   * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
   * // => [{ 'x': 1 }]
   */
  var intersectionBy = baseRest(function(arrays) {
    var iteratee = last(arrays),
        mapped = arrayMap(arrays, castArrayLikeObject);

    if (iteratee === last(mapped)) {
      iteratee = undefined;
    } else {
      mapped.pop();
    }
    return (mapped.length && mapped[0] === arrays[0])
      ? baseIntersection(mapped, baseIteratee(iteratee, 2))
      : [];
  });

  /**
   * This method is like `_.intersection` except that it accepts `comparator`
   * which is invoked to compare elements of `arrays`. The order and references
   * of result values are determined by the first array. The comparator is
   * invoked with two arguments: (arrVal, othVal).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of intersecting values.
   * @example
   *
   * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
   * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
   *
   * _.intersectionWith(objects, others, _.isEqual);
   * // => [{ 'x': 1, 'y': 2 }]
   */
  var intersectionWith = baseRest(function(arrays) {
    var comparator = last(arrays),
        mapped = arrayMap(arrays, castArrayLikeObject);

    comparator = typeof comparator == 'function' ? comparator : undefined;
    if (comparator) {
      mapped.pop();
    }
    return (mapped.length && mapped[0] === arrays[0])
      ? baseIntersection(mapped, undefined, comparator)
      : [];
  });

  /**
   * The base implementation of `_.invert` and `_.invertBy` which inverts
   * `object` with values transformed by `iteratee` and set by `setter`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform values.
   * @param {Object} accumulator The initial inverted object.
   * @returns {Function} Returns `accumulator`.
   */
  function baseInverter(object, setter, iteratee, accumulator) {
    baseForOwn(object, function(value, key, object) {
      setter(accumulator, iteratee(value), key, object);
    });
    return accumulator;
  }

  /**
   * Creates a function like `_.invertBy`.
   *
   * @private
   * @param {Function} setter The function to set accumulator values.
   * @param {Function} toIteratee The function to resolve iteratees.
   * @returns {Function} Returns the new inverter function.
   */
  function createInverter(setter, toIteratee) {
    return function(object, iteratee) {
      return baseInverter(object, setter, toIteratee(iteratee), {});
    };
  }

  /** Used for built-in method references. */
  var objectProto$n = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$2 = objectProto$n.toString;

  /**
   * Creates an object composed of the inverted keys and values of `object`.
   * If `object` contains duplicate values, subsequent values overwrite
   * property assignments of previous values.
   *
   * @static
   * @memberOf _
   * @since 0.7.0
   * @category Object
   * @param {Object} object The object to invert.
   * @returns {Object} Returns the new inverted object.
   * @example
   *
   * var object = { 'a': 1, 'b': 2, 'c': 1 };
   *
   * _.invert(object);
   * // => { '1': 'c', '2': 'b' }
   */
  var invert = createInverter(function(result, value, key) {
    if (value != null &&
        typeof value.toString != 'function') {
      value = nativeObjectToString$2.call(value);
    }

    result[value] = key;
  }, constant(identity));

  /** Used for built-in method references. */
  var objectProto$o = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$k = objectProto$o.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$3 = objectProto$o.toString;

  /**
   * This method is like `_.invert` except that the inverted object is generated
   * from the results of running each element of `object` thru `iteratee`. The
   * corresponding inverted value of each inverted key is an array of keys
   * responsible for generating the inverted value. The iteratee is invoked
   * with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 4.1.0
   * @category Object
   * @param {Object} object The object to invert.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {Object} Returns the new inverted object.
   * @example
   *
   * var object = { 'a': 1, 'b': 2, 'c': 1 };
   *
   * _.invertBy(object);
   * // => { '1': ['a', 'c'], '2': ['b'] }
   *
   * _.invertBy(object, function(value) {
   *   return 'group' + value;
   * });
   * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
   */
  var invertBy = createInverter(function(result, value, key) {
    if (value != null &&
        typeof value.toString != 'function') {
      value = nativeObjectToString$3.call(value);
    }

    if (hasOwnProperty$k.call(result, value)) {
      result[value].push(key);
    } else {
      result[value] = [key];
    }
  }, baseIteratee);

  /**
   * Gets the parent value at `path` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} path The path to get the parent value of.
   * @returns {*} Returns the parent value.
   */
  function parent(object, path) {
    return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
  }

  /**
   * The base implementation of `_.invoke` without support for individual
   * method arguments.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the method to invoke.
   * @param {Array} args The arguments to invoke the method with.
   * @returns {*} Returns the result of the invoked method.
   */
  function baseInvoke(object, path, args) {
    path = castPath(path, object);
    object = parent(object, path);
    var func = object == null ? object : object[toKey(last(path))];
    return func == null ? undefined : apply(func, object, args);
  }

  /**
   * Invokes the method at `path` of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the method to invoke.
   * @param {...*} [args] The arguments to invoke the method with.
   * @returns {*} Returns the result of the invoked method.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
   *
   * _.invoke(object, 'a[0].b.c.slice', 1, 3);
   * // => [2, 3]
   */
  var invoke = baseRest(baseInvoke);

  /**
   * Invokes the method at `path` of each element in `collection`, returning
   * an array of the results of each invoked method. Any additional arguments
   * are provided to each invoked method. If `path` is a function, it's invoked
   * for, and `this` bound to, each element in `collection`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Array|Function|string} path The path of the method to invoke or
   *  the function invoked per iteration.
   * @param {...*} [args] The arguments to invoke each method with.
   * @returns {Array} Returns the array of results.
   * @example
   *
   * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
   * // => [[1, 5, 7], [1, 2, 3]]
   *
   * _.invokeMap([123, 456], String.prototype.split, '');
   * // => [['1', '2', '3'], ['4', '5', '6']]
   */
  var invokeMap = baseRest(function(collection, path, args) {
    var index = -1,
        isFunc = typeof path == 'function',
        result = isArrayLike(collection) ? Array(collection.length) : [];

    baseEach(collection, function(value) {
      result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
    });
    return result;
  });

  var arrayBufferTag$4 = '[object ArrayBuffer]';

  /**
   * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
   */
  function baseIsArrayBuffer(value) {
    return isObjectLike(value) && baseGetTag(value) == arrayBufferTag$4;
  }

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer;

  /**
   * Checks if `value` is classified as an `ArrayBuffer` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
   * @example
   *
   * _.isArrayBuffer(new ArrayBuffer(2));
   * // => true
   *
   * _.isArrayBuffer(new Array(2));
   * // => false
   */
  var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

  /** `Object#toString` result references. */
  var boolTag$4 = '[object Boolean]';

  /**
   * Checks if `value` is classified as a boolean primitive or object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
   * @example
   *
   * _.isBoolean(false);
   * // => true
   *
   * _.isBoolean(null);
   * // => false
   */
  function isBoolean(value) {
    return value === true || value === false ||
      (isObjectLike(value) && baseGetTag(value) == boolTag$4);
  }

  /** `Object#toString` result references. */
  var dateTag$4 = '[object Date]';

  /**
   * The base implementation of `_.isDate` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
   */
  function baseIsDate(value) {
    return isObjectLike(value) && baseGetTag(value) == dateTag$4;
  }

  /* Node.js helper references. */
  var nodeIsDate = nodeUtil && nodeUtil.isDate;

  /**
   * Checks if `value` is classified as a `Date` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
   * @example
   *
   * _.isDate(new Date);
   * // => true
   *
   * _.isDate('Mon April 23 2012');
   * // => false
   */
  var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

  /**
   * Checks if `value` is likely a DOM element.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
   * @example
   *
   * _.isElement(document.body);
   * // => true
   *
   * _.isElement('<body>');
   * // => false
   */
  function isElement(value) {
    return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
  }

  /** `Object#toString` result references. */
  var mapTag$7 = '[object Map]',
      setTag$7 = '[object Set]';

  /** Used for built-in method references. */
  var objectProto$p = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$l = objectProto$p.hasOwnProperty;

  /**
   * Checks if `value` is an empty object, collection, map, or set.
   *
   * Objects are considered empty if they have no own enumerable string keyed
   * properties.
   *
   * Array-like values such as `arguments` objects, arrays, buffers, strings, or
   * jQuery-like collections are considered empty if they have a `length` of `0`.
   * Similarly, maps and sets are considered empty if they have a `size` of `0`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty(null);
   * // => true
   *
   * _.isEmpty(true);
   * // => true
   *
   * _.isEmpty(1);
   * // => true
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({ 'a': 1 });
   * // => false
   */
  function isEmpty(value) {
    if (value == null) {
      return true;
    }
    if (isArrayLike(value) &&
        (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
          isBuffer(value) || isTypedArray(value) || isArguments(value))) {
      return !value.length;
    }
    var tag = getTag$1(value);
    if (tag == mapTag$7 || tag == setTag$7) {
      return !value.size;
    }
    if (isPrototype(value)) {
      return !baseKeys(value).length;
    }
    for (var key in value) {
      if (hasOwnProperty$l.call(value, key)) {
        return false;
      }
    }
    return true;
  }

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent.
   *
   * **Note:** This method supports comparing arrays, array buffers, booleans,
   * date objects, error objects, maps, numbers, `Object` objects, regexes,
   * sets, strings, symbols, and typed arrays. `Object` objects are compared
   * by their own, not inherited, enumerable properties. Functions and DOM
   * nodes are compared by strict equality, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.isEqual(object, other);
   * // => true
   *
   * object === other;
   * // => false
   */
  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }

  /**
   * This method is like `_.isEqual` except that it accepts `customizer` which
   * is invoked to compare values. If `customizer` returns `undefined`, comparisons
   * are handled by the method instead. The `customizer` is invoked with up to
   * six arguments: (objValue, othValue [, index|key, object, other, stack]).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * function isGreeting(value) {
   *   return /^h(?:i|ello)$/.test(value);
   * }
   *
   * function customizer(objValue, othValue) {
   *   if (isGreeting(objValue) && isGreeting(othValue)) {
   *     return true;
   *   }
   * }
   *
   * var array = ['hello', 'goodbye'];
   * var other = ['hi', 'goodbye'];
   *
   * _.isEqualWith(array, other, customizer);
   * // => true
   */
  function isEqualWith(value, other, customizer) {
    customizer = typeof customizer == 'function' ? customizer : undefined;
    var result = customizer ? customizer(value, other) : undefined;
    return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsFinite$1 = root.isFinite;

  /**
   * Checks if `value` is a finite primitive number.
   *
   * **Note:** This method is based on
   * [`Number.isFinite`](https://mdn.io/Number/isFinite).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
   * @example
   *
   * _.isFinite(3);
   * // => true
   *
   * _.isFinite(Number.MIN_VALUE);
   * // => true
   *
   * _.isFinite(Infinity);
   * // => false
   *
   * _.isFinite('3');
   * // => false
   */
  function isFinite$1(value) {
    return typeof value == 'number' && nativeIsFinite$1(value);
  }

  /**
   * Checks if `value` is an integer.
   *
   * **Note:** This method is based on
   * [`Number.isInteger`](https://mdn.io/Number/isInteger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
   * @example
   *
   * _.isInteger(3);
   * // => true
   *
   * _.isInteger(Number.MIN_VALUE);
   * // => false
   *
   * _.isInteger(Infinity);
   * // => false
   *
   * _.isInteger('3');
   * // => false
   */
  function isInteger(value) {
    return typeof value == 'number' && value == toInteger(value);
  }

  /**
   * Performs a partial deep comparison between `object` and `source` to
   * determine if `object` contains equivalent property values.
   *
   * **Note:** This method is equivalent to `_.matches` when `source` is
   * partially applied.
   *
   * Partial comparisons will match empty array and empty object `source`
   * values against any array or object value, respectively. See `_.isEqual`
   * for a list of supported value comparisons.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   *
   * _.isMatch(object, { 'b': 2 });
   * // => true
   *
   * _.isMatch(object, { 'b': 1 });
   * // => false
   */
  function isMatch(object, source) {
    return object === source || baseIsMatch(object, source, getMatchData(source));
  }

  /**
   * This method is like `_.isMatch` except that it accepts `customizer` which
   * is invoked to compare values. If `customizer` returns `undefined`, comparisons
   * are handled by the method instead. The `customizer` is invoked with five
   * arguments: (objValue, srcValue, index|key, object, source).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   * @example
   *
   * function isGreeting(value) {
   *   return /^h(?:i|ello)$/.test(value);
   * }
   *
   * function customizer(objValue, srcValue) {
   *   if (isGreeting(objValue) && isGreeting(srcValue)) {
   *     return true;
   *   }
   * }
   *
   * var object = { 'greeting': 'hello' };
   * var source = { 'greeting': 'hi' };
   *
   * _.isMatchWith(object, source, customizer);
   * // => true
   */
  function isMatchWith(object, source, customizer) {
    customizer = typeof customizer == 'function' ? customizer : undefined;
    return baseIsMatch(object, source, getMatchData(source), customizer);
  }

  /** `Object#toString` result references. */
  var numberTag$4 = '[object Number]';

  /**
   * Checks if `value` is classified as a `Number` primitive or object.
   *
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
   * classified as numbers, use the `_.isFinite` method.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a number, else `false`.
   * @example
   *
   * _.isNumber(3);
   * // => true
   *
   * _.isNumber(Number.MIN_VALUE);
   * // => true
   *
   * _.isNumber(Infinity);
   * // => true
   *
   * _.isNumber('3');
   * // => false
   */
  function isNumber(value) {
    return typeof value == 'number' ||
      (isObjectLike(value) && baseGetTag(value) == numberTag$4);
  }

  /**
   * Checks if `value` is `NaN`.
   *
   * **Note:** This method is based on
   * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
   * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
   * `undefined` and other non-number values.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   * @example
   *
   * _.isNaN(NaN);
   * // => true
   *
   * _.isNaN(new Number(NaN));
   * // => true
   *
   * isNaN(undefined);
   * // => true
   *
   * _.isNaN(undefined);
   * // => false
   */
  function isNaN$1(value) {
    // An `NaN` primitive is the only value that is not equal to itself.
    // Perform the `toStringTag` check first to avoid errors with some
    // ActiveX objects in IE.
    return isNumber(value) && value != +value;
  }

  /**
   * Checks if `func` is capable of being masked.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
   */
  var isMaskable = coreJsData ? isFunction : stubFalse;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.';

  /**
   * Checks if `value` is a pristine native function.
   *
   * **Note:** This method can't reliably detect native functions in the presence
   * of the core-js package because core-js circumvents this kind of detection.
   * Despite multiple requests, the core-js maintainer has made it clear: any
   * attempt to fix the detection will be obstructed. As a result, we're left
   * with little choice but to throw an error. Unfortunately, this also affects
   * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
   * which rely on core-js.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   * @example
   *
   * _.isNative(Array.prototype.push);
   * // => true
   *
   * _.isNative(_);
   * // => false
   */
  function isNative(value) {
    if (isMaskable(value)) {
      throw new Error(CORE_ERROR_TEXT);
    }
    return baseIsNative(value);
  }

  /**
   * Checks if `value` is `null` or `undefined`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
   * @example
   *
   * _.isNil(null);
   * // => true
   *
   * _.isNil(void 0);
   * // => true
   *
   * _.isNil(NaN);
   * // => false
   */
  function isNil(value) {
    return value == null;
  }

  /**
   * Checks if `value` is `null`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
   * @example
   *
   * _.isNull(null);
   * // => true
   *
   * _.isNull(void 0);
   * // => false
   */
  function isNull(value) {
    return value === null;
  }

  /** `Object#toString` result references. */
  var regexpTag$4 = '[object RegExp]';

  /**
   * The base implementation of `_.isRegExp` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
   */
  function baseIsRegExp(value) {
    return isObjectLike(value) && baseGetTag(value) == regexpTag$4;
  }

  /* Node.js helper references. */
  var nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;

  /**
   * Checks if `value` is classified as a `RegExp` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
   * @example
   *
   * _.isRegExp(/abc/);
   * // => true
   *
   * _.isRegExp('/abc/');
   * // => false
   */
  var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$2 = 9007199254740991;

  /**
   * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
   * double precision number which isn't the result of a rounded unsafe integer.
   *
   * **Note:** This method is based on
   * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
   * @example
   *
   * _.isSafeInteger(3);
   * // => true
   *
   * _.isSafeInteger(Number.MIN_VALUE);
   * // => false
   *
   * _.isSafeInteger(Infinity);
   * // => false
   *
   * _.isSafeInteger('3');
   * // => false
   */
  function isSafeInteger(value) {
    return isInteger(value) && value >= -MAX_SAFE_INTEGER$2 && value <= MAX_SAFE_INTEGER$2;
  }

  /**
   * Checks if `value` is `undefined`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
   * @example
   *
   * _.isUndefined(void 0);
   * // => true
   *
   * _.isUndefined(null);
   * // => false
   */
  function isUndefined(value) {
    return value === undefined;
  }

  /** `Object#toString` result references. */
  var weakMapTag$3 = '[object WeakMap]';

  /**
   * Checks if `value` is classified as a `WeakMap` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
   * @example
   *
   * _.isWeakMap(new WeakMap);
   * // => true
   *
   * _.isWeakMap(new Map);
   * // => false
   */
  function isWeakMap(value) {
    return isObjectLike(value) && getTag$1(value) == weakMapTag$3;
  }

  /** `Object#toString` result references. */
  var weakSetTag = '[object WeakSet]';

  /**
   * Checks if `value` is classified as a `WeakSet` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
   * @example
   *
   * _.isWeakSet(new WeakSet);
   * // => true
   *
   * _.isWeakSet(new Set);
   * // => false
   */
  function isWeakSet(value) {
    return isObjectLike(value) && baseGetTag(value) == weakSetTag;
  }

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$4 = 1;

  /**
   * Creates a function that invokes `func` with the arguments of the created
   * function. If `func` is a property name, the created function returns the
   * property value for a given element. If `func` is an array or object, the
   * created function returns `true` for elements that contain the equivalent
   * source properties, otherwise it returns `false`.
   *
   * @static
   * @since 4.0.0
   * @memberOf _
   * @category Util
   * @param {*} [func=_.identity] The value to convert to a callback.
   * @returns {Function} Returns the callback.
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': true },
   *   { 'user': 'fred',   'age': 40, 'active': false }
   * ];
   *
   * // The `_.matches` iteratee shorthand.
   * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
   * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.filter(users, _.iteratee(['user', 'fred']));
   * // => [{ 'user': 'fred', 'age': 40 }]
   *
   * // The `_.property` iteratee shorthand.
   * _.map(users, _.iteratee('user'));
   * // => ['barney', 'fred']
   *
   * // Create custom iteratee shorthands.
   * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
   *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
   *     return func.test(string);
   *   };
   * });
   *
   * _.filter(['abc', 'def'], /ef/);
   * // => ['def']
   */
  function iteratee(func) {
    return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG$4));
  }

  /** Used for built-in method references. */
  var arrayProto$1 = Array.prototype;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeJoin = arrayProto$1.join;

  /**
   * Converts all elements in `array` into a string separated by `separator`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to convert.
   * @param {string} [separator=','] The element separator.
   * @returns {string} Returns the joined string.
   * @example
   *
   * _.join(['a', 'b', 'c'], '~');
   * // => 'a~b~c'
   */
  function join(array, separator) {
    return array == null ? '' : nativeJoin.call(array, separator);
  }

  /**
   * Converts `string` to
   * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the kebab cased string.
   * @example
   *
   * _.kebabCase('Foo Bar');
   * // => 'foo-bar'
   *
   * _.kebabCase('fooBar');
   * // => 'foo-bar'
   *
   * _.kebabCase('__FOO_BAR__');
   * // => 'foo-bar'
   */
  var kebabCase = createCompounder(function(result, word, index) {
    return result + (index ? '-' : '') + word.toLowerCase();
  });

  /**
   * Creates an object composed of keys generated from the results of running
   * each element of `collection` thru `iteratee`. The corresponding value of
   * each key is the last element responsible for generating the key. The
   * iteratee is invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
   * @returns {Object} Returns the composed aggregate object.
   * @example
   *
   * var array = [
   *   { 'dir': 'left', 'code': 97 },
   *   { 'dir': 'right', 'code': 100 }
   * ];
   *
   * _.keyBy(array, function(o) {
   *   return String.fromCharCode(o.code);
   * });
   * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
   *
   * _.keyBy(array, 'dir');
   * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
   */
  var keyBy = createAggregator(function(result, value, key) {
    baseAssignValue(result, key, value);
  });

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$b = Math.max,
      nativeMin$7 = Math.min;

  /**
   * This method is like `_.indexOf` except that it iterates over elements of
   * `array` from right to left.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=array.length-1] The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   * @example
   *
   * _.lastIndexOf([1, 2, 1, 2], 2);
   * // => 3
   *
   * // Search from the `fromIndex`.
   * _.lastIndexOf([1, 2, 1, 2], 2, 2);
   * // => 1
   */
  function lastIndexOf(array, value, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return -1;
    }
    var index = length;
    if (fromIndex !== undefined) {
      index = toInteger(fromIndex);
      index = index < 0 ? nativeMax$b(length + index, 0) : nativeMin$7(index, length - 1);
    }
    return value === value
      ? strictLastIndexOf(array, value, index)
      : baseFindIndex(array, baseIsNaN, index, true);
  }

  /**
   * Converts `string`, as space separated words, to lower case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the lower cased string.
   * @example
   *
   * _.lowerCase('--Foo-Bar--');
   * // => 'foo bar'
   *
   * _.lowerCase('fooBar');
   * // => 'foo bar'
   *
   * _.lowerCase('__FOO_BAR__');
   * // => 'foo bar'
   */
  var lowerCase = createCompounder(function(result, word, index) {
    return result + (index ? ' ' : '') + word.toLowerCase();
  });

  /**
   * Converts the first character of `string` to lower case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.lowerFirst('Fred');
   * // => 'fred'
   *
   * _.lowerFirst('FRED');
   * // => 'fRED'
   */
  var lowerFirst = createCaseFirst('toLowerCase');

  /**
   * The base implementation of `_.lt` which doesn't coerce arguments.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is less than `other`,
   *  else `false`.
   */
  function baseLt(value, other) {
    return value < other;
  }

  /**
   * Checks if `value` is less than `other`.
   *
   * @static
   * @memberOf _
   * @since 3.9.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is less than `other`,
   *  else `false`.
   * @see _.gt
   * @example
   *
   * _.lt(1, 3);
   * // => true
   *
   * _.lt(3, 3);
   * // => false
   *
   * _.lt(3, 1);
   * // => false
   */
  var lt = createRelationalOperation(baseLt);

  /**
   * Checks if `value` is less than or equal to `other`.
   *
   * @static
   * @memberOf _
   * @since 3.9.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is less than or equal to
   *  `other`, else `false`.
   * @see _.gte
   * @example
   *
   * _.lte(1, 3);
   * // => true
   *
   * _.lte(3, 3);
   * // => true
   *
   * _.lte(3, 1);
   * // => false
   */
  var lte = createRelationalOperation(function(value, other) {
    return value <= other;
  });

  /**
   * The opposite of `_.mapValues`; this method creates an object with the
   * same values as `object` and keys generated by running each own enumerable
   * string keyed property of `object` thru `iteratee`. The iteratee is invoked
   * with three arguments: (value, key, object).
   *
   * @static
   * @memberOf _
   * @since 3.8.0
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Object} Returns the new mapped object.
   * @see _.mapValues
   * @example
   *
   * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
   *   return key + value;
   * });
   * // => { 'a1': 1, 'b2': 2 }
   */
  function mapKeys(object, iteratee) {
    var result = {};
    iteratee = baseIteratee(iteratee, 3);

    baseForOwn(object, function(value, key, object) {
      baseAssignValue(result, iteratee(value, key, object), value);
    });
    return result;
  }

  /**
   * Creates an object with the same keys as `object` and values generated
   * by running each own enumerable string keyed property of `object` thru
   * `iteratee`. The iteratee is invoked with three arguments:
   * (value, key, object).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Object} Returns the new mapped object.
   * @see _.mapKeys
   * @example
   *
   * var users = {
   *   'fred':    { 'user': 'fred',    'age': 40 },
   *   'pebbles': { 'user': 'pebbles', 'age': 1 }
   * };
   *
   * _.mapValues(users, function(o) { return o.age; });
   * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
   *
   * // The `_.property` iteratee shorthand.
   * _.mapValues(users, 'age');
   * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
   */
  function mapValues(object, iteratee) {
    var result = {};
    iteratee = baseIteratee(iteratee, 3);

    baseForOwn(object, function(value, key, object) {
      baseAssignValue(result, key, iteratee(value, key, object));
    });
    return result;
  }

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$5 = 1;

  /**
   * Creates a function that performs a partial deep comparison between a given
   * object and `source`, returning `true` if the given object has equivalent
   * property values, else `false`.
   *
   * **Note:** The created function is equivalent to `_.isMatch` with `source`
   * partially applied.
   *
   * Partial comparisons will match empty array and empty object `source`
   * values against any array or object value, respectively. See `_.isEqual`
   * for a list of supported value comparisons.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Util
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   * @example
   *
   * var objects = [
   *   { 'a': 1, 'b': 2, 'c': 3 },
   *   { 'a': 4, 'b': 5, 'c': 6 }
   * ];
   *
   * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
   * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
   */
  function matches(source) {
    return baseMatches(baseClone(source, CLONE_DEEP_FLAG$5));
  }

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$6 = 1;

  /**
   * Creates a function that performs a partial deep comparison between the
   * value at `path` of a given object to `srcValue`, returning `true` if the
   * object value is equivalent, else `false`.
   *
   * **Note:** Partial comparisons will match empty array and empty object
   * `srcValue` values against any array or object value, respectively. See
   * `_.isEqual` for a list of supported value comparisons.
   *
   * @static
   * @memberOf _
   * @since 3.2.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   * @example
   *
   * var objects = [
   *   { 'a': 1, 'b': 2, 'c': 3 },
   *   { 'a': 4, 'b': 5, 'c': 6 }
   * ];
   *
   * _.find(objects, _.matchesProperty('a', 4));
   * // => { 'a': 4, 'b': 5, 'c': 6 }
   */
  function matchesProperty(path, srcValue) {
    return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG$6));
  }

  /**
   * The base implementation of methods like `_.max` and `_.min` which accepts a
   * `comparator` to determine the extremum value.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The iteratee invoked per iteration.
   * @param {Function} comparator The comparator used to compare values.
   * @returns {*} Returns the extremum value.
   */
  function baseExtremum(array, iteratee, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      var value = array[index],
          current = iteratee(value);

      if (current != null && (computed === undefined
            ? (current === current && !isSymbol(current))
            : comparator(current, computed)
          )) {
        var computed = current,
            result = value;
      }
    }
    return result;
  }

  /**
   * Computes the maximum value of `array`. If `array` is empty or falsey,
   * `undefined` is returned.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Math
   * @param {Array} array The array to iterate over.
   * @returns {*} Returns the maximum value.
   * @example
   *
   * _.max([4, 2, 8, 6]);
   * // => 8
   *
   * _.max([]);
   * // => undefined
   */
  function max(array) {
    return (array && array.length)
      ? baseExtremum(array, identity, baseGt)
      : undefined;
  }

  /**
   * This method is like `_.max` except that it accepts `iteratee` which is
   * invoked for each element in `array` to generate the criterion by which
   * the value is ranked. The iteratee is invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Math
   * @param {Array} array The array to iterate over.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {*} Returns the maximum value.
   * @example
   *
   * var objects = [{ 'n': 1 }, { 'n': 2 }];
   *
   * _.maxBy(objects, function(o) { return o.n; });
   * // => { 'n': 2 }
   *
   * // The `_.property` iteratee shorthand.
   * _.maxBy(objects, 'n');
   * // => { 'n': 2 }
   */
  function maxBy(array, iteratee) {
    return (array && array.length)
      ? baseExtremum(array, baseIteratee(iteratee, 2), baseGt)
      : undefined;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /** Used as references for various `Number` constants. */
  var NAN$2 = 0 / 0;

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN$2;
  }

  /**
   * Computes the mean of the values in `array`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Math
   * @param {Array} array The array to iterate over.
   * @returns {number} Returns the mean.
   * @example
   *
   * _.mean([4, 2, 8, 6]);
   * // => 5
   */
  function mean(array) {
    return baseMean(array, identity);
  }

  /**
   * This method is like `_.mean` except that it accepts `iteratee` which is
   * invoked for each element in `array` to generate the value to be averaged.
   * The iteratee is invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 4.7.0
   * @category Math
   * @param {Array} array The array to iterate over.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {number} Returns the mean.
   * @example
   *
   * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
   *
   * _.meanBy(objects, function(o) { return o.n; });
   * // => 5
   *
   * // The `_.property` iteratee shorthand.
   * _.meanBy(objects, 'n');
   * // => 5
   */
  function meanBy(array, iteratee) {
    return baseMean(array, baseIteratee(iteratee, 2));
  }

  /**
   * This method is like `_.assign` except that it recursively merges own and
   * inherited enumerable string keyed properties of source objects into the
   * destination object. Source properties that resolve to `undefined` are
   * skipped if a destination value exists. Array and plain object properties
   * are merged recursively. Other objects and value types are overridden by
   * assignment. Source objects are applied from left to right. Subsequent
   * sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 0.5.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = {
   *   'a': [{ 'b': 2 }, { 'd': 4 }]
   * };
   *
   * var other = {
   *   'a': [{ 'c': 3 }, { 'e': 5 }]
   * };
   *
   * _.merge(object, other);
   * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
   */
  var merge = createAssigner(function(object, source, srcIndex) {
    baseMerge(object, source, srcIndex);
  });

  /**
   * Creates a function that invokes the method at `path` of a given object.
   * Any additional arguments are provided to the invoked method.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Util
   * @param {Array|string} path The path of the method to invoke.
   * @param {...*} [args] The arguments to invoke the method with.
   * @returns {Function} Returns the new invoker function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': _.constant(2) } },
   *   { 'a': { 'b': _.constant(1) } }
   * ];
   *
   * _.map(objects, _.method('a.b'));
   * // => [2, 1]
   *
   * _.map(objects, _.method(['a', 'b']));
   * // => [2, 1]
   */
  var method = baseRest(function(path, args) {
    return function(object) {
      return baseInvoke(object, path, args);
    };
  });

  /**
   * The opposite of `_.method`; this method creates a function that invokes
   * the method at a given path of `object`. Any additional arguments are
   * provided to the invoked method.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Util
   * @param {Object} object The object to query.
   * @param {...*} [args] The arguments to invoke the method with.
   * @returns {Function} Returns the new invoker function.
   * @example
   *
   * var array = _.times(3, _.constant),
   *     object = { 'a': array, 'b': array, 'c': array };
   *
   * _.map(['a[2]', 'c[0]'], _.methodOf(object));
   * // => [2, 0]
   *
   * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
   * // => [2, 0]
   */
  var methodOf = baseRest(function(object, args) {
    return function(path) {
      return baseInvoke(object, path, args);
    };
  });

  /**
   * Computes the minimum value of `array`. If `array` is empty or falsey,
   * `undefined` is returned.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Math
   * @param {Array} array The array to iterate over.
   * @returns {*} Returns the minimum value.
   * @example
   *
   * _.min([4, 2, 8, 6]);
   * // => 2
   *
   * _.min([]);
   * // => undefined
   */
  function min(array) {
    return (array && array.length)
      ? baseExtremum(array, identity, baseLt)
      : undefined;
  }

  /**
   * This method is like `_.min` except that it accepts `iteratee` which is
   * invoked for each element in `array` to generate the criterion by which
   * the value is ranked. The iteratee is invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Math
   * @param {Array} array The array to iterate over.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {*} Returns the minimum value.
   * @example
   *
   * var objects = [{ 'n': 1 }, { 'n': 2 }];
   *
   * _.minBy(objects, function(o) { return o.n; });
   * // => { 'n': 1 }
   *
   * // The `_.property` iteratee shorthand.
   * _.minBy(objects, 'n');
   * // => { 'n': 1 }
   */
  function minBy(array, iteratee) {
    return (array && array.length)
      ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)
      : undefined;
  }

  /**
   * Adds all own enumerable string keyed function properties of a source
   * object to the destination object. If `object` is a function, then methods
   * are added to its prototype as well.
   *
   * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
   * avoid conflicts caused by modifying the original.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {Function|Object} [object=lodash] The destination object.
   * @param {Object} source The object of functions to add.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
   * @returns {Function|Object} Returns `object`.
   * @example
   *
   * function vowels(string) {
   *   return _.filter(string, function(v) {
   *     return /[aeiou]/i.test(v);
   *   });
   * }
   *
   * _.mixin({ 'vowels': vowels });
   * _.vowels('fred');
   * // => ['e']
   *
   * _('fred').vowels().value();
   * // => ['e']
   *
   * _.mixin({ 'vowels': vowels }, { 'chain': false });
   * _('fred').vowels();
   * // => ['e']
   */
  function mixin(object, source, options) {
    var props = keys(source),
        methodNames = baseFunctions(source, props);

    var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
        isFunc = isFunction(object);

    arrayEach(methodNames, function(methodName) {
      var func = source[methodName];
      object[methodName] = func;
      if (isFunc) {
        object.prototype[methodName] = function() {
          var chainAll = this.__chain__;
          if (chain || chainAll) {
            var result = object(this.__wrapped__),
                actions = result.__actions__ = copyArray(this.__actions__);

            actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
            result.__chain__ = chainAll;
            return result;
          }
          return func.apply(object, arrayPush([this.value()], arguments));
        };
      }
    });

    return object;
  }

  /**
   * Multiply two numbers.
   *
   * @static
   * @memberOf _
   * @since 4.7.0
   * @category Math
   * @param {number} multiplier The first number in a multiplication.
   * @param {number} multiplicand The second number in a multiplication.
   * @returns {number} Returns the product.
   * @example
   *
   * _.multiply(6, 4);
   * // => 24
   */
  var multiply = createMathOperation(function(multiplier, multiplicand) {
    return multiplier * multiplicand;
  }, 1);

  /** Error message constants. */
  var FUNC_ERROR_TEXT$8 = 'Expected a function';

  /**
   * Creates a function that negates the result of the predicate `func`. The
   * `func` predicate is invoked with the `this` binding and arguments of the
   * created function.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Function
   * @param {Function} predicate The predicate to negate.
   * @returns {Function} Returns the new negated function.
   * @example
   *
   * function isEven(n) {
   *   return n % 2 == 0;
   * }
   *
   * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
   * // => [1, 3, 5]
   */
  function negate(predicate) {
    if (typeof predicate != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$8);
    }
    return function() {
      var args = arguments;
      switch (args.length) {
        case 0: return !predicate.call(this);
        case 1: return !predicate.call(this, args[0]);
        case 2: return !predicate.call(this, args[0], args[1]);
        case 3: return !predicate.call(this, args[0], args[1], args[2]);
      }
      return !predicate.apply(this, args);
    };
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /** `Object#toString` result references. */
  var mapTag$8 = '[object Map]',
      setTag$8 = '[object Set]';

  /** Built-in value references. */
  var symIterator = Symbol$1 ? Symbol$1.iterator : undefined;

  /**
   * Converts `value` to an array.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Array} Returns the converted array.
   * @example
   *
   * _.toArray({ 'a': 1, 'b': 2 });
   * // => [1, 2]
   *
   * _.toArray('abc');
   * // => ['a', 'b', 'c']
   *
   * _.toArray(1);
   * // => []
   *
   * _.toArray(null);
   * // => []
   */
  function toArray(value) {
    if (!value) {
      return [];
    }
    if (isArrayLike(value)) {
      return isString(value) ? stringToArray(value) : copyArray(value);
    }
    if (symIterator && value[symIterator]) {
      return iteratorToArray(value[symIterator]());
    }
    var tag = getTag$1(value),
        func = tag == mapTag$8 ? mapToArray : (tag == setTag$8 ? setToArray : values);

    return func(value);
  }

  /**
   * Gets the next value on a wrapped object following the
   * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
   *
   * @name next
   * @memberOf _
   * @since 4.0.0
   * @category Seq
   * @returns {Object} Returns the next iterator value.
   * @example
   *
   * var wrapped = _([1, 2]);
   *
   * wrapped.next();
   * // => { 'done': false, 'value': 1 }
   *
   * wrapped.next();
   * // => { 'done': false, 'value': 2 }
   *
   * wrapped.next();
   * // => { 'done': true, 'value': undefined }
   */
  function wrapperNext() {
    if (this.__values__ === undefined) {
      this.__values__ = toArray(this.value());
    }
    var done = this.__index__ >= this.__values__.length,
        value = done ? undefined : this.__values__[this.__index__++];

    return { 'done': done, 'value': value };
  }

  /**
   * The base implementation of `_.nth` which doesn't coerce arguments.
   *
   * @private
   * @param {Array} array The array to query.
   * @param {number} n The index of the element to return.
   * @returns {*} Returns the nth element of `array`.
   */
  function baseNth(array, n) {
    var length = array.length;
    if (!length) {
      return;
    }
    n += n < 0 ? length : 0;
    return isIndex(n, length) ? array[n] : undefined;
  }

  /**
   * Gets the element at index `n` of `array`. If `n` is negative, the nth
   * element from the end is returned.
   *
   * @static
   * @memberOf _
   * @since 4.11.0
   * @category Array
   * @param {Array} array The array to query.
   * @param {number} [n=0] The index of the element to return.
   * @returns {*} Returns the nth element of `array`.
   * @example
   *
   * var array = ['a', 'b', 'c', 'd'];
   *
   * _.nth(array, 1);
   * // => 'b'
   *
   * _.nth(array, -2);
   * // => 'c';
   */
  function nth(array, n) {
    return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
  }

  /**
   * Creates a function that gets the argument at index `n`. If `n` is negative,
   * the nth argument from the end is returned.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Util
   * @param {number} [n=0] The index of the argument to return.
   * @returns {Function} Returns the new pass-thru function.
   * @example
   *
   * var func = _.nthArg(1);
   * func('a', 'b', 'c', 'd');
   * // => 'b'
   *
   * var func = _.nthArg(-2);
   * func('a', 'b', 'c', 'd');
   * // => 'c'
   */
  function nthArg(n) {
    n = toInteger(n);
    return baseRest(function(args) {
      return baseNth(args, n);
    });
  }

  /**
   * The base implementation of `_.unset`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The property path to unset.
   * @returns {boolean} Returns `true` if the property is deleted, else `false`.
   */
  function baseUnset(object, path) {
    path = castPath(path, object);
    object = parent(object, path);
    return object == null || delete object[toKey(last(path))];
  }

  /**
   * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
   * objects.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {string} key The key of the property to inspect.
   * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
   */
  function customOmitClone(value) {
    return isPlainObject(value) ? undefined : value;
  }

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$7 = 1,
      CLONE_FLAT_FLAG$1 = 2,
      CLONE_SYMBOLS_FLAG$5 = 4;

  /**
   * The opposite of `_.pick`; this method creates an object composed of the
   * own and inherited enumerable property paths of `object` that are not omitted.
   *
   * **Note:** This method is considerably slower than `_.pick`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to omit.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.omit(object, ['a', 'c']);
   * // => { 'b': '2' }
   */
  var omit = flatRest(function(object, paths) {
    var result = {};
    if (object == null) {
      return result;
    }
    var isDeep = false;
    paths = arrayMap(paths, function(path) {
      path = castPath(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    copyObject(object, getAllKeysIn(object), result);
    if (isDeep) {
      result = baseClone(result, CLONE_DEEP_FLAG$7 | CLONE_FLAT_FLAG$1 | CLONE_SYMBOLS_FLAG$5, customOmitClone);
    }
    var length = paths.length;
    while (length--) {
      baseUnset(result, paths[length]);
    }
    return result;
  });

  /**
   * The base implementation of `_.set`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @param {Function} [customizer] The function to customize path creation.
   * @returns {Object} Returns `object`.
   */
  function baseSet(object, path, value, customizer) {
    if (!isObject(object)) {
      return object;
    }
    path = castPath(path, object);

    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        nested = object;

    while (nested != null && ++index < length) {
      var key = toKey(path[index]),
          newValue = value;

      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;
        if (newValue === undefined) {
          newValue = isObject(objValue)
            ? objValue
            : (isIndex(path[index + 1]) ? [] : {});
        }
      }
      assignValue(nested, key, newValue);
      nested = nested[key];
    }
    return object;
  }

  /**
   * The base implementation of  `_.pickBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @param {Function} predicate The function invoked per property.
   * @returns {Object} Returns the new object.
   */
  function basePickBy(object, paths, predicate) {
    var index = -1,
        length = paths.length,
        result = {};

    while (++index < length) {
      var path = paths[index],
          value = baseGet(object, path);

      if (predicate(value, path)) {
        baseSet(result, castPath(path, object), value);
      }
    }
    return result;
  }

  /**
   * Creates an object composed of the `object` properties `predicate` returns
   * truthy for. The predicate is invoked with two arguments: (value, key).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The source object.
   * @param {Function} [predicate=_.identity] The function invoked per property.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pickBy(object, _.isNumber);
   * // => { 'a': 1, 'c': 3 }
   */
  function pickBy(object, predicate) {
    if (object == null) {
      return {};
    }
    var props = arrayMap(getAllKeysIn(object), function(prop) {
      return [prop];
    });
    predicate = baseIteratee(predicate);
    return basePickBy(object, props, function(value, path) {
      return predicate(value, path[0]);
    });
  }

  /**
   * The opposite of `_.pickBy`; this method creates an object composed of
   * the own and inherited enumerable string keyed properties of `object` that
   * `predicate` doesn't return truthy for. The predicate is invoked with two
   * arguments: (value, key).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The source object.
   * @param {Function} [predicate=_.identity] The function invoked per property.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.omitBy(object, _.isNumber);
   * // => { 'b': '2' }
   */
  function omitBy(object, predicate) {
    return pickBy(object, negate(baseIteratee(predicate)));
  }

  /**
   * Creates a function that is restricted to invoking `func` once. Repeat calls
   * to the function return the value of the first invocation. The `func` is
   * invoked with the `this` binding and arguments of the created function.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new restricted function.
   * @example
   *
   * var initialize = _.once(createApplication);
   * initialize();
   * initialize();
   * // => `createApplication` is invoked once
   */
  function once(func) {
    return before(2, func);
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * Compares values to sort them in ascending order.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function compareAscending(value, other) {
    if (value !== other) {
      var valIsDefined = value !== undefined,
          valIsNull = value === null,
          valIsReflexive = value === value,
          valIsSymbol = isSymbol(value);

      var othIsDefined = other !== undefined,
          othIsNull = other === null,
          othIsReflexive = other === other,
          othIsSymbol = isSymbol(other);

      if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
          (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
          (valIsNull && othIsDefined && othIsReflexive) ||
          (!valIsDefined && othIsReflexive) ||
          !valIsReflexive) {
        return 1;
      }
      if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
          (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
          (othIsNull && valIsDefined && valIsReflexive) ||
          (!othIsDefined && valIsReflexive) ||
          !othIsReflexive) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * Used by `_.orderBy` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
   * specify an order of "desc" for descending or "asc" for ascending sort order
   * of corresponding values.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]|string[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = compareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * (order == 'desc' ? -1 : 1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * The base implementation of `_.orderBy` without param guards.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
   * @param {string[]} orders The sort orders of `iteratees`.
   * @returns {Array} Returns the new sorted array.
   */
  function baseOrderBy(collection, iteratees, orders) {
    var index = -1;
    iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));

    var result = baseMap(collection, function(value, key, collection) {
      var criteria = arrayMap(iteratees, function(iteratee) {
        return iteratee(value);
      });
      return { 'criteria': criteria, 'index': ++index, 'value': value };
    });

    return baseSortBy(result, function(object, other) {
      return compareMultiple(object, other, orders);
    });
  }

  /**
   * This method is like `_.sortBy` except that it allows specifying the sort
   * orders of the iteratees to sort by. If `orders` is unspecified, all values
   * are sorted in ascending order. Otherwise, specify an order of "desc" for
   * descending or "asc" for ascending sort order of corresponding values.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
   *  The iteratees to sort by.
   * @param {string[]} [orders] The sort orders of `iteratees`.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
   * @returns {Array} Returns the new sorted array.
   * @example
   *
   * var users = [
   *   { 'user': 'fred',   'age': 48 },
   *   { 'user': 'barney', 'age': 34 },
   *   { 'user': 'fred',   'age': 40 },
   *   { 'user': 'barney', 'age': 36 }
   * ];
   *
   * // Sort by `user` in ascending order and by `age` in descending order.
   * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
   * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
   */
  function orderBy(collection, iteratees, orders, guard) {
    if (collection == null) {
      return [];
    }
    if (!isArray(iteratees)) {
      iteratees = iteratees == null ? [] : [iteratees];
    }
    orders = guard ? undefined : orders;
    if (!isArray(orders)) {
      orders = orders == null ? [] : [orders];
    }
    return baseOrderBy(collection, iteratees, orders);
  }

  /**
   * Creates a function like `_.over`.
   *
   * @private
   * @param {Function} arrayFunc The function to iterate over iteratees.
   * @returns {Function} Returns the new over function.
   */
  function createOver(arrayFunc) {
    return flatRest(function(iteratees) {
      iteratees = arrayMap(iteratees, baseUnary(baseIteratee));
      return baseRest(function(args) {
        var thisArg = this;
        return arrayFunc(iteratees, function(iteratee) {
          return apply(iteratee, thisArg, args);
        });
      });
    });
  }

  /**
   * Creates a function that invokes `iteratees` with the arguments it receives
   * and returns their results.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Util
   * @param {...(Function|Function[])} [iteratees=[_.identity]]
   *  The iteratees to invoke.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var func = _.over([Math.max, Math.min]);
   *
   * func(1, 2, 3, 4);
   * // => [4, 1]
   */
  var over = createOver(arrayMap);

  /**
   * A `baseRest` alias which can be replaced with `identity` by module
   * replacement plugins.
   *
   * @private
   * @type {Function}
   * @param {Function} func The function to apply a rest parameter to.
   * @returns {Function} Returns the new function.
   */
  var castRest = baseRest;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMin$8 = Math.min;

  /**
   * Creates a function that invokes `func` with its arguments transformed.
   *
   * @static
   * @since 4.0.0
   * @memberOf _
   * @category Function
   * @param {Function} func The function to wrap.
   * @param {...(Function|Function[])} [transforms=[_.identity]]
   *  The argument transforms.
   * @returns {Function} Returns the new function.
   * @example
   *
   * function doubled(n) {
   *   return n * 2;
   * }
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * var func = _.overArgs(function(x, y) {
   *   return [x, y];
   * }, [square, doubled]);
   *
   * func(9, 3);
   * // => [81, 6]
   *
   * func(10, 5);
   * // => [100, 10]
   */
  var overArgs = castRest(function(func, transforms) {
    transforms = (transforms.length == 1 && isArray(transforms[0]))
      ? arrayMap(transforms[0], baseUnary(baseIteratee))
      : arrayMap(baseFlatten(transforms, 1), baseUnary(baseIteratee));

    var funcsLength = transforms.length;
    return baseRest(function(args) {
      var index = -1,
          length = nativeMin$8(args.length, funcsLength);

      while (++index < length) {
        args[index] = transforms[index].call(this, args[index]);
      }
      return apply(func, this, args);
    });
  });

  /**
   * Creates a function that checks if **all** of the `predicates` return
   * truthy when invoked with the arguments it receives.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Util
   * @param {...(Function|Function[])} [predicates=[_.identity]]
   *  The predicates to check.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var func = _.overEvery([Boolean, isFinite]);
   *
   * func('1');
   * // => true
   *
   * func(null);
   * // => false
   *
   * func(NaN);
   * // => false
   */
  var overEvery = createOver(arrayEvery);

  /**
   * Creates a function that checks if **any** of the `predicates` return
   * truthy when invoked with the arguments it receives.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Util
   * @param {...(Function|Function[])} [predicates=[_.identity]]
   *  The predicates to check.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var func = _.overSome([Boolean, isFinite]);
   *
   * func('1');
   * // => true
   *
   * func(null);
   * // => true
   *
   * func(NaN);
   * // => false
   */
  var overSome = createOver(arraySome);

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$3 = 9007199254740991;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeFloor = Math.floor;

  /**
   * The base implementation of `_.repeat` which doesn't coerce arguments.
   *
   * @private
   * @param {string} string The string to repeat.
   * @param {number} n The number of times to repeat the string.
   * @returns {string} Returns the repeated string.
   */
  function baseRepeat(string, n) {
    var result = '';
    if (!string || n < 1 || n > MAX_SAFE_INTEGER$3) {
      return result;
    }
    // Leverage the exponentiation by squaring algorithm for a faster repeat.
    // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
    do {
      if (n % 2) {
        result += string;
      }
      n = nativeFloor(n / 2);
      if (n) {
        string += string;
      }
    } while (n);

    return result;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /** Used to compose unicode character classes. */
  var rsAstralRange$3 = '\\ud800-\\udfff',
      rsComboMarksRange$4 = '\\u0300-\\u036f',
      reComboHalfMarksRange$4 = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange$4 = '\\u20d0-\\u20ff',
      rsComboRange$4 = rsComboMarksRange$4 + reComboHalfMarksRange$4 + rsComboSymbolsRange$4,
      rsVarRange$3 = '\\ufe0e\\ufe0f';

  /** Used to compose unicode capture groups. */
  var rsAstral$1 = '[' + rsAstralRange$3 + ']',
      rsCombo$3 = '[' + rsComboRange$4 + ']',
      rsFitz$2 = '\\ud83c[\\udffb-\\udfff]',
      rsModifier$2 = '(?:' + rsCombo$3 + '|' + rsFitz$2 + ')',
      rsNonAstral$2 = '[^' + rsAstralRange$3 + ']',
      rsRegional$2 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair$2 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsZWJ$3 = '\\u200d';

  /** Used to compose unicode regexes. */
  var reOptMod$2 = rsModifier$2 + '?',
      rsOptVar$2 = '[' + rsVarRange$3 + ']?',
      rsOptJoin$2 = '(?:' + rsZWJ$3 + '(?:' + [rsNonAstral$2, rsRegional$2, rsSurrPair$2].join('|') + ')' + rsOptVar$2 + reOptMod$2 + ')*',
      rsSeq$2 = rsOptVar$2 + reOptMod$2 + rsOptJoin$2,
      rsSymbol$1 = '(?:' + [rsNonAstral$2 + rsCombo$3 + '?', rsCombo$3, rsRegional$2, rsSurrPair$2, rsAstral$1].join('|') + ')';

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode$1 = RegExp(rsFitz$2 + '(?=' + rsFitz$2 + ')|' + rsSymbol$1 + rsSeq$2, 'g');

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode$1.lastIndex = 0;
    while (reUnicode$1.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil$1 = Math.ceil;

  /**
   * Creates the padding for `string` based on `length`. The `chars` string
   * is truncated if the number of characters exceeds `length`.
   *
   * @private
   * @param {number} length The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padding for `string`.
   */
  function createPadding(length, chars) {
    chars = chars === undefined ? ' ' : baseToString(chars);

    var charsLength = chars.length;
    if (charsLength < 2) {
      return charsLength ? baseRepeat(chars, length) : chars;
    }
    var result = baseRepeat(chars, nativeCeil$1(length / stringSize(chars)));
    return hasUnicode(chars)
      ? castSlice(stringToArray(result), 0, length).join('')
      : result.slice(0, length);
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil$2 = Math.ceil,
      nativeFloor$1 = Math.floor;

  /**
   * Pads `string` on the left and right sides if it's shorter than `length`.
   * Padding characters are truncated if they can't be evenly divided by `length`.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to pad.
   * @param {number} [length=0] The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padded string.
   * @example
   *
   * _.pad('abc', 8);
   * // => '  abc   '
   *
   * _.pad('abc', 8, '_-');
   * // => '_-abc_-_'
   *
   * _.pad('abc', 3);
   * // => 'abc'
   */
  function pad(string, length, chars) {
    string = toString(string);
    length = toInteger(length);

    var strLength = length ? stringSize(string) : 0;
    if (!length || strLength >= length) {
      return string;
    }
    var mid = (length - strLength) / 2;
    return (
      createPadding(nativeFloor$1(mid), chars) +
      string +
      createPadding(nativeCeil$2(mid), chars)
    );
  }

  /**
   * Pads `string` on the right side if it's shorter than `length`. Padding
   * characters are truncated if they exceed `length`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to pad.
   * @param {number} [length=0] The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padded string.
   * @example
   *
   * _.padEnd('abc', 6);
   * // => 'abc   '
   *
   * _.padEnd('abc', 6, '_-');
   * // => 'abc_-_'
   *
   * _.padEnd('abc', 3);
   * // => 'abc'
   */
  function padEnd(string, length, chars) {
    string = toString(string);
    length = toInteger(length);

    var strLength = length ? stringSize(string) : 0;
    return (length && strLength < length)
      ? (string + createPadding(length - strLength, chars))
      : string;
  }

  /**
   * Pads `string` on the left side if it's shorter than `length`. Padding
   * characters are truncated if they exceed `length`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to pad.
   * @param {number} [length=0] The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padded string.
   * @example
   *
   * _.padStart('abc', 6);
   * // => '   abc'
   *
   * _.padStart('abc', 6, '_-');
   * // => '_-_abc'
   *
   * _.padStart('abc', 3);
   * // => 'abc'
   */
  function padStart(string, length, chars) {
    string = toString(string);
    length = toInteger(length);

    var strLength = length ? stringSize(string) : 0;
    return (length && strLength < length)
      ? (createPadding(length - strLength, chars) + string)
      : string;
  }

  /** Used to match leading and trailing whitespace. */
  var reTrimStart = /^\s+/;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeParseInt = root.parseInt;

  /**
   * Converts `string` to an integer of the specified radix. If `radix` is
   * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
   * hexadecimal, in which case a `radix` of `16` is used.
   *
   * **Note:** This method aligns with the
   * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category String
   * @param {string} string The string to convert.
   * @param {number} [radix=10] The radix to interpret `value` by.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.parseInt('08');
   * // => 8
   *
   * _.map(['6', '08', '10'], _.parseInt);
   * // => [6, 8, 10]
   */
  function parseInt$1(string, radix, guard) {
    if (guard || radix == null) {
      radix = 0;
    } else if (radix) {
      radix = +radix;
    }
    return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
  }

  /** Used to compose bitmasks for function metadata. */
  var WRAP_PARTIAL_FLAG$6 = 32;

  /**
   * Creates a function that invokes `func` with `partials` prepended to the
   * arguments it receives. This method is like `_.bind` except it does **not**
   * alter the `this` binding.
   *
   * The `_.partial.placeholder` value, which defaults to `_` in monolithic
   * builds, may be used as a placeholder for partially applied arguments.
   *
   * **Note:** This method doesn't set the "length" property of partially
   * applied functions.
   *
   * @static
   * @memberOf _
   * @since 0.2.0
   * @category Function
   * @param {Function} func The function to partially apply arguments to.
   * @param {...*} [partials] The arguments to be partially applied.
   * @returns {Function} Returns the new partially applied function.
   * @example
   *
   * function greet(greeting, name) {
   *   return greeting + ' ' + name;
   * }
   *
   * var sayHelloTo = _.partial(greet, 'hello');
   * sayHelloTo('fred');
   * // => 'hello fred'
   *
   * // Partially applied with placeholders.
   * var greetFred = _.partial(greet, _, 'fred');
   * greetFred('hi');
   * // => 'hi fred'
   */
  var partial = baseRest(function(func, partials) {
    var holders = replaceHolders(partials, getHolder(partial));
    return createWrap(func, WRAP_PARTIAL_FLAG$6, undefined, partials, holders);
  });

  // Assign default placeholders.
  partial.placeholder = {};

  /** Used to compose bitmasks for function metadata. */
  var WRAP_PARTIAL_RIGHT_FLAG$3 = 64;

  /**
   * This method is like `_.partial` except that partially applied arguments
   * are appended to the arguments it receives.
   *
   * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
   * builds, may be used as a placeholder for partially applied arguments.
   *
   * **Note:** This method doesn't set the "length" property of partially
   * applied functions.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Function
   * @param {Function} func The function to partially apply arguments to.
   * @param {...*} [partials] The arguments to be partially applied.
   * @returns {Function} Returns the new partially applied function.
   * @example
   *
   * function greet(greeting, name) {
   *   return greeting + ' ' + name;
   * }
   *
   * var greetFred = _.partialRight(greet, 'fred');
   * greetFred('hi');
   * // => 'hi fred'
   *
   * // Partially applied with placeholders.
   * var sayHelloTo = _.partialRight(greet, 'hello', _);
   * sayHelloTo('fred');
   * // => 'hello fred'
   */
  var partialRight = baseRest(function(func, partials) {
    var holders = replaceHolders(partials, getHolder(partialRight));
    return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG$3, undefined, partials, holders);
  });

  // Assign default placeholders.
  partialRight.placeholder = {};

  /**
   * Creates an array of elements split into two groups, the first of which
   * contains elements `predicate` returns truthy for, the second of which
   * contains elements `predicate` returns falsey for. The predicate is
   * invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the array of grouped elements.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'age': 36, 'active': false },
   *   { 'user': 'fred',    'age': 40, 'active': true },
   *   { 'user': 'pebbles', 'age': 1,  'active': false }
   * ];
   *
   * _.partition(users, function(o) { return o.active; });
   * // => objects for [['fred'], ['barney', 'pebbles']]
   *
   * // The `_.matches` iteratee shorthand.
   * _.partition(users, { 'age': 1, 'active': false });
   * // => objects for [['pebbles'], ['barney', 'fred']]
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.partition(users, ['active', false]);
   * // => objects for [['barney', 'pebbles'], ['fred']]
   *
   * // The `_.property` iteratee shorthand.
   * _.partition(users, 'active');
   * // => objects for [['fred'], ['barney', 'pebbles']]
   */
  var partition = createAggregator(function(result, value, key) {
    result[key ? 0 : 1].push(value);
  }, function() { return [[], []]; });

  /**
   * The base implementation of `_.pick` without support for individual
   * property identifiers.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @returns {Object} Returns the new object.
   */
  function basePick(object, paths) {
    return basePickBy(object, paths, function(value, path) {
      return hasIn(object, path);
    });
  }

  /**
   * Creates an object composed of the picked `object` properties.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to pick.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pick(object, ['a', 'c']);
   * // => { 'a': 1, 'c': 3 }
   */
  var pick = flatRest(function(object, paths) {
    return object == null ? {} : basePick(object, paths);
  });

  /**
   * Creates a clone of the chain sequence planting `value` as the wrapped value.
   *
   * @name plant
   * @memberOf _
   * @since 3.2.0
   * @category Seq
   * @param {*} value The value to plant.
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * var wrapped = _([1, 2]).map(square);
   * var other = wrapped.plant([3, 4]);
   *
   * other.value();
   * // => [9, 16]
   *
   * wrapped.value();
   * // => [1, 4]
   */
  function wrapperPlant(value) {
    var result,
        parent = this;

    while (parent instanceof baseLodash) {
      var clone = wrapperClone(parent);
      clone.__index__ = 0;
      clone.__values__ = undefined;
      if (result) {
        previous.__wrapped__ = clone;
      } else {
        result = clone;
      }
      var previous = clone;
      parent = parent.__wrapped__;
    }
    previous.__wrapped__ = value;
    return result;
  }

  /**
   * The opposite of `_.property`; this method creates a function that returns
   * the value at a given path of `object`.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Util
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var array = [0, 1, 2],
   *     object = { 'a': array, 'b': array, 'c': array };
   *
   * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
   * // => [2, 0]
   *
   * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
   * // => [2, 0]
   */
  function propertyOf(object) {
    return function(path) {
      return object == null ? undefined : baseGet(object, path);
    };
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /** Used for built-in method references. */
  var arrayProto$2 = Array.prototype;

  /** Built-in value references. */
  var splice$1 = arrayProto$2.splice;

  /**
   * The base implementation of `_.pullAllBy` without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to remove.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns `array`.
   */
  function basePullAll(array, values, iteratee, comparator) {
    var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
        index = -1,
        length = values.length,
        seen = array;

    if (array === values) {
      values = copyArray(values);
    }
    if (iteratee) {
      seen = arrayMap(array, baseUnary(iteratee));
    }
    while (++index < length) {
      var fromIndex = 0,
          value = values[index],
          computed = iteratee ? iteratee(value) : value;

      while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
        if (seen !== array) {
          splice$1.call(seen, fromIndex, 1);
        }
        splice$1.call(array, fromIndex, 1);
      }
    }
    return array;
  }

  /**
   * This method is like `_.pull` except that it accepts an array of values to remove.
   *
   * **Note:** Unlike `_.difference`, this method mutates `array`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to modify.
   * @param {Array} values The values to remove.
   * @returns {Array} Returns `array`.
   * @example
   *
   * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
   *
   * _.pullAll(array, ['a', 'c']);
   * console.log(array);
   * // => ['b', 'b']
   */
  function pullAll(array, values) {
    return (array && array.length && values && values.length)
      ? basePullAll(array, values)
      : array;
  }

  /**
   * Removes all given values from `array` using
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
   * to remove elements from an array by predicate.
   *
   * @static
   * @memberOf _
   * @since 2.0.0
   * @category Array
   * @param {Array} array The array to modify.
   * @param {...*} [values] The values to remove.
   * @returns {Array} Returns `array`.
   * @example
   *
   * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
   *
   * _.pull(array, 'a', 'c');
   * console.log(array);
   * // => ['b', 'b']
   */
  var pull = baseRest(pullAll);

  /**
   * This method is like `_.pullAll` except that it accepts `iteratee` which is
   * invoked for each element of `array` and `values` to generate the criterion
   * by which they're compared. The iteratee is invoked with one argument: (value).
   *
   * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to modify.
   * @param {Array} values The values to remove.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {Array} Returns `array`.
   * @example
   *
   * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
   *
   * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
   * console.log(array);
   * // => [{ 'x': 2 }]
   */
  function pullAllBy(array, values, iteratee) {
    return (array && array.length && values && values.length)
      ? basePullAll(array, values, baseIteratee(iteratee, 2))
      : array;
  }

  /**
   * This method is like `_.pullAll` except that it accepts `comparator` which
   * is invoked to compare elements of `array` to `values`. The comparator is
   * invoked with two arguments: (arrVal, othVal).
   *
   * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
   *
   * @static
   * @memberOf _
   * @since 4.6.0
   * @category Array
   * @param {Array} array The array to modify.
   * @param {Array} values The values to remove.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns `array`.
   * @example
   *
   * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
   *
   * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
   * console.log(array);
   * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
   */
  function pullAllWith(array, values, comparator) {
    return (array && array.length && values && values.length)
      ? basePullAll(array, values, undefined, comparator)
      : array;
  }

  /** Used for built-in method references. */
  var arrayProto$3 = Array.prototype;

  /** Built-in value references. */
  var splice$2 = arrayProto$3.splice;

  /**
   * The base implementation of `_.pullAt` without support for individual
   * indexes or capturing the removed elements.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {number[]} indexes The indexes of elements to remove.
   * @returns {Array} Returns `array`.
   */
  function basePullAt(array, indexes) {
    var length = array ? indexes.length : 0,
        lastIndex = length - 1;

    while (length--) {
      var index = indexes[length];
      if (length == lastIndex || index !== previous) {
        var previous = index;
        if (isIndex(index)) {
          splice$2.call(array, index, 1);
        } else {
          baseUnset(array, index);
        }
      }
    }
    return array;
  }

  /**
   * Removes elements from `array` corresponding to `indexes` and returns an
   * array of removed elements.
   *
   * **Note:** Unlike `_.at`, this method mutates `array`.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to modify.
   * @param {...(number|number[])} [indexes] The indexes of elements to remove.
   * @returns {Array} Returns the new array of removed elements.
   * @example
   *
   * var array = ['a', 'b', 'c', 'd'];
   * var pulled = _.pullAt(array, [1, 3]);
   *
   * console.log(array);
   * // => ['a', 'c']
   *
   * console.log(pulled);
   * // => ['b', 'd']
   */
  var pullAt = flatRest(function(array, indexes) {
    var length = array == null ? 0 : array.length,
        result = baseAt(array, indexes);

    basePullAt(array, arrayMap(indexes, function(index) {
      return isIndex(index, length) ? +index : index;
    }).sort(compareAscending));

    return result;
  });

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeFloor$2 = Math.floor,
      nativeRandom = Math.random;

  /**
   * The base implementation of `_.random` without support for returning
   * floating-point numbers.
   *
   * @private
   * @param {number} lower The lower bound.
   * @param {number} upper The upper bound.
   * @returns {number} Returns the random number.
   */
  function baseRandom(lower, upper) {
    return lower + nativeFloor$2(nativeRandom() * (upper - lower + 1));
  }

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMin$9 = Math.min,
      nativeRandom$1 = Math.random;

  /**
   * Produces a random number between the inclusive `lower` and `upper` bounds.
   * If only one argument is provided a number between `0` and the given number
   * is returned. If `floating` is `true`, or either `lower` or `upper` are
   * floats, a floating-point number is returned instead of an integer.
   *
   * **Note:** JavaScript follows the IEEE-754 standard for resolving
   * floating-point values which can produce unexpected results.
   *
   * @static
   * @memberOf _
   * @since 0.7.0
   * @category Number
   * @param {number} [lower=0] The lower bound.
   * @param {number} [upper=1] The upper bound.
   * @param {boolean} [floating] Specify returning a floating-point number.
   * @returns {number} Returns the random number.
   * @example
   *
   * _.random(0, 5);
   * // => an integer between 0 and 5
   *
   * _.random(5);
   * // => also an integer between 0 and 5
   *
   * _.random(5, true);
   * // => a floating-point number between 0 and 5
   *
   * _.random(1.2, 5.2);
   * // => a floating-point number between 1.2 and 5.2
   */
  function random(lower, upper, floating) {
    if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
      upper = floating = undefined;
    }
    if (floating === undefined) {
      if (typeof upper == 'boolean') {
        floating = upper;
        upper = undefined;
      }
      else if (typeof lower == 'boolean') {
        floating = lower;
        lower = undefined;
      }
    }
    if (lower === undefined && upper === undefined) {
      lower = 0;
      upper = 1;
    }
    else {
      lower = toFinite(lower);
      if (upper === undefined) {
        upper = lower;
        lower = 0;
      } else {
        upper = toFinite(upper);
      }
    }
    if (lower > upper) {
      var temp = lower;
      lower = upper;
      upper = temp;
    }
    if (floating || lower % 1 || upper % 1) {
      var rand = nativeRandom$1();
      return nativeMin$9(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
    }
    return baseRandom(lower, upper);
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil$3 = Math.ceil,
      nativeMax$c = Math.max;

  /**
   * The base implementation of `_.range` and `_.rangeRight` which doesn't
   * coerce arguments.
   *
   * @private
   * @param {number} start The start of the range.
   * @param {number} end The end of the range.
   * @param {number} step The value to increment or decrement by.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Array} Returns the range of numbers.
   */
  function baseRange(start, end, step, fromRight) {
    var index = -1,
        length = nativeMax$c(nativeCeil$3((end - start) / (step || 1)), 0),
        result = Array(length);

    while (length--) {
      result[fromRight ? length : ++index] = start;
      start += step;
    }
    return result;
  }

  /**
   * Creates a `_.range` or `_.rangeRight` function.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new range function.
   */
  function createRange(fromRight) {
    return function(start, end, step) {
      if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
        end = step = undefined;
      }
      // Ensure the sign of `-0` is preserved.
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
      return baseRange(start, end, step, fromRight);
    };
  }

  /**
   * Creates an array of numbers (positive and/or negative) progressing from
   * `start` up to, but not including, `end`. A step of `-1` is used if a negative
   * `start` is specified without an `end` or `step`. If `end` is not specified,
   * it's set to `start` with `start` then set to `0`.
   *
   * **Note:** JavaScript follows the IEEE-754 standard for resolving
   * floating-point values which can produce unexpected results.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {number} [start=0] The start of the range.
   * @param {number} end The end of the range.
   * @param {number} [step=1] The value to increment or decrement by.
   * @returns {Array} Returns the range of numbers.
   * @see _.inRange, _.rangeRight
   * @example
   *
   * _.range(4);
   * // => [0, 1, 2, 3]
   *
   * _.range(-4);
   * // => [0, -1, -2, -3]
   *
   * _.range(1, 5);
   * // => [1, 2, 3, 4]
   *
   * _.range(0, 20, 5);
   * // => [0, 5, 10, 15]
   *
   * _.range(0, -4, -1);
   * // => [0, -1, -2, -3]
   *
   * _.range(1, 4, 0);
   * // => [1, 1, 1]
   *
   * _.range(0);
   * // => []
   */
  var range = createRange();

  /**
   * This method is like `_.range` except that it populates values in
   * descending order.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Util
   * @param {number} [start=0] The start of the range.
   * @param {number} end The end of the range.
   * @param {number} [step=1] The value to increment or decrement by.
   * @returns {Array} Returns the range of numbers.
   * @see _.inRange, _.range
   * @example
   *
   * _.rangeRight(4);
   * // => [3, 2, 1, 0]
   *
   * _.rangeRight(-4);
   * // => [-3, -2, -1, 0]
   *
   * _.rangeRight(1, 5);
   * // => [4, 3, 2, 1]
   *
   * _.rangeRight(0, 20, 5);
   * // => [15, 10, 5, 0]
   *
   * _.rangeRight(0, -4, -1);
   * // => [-3, -2, -1, 0]
   *
   * _.rangeRight(1, 4, 0);
   * // => [1, 1, 1]
   *
   * _.rangeRight(0);
   * // => []
   */
  var rangeRight = createRange(true);

  /** Used to compose bitmasks for function metadata. */
  var WRAP_REARG_FLAG$3 = 256;

  /**
   * Creates a function that invokes `func` with arguments arranged according
   * to the specified `indexes` where the argument value at the first index is
   * provided as the first argument, the argument value at the second index is
   * provided as the second argument, and so on.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Function
   * @param {Function} func The function to rearrange arguments for.
   * @param {...(number|number[])} indexes The arranged argument indexes.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var rearged = _.rearg(function(a, b, c) {
   *   return [a, b, c];
   * }, [2, 0, 1]);
   *
   * rearged('b', 'c', 'a')
   * // => ['a', 'b', 'c']
   */
  var rearg = flatRest(function(func, indexes) {
    return createWrap(func, WRAP_REARG_FLAG$3, undefined, undefined, undefined, indexes);
  });

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * Reduces `collection` to a value which is the accumulated result of running
   * each element in `collection` thru `iteratee`, where each successive
   * invocation is supplied the return value of the previous. If `accumulator`
   * is not given, the first element of `collection` is used as the initial
   * value. The iteratee is invoked with four arguments:
   * (accumulator, value, index|key, collection).
   *
   * Many lodash methods are guarded to work as iteratees for methods like
   * `_.reduce`, `_.reduceRight`, and `_.transform`.
   *
   * The guarded methods are:
   * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
   * and `sortBy`
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @returns {*} Returns the accumulated value.
   * @see _.reduceRight
   * @example
   *
   * _.reduce([1, 2], function(sum, n) {
   *   return sum + n;
   * }, 0);
   * // => 3
   *
   * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
   *   (result[value] || (result[value] = [])).push(key);
   *   return result;
   * }, {});
   * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
   */
  function reduce(collection, iteratee, accumulator) {
    var func = isArray(collection) ? arrayReduce : baseReduce,
        initAccum = arguments.length < 3;

    return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * This method is like `_.reduce` except that it iterates over elements of
   * `collection` from right to left.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @returns {*} Returns the accumulated value.
   * @see _.reduce
   * @example
   *
   * var array = [[0, 1], [2, 3], [4, 5]];
   *
   * _.reduceRight(array, function(flattened, other) {
   *   return flattened.concat(other);
   * }, []);
   * // => [4, 5, 2, 3, 0, 1]
   */
  function reduceRight(collection, iteratee, accumulator) {
    var func = isArray(collection) ? arrayReduceRight : baseReduce,
        initAccum = arguments.length < 3;

    return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
  }

  /**
   * The opposite of `_.filter`; this method returns the elements of `collection`
   * that `predicate` does **not** return truthy for.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   * @see _.filter
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': false },
   *   { 'user': 'fred',   'age': 40, 'active': true }
   * ];
   *
   * _.reject(users, function(o) { return !o.active; });
   * // => objects for ['fred']
   *
   * // The `_.matches` iteratee shorthand.
   * _.reject(users, { 'age': 40, 'active': true });
   * // => objects for ['barney']
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.reject(users, ['active', false]);
   * // => objects for ['fred']
   *
   * // The `_.property` iteratee shorthand.
   * _.reject(users, 'active');
   * // => objects for ['barney']
   */
  function reject(collection, predicate) {
    var func = isArray(collection) ? arrayFilter : baseFilter;
    return func(collection, negate(baseIteratee(predicate, 3)));
  }

  /**
   * Removes all elements from `array` that `predicate` returns truthy for
   * and returns an array of the removed elements. The predicate is invoked
   * with three arguments: (value, index, array).
   *
   * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
   * to pull elements from an array by value.
   *
   * @static
   * @memberOf _
   * @since 2.0.0
   * @category Array
   * @param {Array} array The array to modify.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new array of removed elements.
   * @example
   *
   * var array = [1, 2, 3, 4];
   * var evens = _.remove(array, function(n) {
   *   return n % 2 == 0;
   * });
   *
   * console.log(array);
   * // => [1, 3]
   *
   * console.log(evens);
   * // => [2, 4]
   */
  function remove(array, predicate) {
    var result = [];
    if (!(array && array.length)) {
      return result;
    }
    var index = -1,
        indexes = [],
        length = array.length;

    predicate = baseIteratee(predicate, 3);
    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result.push(value);
        indexes.push(index);
      }
    }
    basePullAt(array, indexes);
    return result;
  }

  /**
   * Repeats the given string `n` times.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to repeat.
   * @param {number} [n=1] The number of times to repeat the string.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {string} Returns the repeated string.
   * @example
   *
   * _.repeat('*', 3);
   * // => '***'
   *
   * _.repeat('abc', 2);
   * // => 'abcabc'
   *
   * _.repeat('abc', 0);
   * // => ''
   */
  function repeat(string, n, guard) {
    if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
      n = 1;
    } else {
      n = toInteger(n);
    }
    return baseRepeat(toString(string), n);
  }

  /**
   * Replaces matches for `pattern` in `string` with `replacement`.
   *
   * **Note:** This method is based on
   * [`String#replace`](https://mdn.io/String/replace).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to modify.
   * @param {RegExp|string} pattern The pattern to replace.
   * @param {Function|string} replacement The match replacement.
   * @returns {string} Returns the modified string.
   * @example
   *
   * _.replace('Hi Fred', 'Fred', 'Barney');
   * // => 'Hi Barney'
   */
  function replace() {
    var args = arguments,
        string = toString(args[0]);

    return args.length < 3 ? string : string.replace(args[1], args[2]);
  }

  /** Error message constants. */
  var FUNC_ERROR_TEXT$9 = 'Expected a function';

  /**
   * Creates a function that invokes `func` with the `this` binding of the
   * created function and arguments from `start` and beyond provided as
   * an array.
   *
   * **Note:** This method is based on the
   * [rest parameter](https://mdn.io/rest_parameters).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Function
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var say = _.rest(function(what, names) {
   *   return what + ' ' + _.initial(names).join(', ') +
   *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
   * });
   *
   * say('hello', 'fred', 'barney', 'pebbles');
   * // => 'hello fred, barney, & pebbles'
   */
  function rest(func, start) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$9);
    }
    start = start === undefined ? start : toInteger(start);
    return baseRest(func, start);
  }

  /**
   * This method is like `_.get` except that if the resolved value is a
   * function it's invoked with the `this` binding of its parent object and
   * its result is returned.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to resolve.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
   *
   * _.result(object, 'a[0].b.c1');
   * // => 3
   *
   * _.result(object, 'a[0].b.c2');
   * // => 4
   *
   * _.result(object, 'a[0].b.c3', 'default');
   * // => 'default'
   *
   * _.result(object, 'a[0].b.c3', _.constant('default'));
   * // => 'default'
   */
  function result(object, path, defaultValue) {
    path = castPath(path, object);

    var index = -1,
        length = path.length;

    // Ensure the loop is entered when path is empty.
    if (!length) {
      length = 1;
      object = undefined;
    }
    while (++index < length) {
      var value = object == null ? undefined : object[toKey(path[index])];
      if (value === undefined) {
        index = length;
        value = defaultValue;
      }
      object = isFunction(value) ? value.call(object) : value;
    }
    return object;
  }

  /** Used for built-in method references. */
  var arrayProto$4 = Array.prototype;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeReverse = arrayProto$4.reverse;

  /**
   * Reverses `array` so that the first element becomes the last, the second
   * element becomes the second to last, and so on.
   *
   * **Note:** This method mutates `array` and is based on
   * [`Array#reverse`](https://mdn.io/Array/reverse).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to modify.
   * @returns {Array} Returns `array`.
   * @example
   *
   * var array = [1, 2, 3];
   *
   * _.reverse(array);
   * // => [3, 2, 1]
   *
   * console.log(array);
   * // => [3, 2, 1]
   */
  function reverse(array) {
    return array == null ? array : nativeReverse.call(array);
  }

  /**
   * Computes `number` rounded to `precision`.
   *
   * @static
   * @memberOf _
   * @since 3.10.0
   * @category Math
   * @param {number} number The number to round.
   * @param {number} [precision=0] The precision to round to.
   * @returns {number} Returns the rounded number.
   * @example
   *
   * _.round(4.006);
   * // => 4
   *
   * _.round(4.006, 2);
   * // => 4.01
   *
   * _.round(4060, -2);
   * // => 4100
   */
  var round = createRound('round');

  /**
   * A specialized version of `_.sample` for arrays.
   *
   * @private
   * @param {Array} array The array to sample.
   * @returns {*} Returns the random element.
   */
  function arraySample(array) {
    var length = array.length;
    return length ? array[baseRandom(0, length - 1)] : undefined;
  }

  /**
   * The base implementation of `_.sample`.
   *
   * @private
   * @param {Array|Object} collection The collection to sample.
   * @returns {*} Returns the random element.
   */
  function baseSample(collection) {
    return arraySample(values(collection));
  }

  /**
   * Gets a random element from `collection`.
   *
   * @static
   * @memberOf _
   * @since 2.0.0
   * @category Collection
   * @param {Array|Object} collection The collection to sample.
   * @returns {*} Returns the random element.
   * @example
   *
   * _.sample([1, 2, 3, 4]);
   * // => 2
   */
  function sample(collection) {
    var func = isArray(collection) ? arraySample : baseSample;
    return func(collection);
  }

  /**
   * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
   *
   * @private
   * @param {Array} array The array to shuffle.
   * @param {number} [size=array.length] The size of `array`.
   * @returns {Array} Returns `array`.
   */
  function shuffleSelf(array, size) {
    var index = -1,
        length = array.length,
        lastIndex = length - 1;

    size = size === undefined ? length : size;
    while (++index < size) {
      var rand = baseRandom(index, lastIndex),
          value = array[rand];

      array[rand] = array[index];
      array[index] = value;
    }
    array.length = size;
    return array;
  }

  /**
   * A specialized version of `_.sampleSize` for arrays.
   *
   * @private
   * @param {Array} array The array to sample.
   * @param {number} n The number of elements to sample.
   * @returns {Array} Returns the random elements.
   */
  function arraySampleSize(array, n) {
    return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
  }

  /**
   * The base implementation of `_.sampleSize` without param guards.
   *
   * @private
   * @param {Array|Object} collection The collection to sample.
   * @param {number} n The number of elements to sample.
   * @returns {Array} Returns the random elements.
   */
  function baseSampleSize(collection, n) {
    var array = values(collection);
    return shuffleSelf(array, baseClamp(n, 0, array.length));
  }

  /**
   * Gets `n` random elements at unique keys from `collection` up to the
   * size of `collection`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Collection
   * @param {Array|Object} collection The collection to sample.
   * @param {number} [n=1] The number of elements to sample.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the random elements.
   * @example
   *
   * _.sampleSize([1, 2, 3], 2);
   * // => [3, 1]
   *
   * _.sampleSize([1, 2, 3], 4);
   * // => [2, 3, 1]
   */
  function sampleSize(collection, n, guard) {
    if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
      n = 1;
    } else {
      n = toInteger(n);
    }
    var func = isArray(collection) ? arraySampleSize : baseSampleSize;
    return func(collection, n);
  }

  /**
   * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
   * it's created. Arrays are created for missing index properties while objects
   * are created for all other missing properties. Use `_.setWith` to customize
   * `path` creation.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.set(object, 'a[0].b.c', 4);
   * console.log(object.a[0].b.c);
   * // => 4
   *
   * _.set(object, ['x', '0', 'y', 'z'], 5);
   * console.log(object.x[0].y.z);
   * // => 5
   */
  function set(object, path, value) {
    return object == null ? object : baseSet(object, path, value);
  }

  /**
   * This method is like `_.set` except that it accepts `customizer` which is
   * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
   * path creation is handled by the method instead. The `customizer` is invoked
   * with three arguments: (nsValue, key, nsObject).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @param {Function} [customizer] The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = {};
   *
   * _.setWith(object, '[0][1]', 'a', Object);
   * // => { '0': { '1': 'a' } }
   */
  function setWith(object, path, value, customizer) {
    customizer = typeof customizer == 'function' ? customizer : undefined;
    return object == null ? object : baseSet(object, path, value, customizer);
  }

  /**
   * A specialized version of `_.shuffle` for arrays.
   *
   * @private
   * @param {Array} array The array to shuffle.
   * @returns {Array} Returns the new shuffled array.
   */
  function arrayShuffle(array) {
    return shuffleSelf(copyArray(array));
  }

  /**
   * The base implementation of `_.shuffle`.
   *
   * @private
   * @param {Array|Object} collection The collection to shuffle.
   * @returns {Array} Returns the new shuffled array.
   */
  function baseShuffle(collection) {
    return shuffleSelf(values(collection));
  }

  /**
   * Creates an array of shuffled values, using a version of the
   * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to shuffle.
   * @returns {Array} Returns the new shuffled array.
   * @example
   *
   * _.shuffle([1, 2, 3, 4]);
   * // => [4, 1, 3, 2]
   */
  function shuffle(collection) {
    var func = isArray(collection) ? arrayShuffle : baseShuffle;
    return func(collection);
  }

  /** `Object#toString` result references. */
  var mapTag$9 = '[object Map]',
      setTag$9 = '[object Set]';

  /**
   * Gets the size of `collection` by returning its length for array-like
   * values or the number of own enumerable string keyed properties for objects.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object|string} collection The collection to inspect.
   * @returns {number} Returns the collection size.
   * @example
   *
   * _.size([1, 2, 3]);
   * // => 3
   *
   * _.size({ 'a': 1, 'b': 2 });
   * // => 2
   *
   * _.size('pebbles');
   * // => 7
   */
  function size(collection) {
    if (collection == null) {
      return 0;
    }
    if (isArrayLike(collection)) {
      return isString(collection) ? stringSize(collection) : collection.length;
    }
    var tag = getTag$1(collection);
    if (tag == mapTag$9 || tag == setTag$9) {
      return collection.size;
    }
    return baseKeys(collection).length;
  }

  /**
   * Creates a slice of `array` from `start` up to, but not including, `end`.
   *
   * **Note:** This method is used instead of
   * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
   * returned.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function slice(array, start, end) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return [];
    }
    if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
      start = 0;
      end = length;
    }
    else {
      start = start == null ? 0 : toInteger(start);
      end = end === undefined ? length : toInteger(end);
    }
    return baseSlice(array, start, end);
  }

  /**
   * Converts `string` to
   * [snake case](https://en.wikipedia.org/wiki/Snake_case).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the snake cased string.
   * @example
   *
   * _.snakeCase('Foo Bar');
   * // => 'foo_bar'
   *
   * _.snakeCase('fooBar');
   * // => 'foo_bar'
   *
   * _.snakeCase('--FOO-BAR--');
   * // => 'foo_bar'
   */
  var snakeCase = createCompounder(function(result, word, index) {
    return result + (index ? '_' : '') + word.toLowerCase();
  });

  /**
   * The base implementation of `_.some` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function baseSome(collection, predicate) {
    var result;

    baseEach(collection, function(value, index, collection) {
      result = predicate(value, index, collection);
      return !result;
    });
    return !!result;
  }

  /**
   * Checks if `predicate` returns truthy for **any** element of `collection`.
   * Iteration is stopped once `predicate` returns truthy. The predicate is
   * invoked with three arguments: (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   * @example
   *
   * _.some([null, 0, 'yes', false], Boolean);
   * // => true
   *
   * var users = [
   *   { 'user': 'barney', 'active': true },
   *   { 'user': 'fred',   'active': false }
   * ];
   *
   * // The `_.matches` iteratee shorthand.
   * _.some(users, { 'user': 'barney', 'active': false });
   * // => false
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.some(users, ['active', false]);
   * // => true
   *
   * // The `_.property` iteratee shorthand.
   * _.some(users, 'active');
   * // => true
   */
  function some(collection, predicate, guard) {
    var func = isArray(collection) ? arraySome : baseSome;
    if (guard && isIterateeCall(collection, predicate, guard)) {
      predicate = undefined;
    }
    return func(collection, baseIteratee(predicate, 3));
  }

  /**
   * Creates an array of elements, sorted in ascending order by the results of
   * running each element in a collection thru each iteratee. This method
   * performs a stable sort, that is, it preserves the original sort order of
   * equal elements. The iteratees are invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {...(Function|Function[])} [iteratees=[_.identity]]
   *  The iteratees to sort by.
   * @returns {Array} Returns the new sorted array.
   * @example
   *
   * var users = [
   *   { 'user': 'fred',   'age': 48 },
   *   { 'user': 'barney', 'age': 36 },
   *   { 'user': 'fred',   'age': 40 },
   *   { 'user': 'barney', 'age': 34 }
   * ];
   *
   * _.sortBy(users, [function(o) { return o.user; }]);
   * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
   *
   * _.sortBy(users, ['user', 'age']);
   * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
   */
  var sortBy = baseRest(function(collection, iteratees) {
    if (collection == null) {
      return [];
    }
    var length = iteratees.length;
    if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
      iteratees = [];
    } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
      iteratees = [iteratees[0]];
    }
    return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
  });

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH$2 = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH$2 - 1;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeFloor$3 = Math.floor,
      nativeMin$a = Math.min;

  /**
   * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
   * which invokes `iteratee` for `value` and each element of `array` to compute
   * their sort ranking. The iteratee is invoked with one argument; (value).
   *
   * @private
   * @param {Array} array The sorted array to inspect.
   * @param {*} value The value to evaluate.
   * @param {Function} iteratee The iteratee invoked per element.
   * @param {boolean} [retHighest] Specify returning the highest qualified index.
   * @returns {number} Returns the index at which `value` should be inserted
   *  into `array`.
   */
  function baseSortedIndexBy(array, value, iteratee, retHighest) {
    value = iteratee(value);

    var low = 0,
        high = array == null ? 0 : array.length,
        valIsNaN = value !== value,
        valIsNull = value === null,
        valIsSymbol = isSymbol(value),
        valIsUndefined = value === undefined;

    while (low < high) {
      var mid = nativeFloor$3((low + high) / 2),
          computed = iteratee(array[mid]),
          othIsDefined = computed !== undefined,
          othIsNull = computed === null,
          othIsReflexive = computed === computed,
          othIsSymbol = isSymbol(computed);

      if (valIsNaN) {
        var setLow = retHighest || othIsReflexive;
      } else if (valIsUndefined) {
        setLow = othIsReflexive && (retHighest || othIsDefined);
      } else if (valIsNull) {
        setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
      } else if (valIsSymbol) {
        setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
      } else if (othIsNull || othIsSymbol) {
        setLow = false;
      } else {
        setLow = retHighest ? (computed <= value) : (computed < value);
      }
      if (setLow) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    return nativeMin$a(high, MAX_ARRAY_INDEX);
  }

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH$3 = 4294967295,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH$3 >>> 1;

  /**
   * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
   * performs a binary search of `array` to determine the index at which `value`
   * should be inserted into `array` in order to maintain its sort order.
   *
   * @private
   * @param {Array} array The sorted array to inspect.
   * @param {*} value The value to evaluate.
   * @param {boolean} [retHighest] Specify returning the highest qualified index.
   * @returns {number} Returns the index at which `value` should be inserted
   *  into `array`.
   */
  function baseSortedIndex(array, value, retHighest) {
    var low = 0,
        high = array == null ? low : array.length;

    if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
      while (low < high) {
        var mid = (low + high) >>> 1,
            computed = array[mid];

        if (computed !== null && !isSymbol(computed) &&
            (retHighest ? (computed <= value) : (computed < value))) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return high;
    }
    return baseSortedIndexBy(array, value, identity, retHighest);
  }

  /**
   * Uses a binary search to determine the lowest index at which `value`
   * should be inserted into `array` in order to maintain its sort order.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The sorted array to inspect.
   * @param {*} value The value to evaluate.
   * @returns {number} Returns the index at which `value` should be inserted
   *  into `array`.
   * @example
   *
   * _.sortedIndex([30, 50], 40);
   * // => 1
   */
  function sortedIndex(array, value) {
    return baseSortedIndex(array, value);
  }

  /**
   * This method is like `_.sortedIndex` except that it accepts `iteratee`
   * which is invoked for `value` and each element of `array` to compute their
   * sort ranking. The iteratee is invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The sorted array to inspect.
   * @param {*} value The value to evaluate.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {number} Returns the index at which `value` should be inserted
   *  into `array`.
   * @example
   *
   * var objects = [{ 'x': 4 }, { 'x': 5 }];
   *
   * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
   * // => 0
   *
   * // The `_.property` iteratee shorthand.
   * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
   * // => 0
   */
  function sortedIndexBy(array, value, iteratee) {
    return baseSortedIndexBy(array, value, baseIteratee(iteratee, 2));
  }

  /**
   * This method is like `_.indexOf` except that it performs a binary
   * search on a sorted `array`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   * @example
   *
   * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
   * // => 1
   */
  function sortedIndexOf(array, value) {
    var length = array == null ? 0 : array.length;
    if (length) {
      var index = baseSortedIndex(array, value);
      if (index < length && eq(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * This method is like `_.sortedIndex` except that it returns the highest
   * index at which `value` should be inserted into `array` in order to
   * maintain its sort order.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The sorted array to inspect.
   * @param {*} value The value to evaluate.
   * @returns {number} Returns the index at which `value` should be inserted
   *  into `array`.
   * @example
   *
   * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
   * // => 4
   */
  function sortedLastIndex(array, value) {
    return baseSortedIndex(array, value, true);
  }

  /**
   * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
   * which is invoked for `value` and each element of `array` to compute their
   * sort ranking. The iteratee is invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The sorted array to inspect.
   * @param {*} value The value to evaluate.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {number} Returns the index at which `value` should be inserted
   *  into `array`.
   * @example
   *
   * var objects = [{ 'x': 4 }, { 'x': 5 }];
   *
   * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
   * // => 1
   *
   * // The `_.property` iteratee shorthand.
   * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
   * // => 1
   */
  function sortedLastIndexBy(array, value, iteratee) {
    return baseSortedIndexBy(array, value, baseIteratee(iteratee, 2), true);
  }

  /**
   * This method is like `_.lastIndexOf` except that it performs a binary
   * search on a sorted `array`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   * @example
   *
   * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
   * // => 3
   */
  function sortedLastIndexOf(array, value) {
    var length = array == null ? 0 : array.length;
    if (length) {
      var index = baseSortedIndex(array, value, true) - 1;
      if (eq(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @returns {Array} Returns the new duplicate free array.
   */
  function baseSortedUniq(array, iteratee) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;

      if (!index || !eq(computed, seen)) {
        var seen = computed;
        result[resIndex++] = value === 0 ? 0 : value;
      }
    }
    return result;
  }

  /**
   * This method is like `_.uniq` except that it's designed and optimized
   * for sorted arrays.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @returns {Array} Returns the new duplicate free array.
   * @example
   *
   * _.sortedUniq([1, 1, 2]);
   * // => [1, 2]
   */
  function sortedUniq(array) {
    return (array && array.length)
      ? baseSortedUniq(array)
      : [];
  }

  /**
   * This method is like `_.uniqBy` except that it's designed and optimized
   * for sorted arrays.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @returns {Array} Returns the new duplicate free array.
   * @example
   *
   * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
   * // => [1.1, 2.3]
   */
  function sortedUniqBy(array, iteratee) {
    return (array && array.length)
      ? baseSortedUniq(array, baseIteratee(iteratee, 2))
      : [];
  }

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH$4 = 4294967295;

  /**
   * Splits `string` by `separator`.
   *
   * **Note:** This method is based on
   * [`String#split`](https://mdn.io/String/split).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to split.
   * @param {RegExp|string} separator The separator pattern to split by.
   * @param {number} [limit] The length to truncate results to.
   * @returns {Array} Returns the string segments.
   * @example
   *
   * _.split('a-b-c', '-', 2);
   * // => ['a', 'b']
   */
  function split(string, separator, limit) {
    if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
      separator = limit = undefined;
    }
    limit = limit === undefined ? MAX_ARRAY_LENGTH$4 : limit >>> 0;
    if (!limit) {
      return [];
    }
    string = toString(string);
    if (string && (
          typeof separator == 'string' ||
          (separator != null && !isRegExp(separator))
        )) {
      separator = baseToString(separator);
      if (!separator && hasUnicode(string)) {
        return castSlice(stringToArray(string), 0, limit);
      }
    }
    return string.split(separator, limit);
  }

  /** Error message constants. */
  var FUNC_ERROR_TEXT$a = 'Expected a function';

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$d = Math.max;

  /**
   * Creates a function that invokes `func` with the `this` binding of the
   * create function and an array of arguments much like
   * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
   *
   * **Note:** This method is based on the
   * [spread operator](https://mdn.io/spread_operator).
   *
   * @static
   * @memberOf _
   * @since 3.2.0
   * @category Function
   * @param {Function} func The function to spread arguments over.
   * @param {number} [start=0] The start position of the spread.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var say = _.spread(function(who, what) {
   *   return who + ' says ' + what;
   * });
   *
   * say(['fred', 'hello']);
   * // => 'fred says hello'
   *
   * var numbers = Promise.all([
   *   Promise.resolve(40),
   *   Promise.resolve(36)
   * ]);
   *
   * numbers.then(_.spread(function(x, y) {
   *   return x + y;
   * }));
   * // => a Promise of 76
   */
  function spread(func, start) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$a);
    }
    start = start == null ? 0 : nativeMax$d(toInteger(start), 0);
    return baseRest(function(args) {
      var array = args[start],
          otherArgs = castSlice(args, 0, start);

      if (array) {
        arrayPush(otherArgs, array);
      }
      return apply(func, this, otherArgs);
    });
  }

  /**
   * Converts `string` to
   * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
   *
   * @static
   * @memberOf _
   * @since 3.1.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the start cased string.
   * @example
   *
   * _.startCase('--foo-bar--');
   * // => 'Foo Bar'
   *
   * _.startCase('fooBar');
   * // => 'Foo Bar'
   *
   * _.startCase('__FOO_BAR__');
   * // => 'FOO BAR'
   */
  var startCase = createCompounder(function(result, word, index) {
    return result + (index ? ' ' : '') + upperFirst(word);
  });

  /**
   * Checks if `string` starts with the given target string.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to inspect.
   * @param {string} [target] The string to search for.
   * @param {number} [position=0] The position to search from.
   * @returns {boolean} Returns `true` if `string` starts with `target`,
   *  else `false`.
   * @example
   *
   * _.startsWith('abc', 'a');
   * // => true
   *
   * _.startsWith('abc', 'b');
   * // => false
   *
   * _.startsWith('abc', 'b', 1);
   * // => true
   */
  function startsWith(string, target, position) {
    string = toString(string);
    position = position == null
      ? 0
      : baseClamp(toInteger(position), 0, string.length);

    target = baseToString(target);
    return string.slice(position, position + target.length) == target;
  }

  /**
   * This method returns a new empty object.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Object} Returns the new empty object.
   * @example
   *
   * var objects = _.times(2, _.stubObject);
   *
   * console.log(objects);
   * // => [{}, {}]
   *
   * console.log(objects[0] === objects[1]);
   * // => false
   */
  function stubObject() {
    return {};
  }

  /**
   * This method returns an empty string.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {string} Returns the empty string.
   * @example
   *
   * _.times(2, _.stubString);
   * // => ['', '']
   */
  function stubString() {
    return '';
  }

  /**
   * This method returns `true`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `true`.
   * @example
   *
   * _.times(2, _.stubTrue);
   * // => [true, true]
   */
  function stubTrue() {
    return true;
  }

  /**
   * Subtract two numbers.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Math
   * @param {number} minuend The first number in a subtraction.
   * @param {number} subtrahend The second number in a subtraction.
   * @returns {number} Returns the difference.
   * @example
   *
   * _.subtract(6, 4);
   * // => 2
   */
  var subtract = createMathOperation(function(minuend, subtrahend) {
    return minuend - subtrahend;
  }, 0);

  /**
   * Computes the sum of the values in `array`.
   *
   * @static
   * @memberOf _
   * @since 3.4.0
   * @category Math
   * @param {Array} array The array to iterate over.
   * @returns {number} Returns the sum.
   * @example
   *
   * _.sum([4, 2, 8, 6]);
   * // => 20
   */
  function sum(array) {
    return (array && array.length)
      ? baseSum(array, identity)
      : 0;
  }

  /**
   * This method is like `_.sum` except that it accepts `iteratee` which is
   * invoked for each element in `array` to generate the value to be summed.
   * The iteratee is invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Math
   * @param {Array} array The array to iterate over.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {number} Returns the sum.
   * @example
   *
   * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
   *
   * _.sumBy(objects, function(o) { return o.n; });
   * // => 20
   *
   * // The `_.property` iteratee shorthand.
   * _.sumBy(objects, 'n');
   * // => 20
   */
  function sumBy(array, iteratee) {
    return (array && array.length)
      ? baseSum(array, baseIteratee(iteratee, 2))
      : 0;
  }

  /**
   * Gets all but the first element of `array`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to query.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.tail([1, 2, 3]);
   * // => [2, 3]
   */
  function tail(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseSlice(array, 1, length) : [];
  }

  /**
   * Creates a slice of `array` with `n` elements taken from the beginning.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to query.
   * @param {number} [n=1] The number of elements to take.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.take([1, 2, 3]);
   * // => [1]
   *
   * _.take([1, 2, 3], 2);
   * // => [1, 2]
   *
   * _.take([1, 2, 3], 5);
   * // => [1, 2, 3]
   *
   * _.take([1, 2, 3], 0);
   * // => []
   */
  function take(array, n, guard) {
    if (!(array && array.length)) {
      return [];
    }
    n = (guard || n === undefined) ? 1 : toInteger(n);
    return baseSlice(array, 0, n < 0 ? 0 : n);
  }

  /**
   * Creates a slice of `array` with `n` elements taken from the end.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to query.
   * @param {number} [n=1] The number of elements to take.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.takeRight([1, 2, 3]);
   * // => [3]
   *
   * _.takeRight([1, 2, 3], 2);
   * // => [2, 3]
   *
   * _.takeRight([1, 2, 3], 5);
   * // => [1, 2, 3]
   *
   * _.takeRight([1, 2, 3], 0);
   * // => []
   */
  function takeRight(array, n, guard) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return [];
    }
    n = (guard || n === undefined) ? 1 : toInteger(n);
    n = length - n;
    return baseSlice(array, n < 0 ? 0 : n, length);
  }

  /**
   * Creates a slice of `array` with elements taken from the end. Elements are
   * taken until `predicate` returns falsey. The predicate is invoked with
   * three arguments: (value, index, array).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to query.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': true },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': false }
   * ];
   *
   * _.takeRightWhile(users, function(o) { return !o.active; });
   * // => objects for ['fred', 'pebbles']
   *
   * // The `_.matches` iteratee shorthand.
   * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
   * // => objects for ['pebbles']
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.takeRightWhile(users, ['active', false]);
   * // => objects for ['fred', 'pebbles']
   *
   * // The `_.property` iteratee shorthand.
   * _.takeRightWhile(users, 'active');
   * // => []
   */
  function takeRightWhile(array, predicate) {
    return (array && array.length)
      ? baseWhile(array, baseIteratee(predicate, 3), false, true)
      : [];
  }

  /**
   * Creates a slice of `array` with elements taken from the beginning. Elements
   * are taken until `predicate` returns falsey. The predicate is invoked with
   * three arguments: (value, index, array).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to query.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * _.takeWhile(users, function(o) { return !o.active; });
   * // => objects for ['barney', 'fred']
   *
   * // The `_.matches` iteratee shorthand.
   * _.takeWhile(users, { 'user': 'barney', 'active': false });
   * // => objects for ['barney']
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.takeWhile(users, ['active', false]);
   * // => objects for ['barney', 'fred']
   *
   * // The `_.property` iteratee shorthand.
   * _.takeWhile(users, 'active');
   * // => []
   */
  function takeWhile(array, predicate) {
    return (array && array.length)
      ? baseWhile(array, baseIteratee(predicate, 3))
      : [];
  }

  /**
   * This method invokes `interceptor` and returns `value`. The interceptor
   * is invoked with one argument; (value). The purpose of this method is to
   * "tap into" a method chain sequence in order to modify intermediate results.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Seq
   * @param {*} value The value to provide to `interceptor`.
   * @param {Function} interceptor The function to invoke.
   * @returns {*} Returns `value`.
   * @example
   *
   * _([1, 2, 3])
   *  .tap(function(array) {
   *    // Mutate input array.
   *    array.pop();
   *  })
   *  .reverse()
   *  .value();
   * // => [2, 1]
   */
  function tap(value, interceptor) {
    interceptor(value);
    return value;
  }

  /** Used for built-in method references. */
  var objectProto$q = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$m = objectProto$q.hasOwnProperty;

  /**
   * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
   * of source objects to the destination object for all destination properties
   * that resolve to `undefined`.
   *
   * @private
   * @param {*} objValue The destination value.
   * @param {*} srcValue The source value.
   * @param {string} key The key of the property to assign.
   * @param {Object} object The parent object of `objValue`.
   * @returns {*} Returns the value to assign.
   */
  function customDefaultsAssignIn(objValue, srcValue, key, object) {
    if (objValue === undefined ||
        (eq(objValue, objectProto$q[key]) && !hasOwnProperty$m.call(object, key))) {
      return srcValue;
    }
    return objValue;
  }

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /** Used to match template delimiters. */
  var reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g;

  /** Used to match template delimiters. */
  var reEvaluate = /<%([\s\S]+?)%>/g;

  /**
   * By default, the template delimiters used by lodash are like those in
   * embedded Ruby (ERB) as well as ES2015 template strings. Change the
   * following template settings to use alternative delimiters.
   *
   * @static
   * @memberOf _
   * @type {Object}
   */
  var templateSettings = {

    /**
     * Used to detect `data` property values to be HTML-escaped.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'escape': reEscape,

    /**
     * Used to detect code to be evaluated.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'evaluate': reEvaluate,

    /**
     * Used to detect `data` property values to inject.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'interpolate': reInterpolate,

    /**
     * Used to reference the data object in the template text.
     *
     * @memberOf _.templateSettings
     * @type {string}
     */
    'variable': '',

    /**
     * Used to import variables into the compiled template.
     *
     * @memberOf _.templateSettings
     * @type {Object}
     */
    'imports': {

      /**
       * A reference to the `lodash` function.
       *
       * @memberOf _.templateSettings.imports
       * @type {Function}
       */
      '_': { 'escape': escape }
    }
  };

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used for built-in method references. */
  var objectProto$r = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$n = objectProto$r.hasOwnProperty;

  /**
   * Creates a compiled template function that can interpolate data properties
   * in "interpolate" delimiters, HTML-escape interpolated data properties in
   * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
   * properties may be accessed as free variables in the template. If a setting
   * object is given, it takes precedence over `_.templateSettings` values.
   *
   * **Note:** In the development build `_.template` utilizes
   * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
   * for easier debugging.
   *
   * For more information on precompiling templates see
   * [lodash's custom builds documentation](https://lodash.com/custom-builds).
   *
   * For more information on Chrome extension sandboxes see
   * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category String
   * @param {string} [string=''] The template string.
   * @param {Object} [options={}] The options object.
   * @param {RegExp} [options.escape=_.templateSettings.escape]
   *  The HTML "escape" delimiter.
   * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
   *  The "evaluate" delimiter.
   * @param {Object} [options.imports=_.templateSettings.imports]
   *  An object to import into the template as free variables.
   * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
   *  The "interpolate" delimiter.
   * @param {string} [options.sourceURL='templateSources[n]']
   *  The sourceURL of the compiled template.
   * @param {string} [options.variable='obj']
   *  The data object variable name.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Function} Returns the compiled template function.
   * @example
   *
   * // Use the "interpolate" delimiter to create a compiled template.
   * var compiled = _.template('hello <%= user %>!');
   * compiled({ 'user': 'fred' });
   * // => 'hello fred!'
   *
   * // Use the HTML "escape" delimiter to escape data property values.
   * var compiled = _.template('<b><%- value %></b>');
   * compiled({ 'value': '<script>' });
   * // => '<b>&lt;script&gt;</b>'
   *
   * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
   * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
   * compiled({ 'users': ['fred', 'barney'] });
   * // => '<li>fred</li><li>barney</li>'
   *
   * // Use the internal `print` function in "evaluate" delimiters.
   * var compiled = _.template('<% print("hello " + user); %>!');
   * compiled({ 'user': 'barney' });
   * // => 'hello barney!'
   *
   * // Use the ES template literal delimiter as an "interpolate" delimiter.
   * // Disable support by replacing the "interpolate" delimiter.
   * var compiled = _.template('hello ${ user }!');
   * compiled({ 'user': 'pebbles' });
   * // => 'hello pebbles!'
   *
   * // Use backslashes to treat delimiters as plain text.
   * var compiled = _.template('<%= "\\<%- value %\\>" %>');
   * compiled({ 'value': 'ignored' });
   * // => '<%- value %>'
   *
   * // Use the `imports` option to import `jQuery` as `jq`.
   * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
   * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
   * compiled({ 'users': ['fred', 'barney'] });
   * // => '<li>fred</li><li>barney</li>'
   *
   * // Use the `sourceURL` option to specify a custom sourceURL for the template.
   * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
   * compiled(data);
   * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
   *
   * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
   * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
   * compiled.source;
   * // => function(data) {
   * //   var __t, __p = '';
   * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
   * //   return __p;
   * // }
   *
   * // Use custom template delimiters.
   * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
   * var compiled = _.template('hello {{ user }}!');
   * compiled({ 'user': 'mustache' });
   * // => 'hello mustache!'
   *
   * // Use the `source` property to inline compiled templates for meaningful
   * // line numbers in error messages and stack traces.
   * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
   *   var JST = {\
   *     "main": ' + _.template(mainText).source + '\
   *   };\
   * ');
   */
  function template(string, options, guard) {
    // Based on John Resig's `tmpl` implementation
    // (http://ejohn.org/blog/javascript-micro-templating/)
    // and Laura Doktorova's doT.js (https://github.com/olado/doT).
    var settings = templateSettings.imports._.templateSettings || templateSettings;

    if (guard && isIterateeCall(string, options, guard)) {
      options = undefined;
    }
    string = toString(string);
    options = assignInWith({}, options, settings, customDefaultsAssignIn);

    var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
        importsKeys = keys(imports),
        importsValues = baseValues(imports, importsKeys);

    var isEscaping,
        isEvaluating,
        index = 0,
        interpolate = options.interpolate || reNoMatch,
        source = "__p += '";

    // Compile the regexp to match each delimiter.
    var reDelimiters = RegExp(
      (options.escape || reNoMatch).source + '|' +
      interpolate.source + '|' +
      (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
      (options.evaluate || reNoMatch).source + '|$'
    , 'g');

    // Use a sourceURL for easier debugging.
    // The sourceURL gets injected into the source that's eval-ed, so be careful
    // with lookup (in case of e.g. prototype pollution), and strip newlines if any.
    // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.
    var sourceURL = hasOwnProperty$n.call(options, 'sourceURL')
      ? ('//# sourceURL=' +
         (options.sourceURL + '').replace(/[\r\n]/g, ' ') +
         '\n')
      : '';

    string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
      interpolateValue || (interpolateValue = esTemplateValue);

      // Escape characters that can't be included in string literals.
      source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

      // Replace delimiters with snippets.
      if (escapeValue) {
        isEscaping = true;
        source += "' +\n__e(" + escapeValue + ") +\n'";
      }
      if (evaluateValue) {
        isEvaluating = true;
        source += "';\n" + evaluateValue + ";\n__p += '";
      }
      if (interpolateValue) {
        source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
      }
      index = offset + match.length;

      // The JS engine embedded in Adobe products needs `match` returned in
      // order to produce the correct `offset` value.
      return match;
    });

    source += "';\n";

    // If `variable` is not specified wrap a with-statement around the generated
    // code to add the data object to the top of the scope chain.
    // Like with sourceURL, we take care to not check the option's prototype,
    // as this configuration is a code injection vector.
    var variable = hasOwnProperty$n.call(options, 'variable') && options.variable;
    if (!variable) {
      source = 'with (obj) {\n' + source + '\n}\n';
    }
    // Cleanup code by stripping empty strings.
    source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
      .replace(reEmptyStringMiddle, '$1')
      .replace(reEmptyStringTrailing, '$1;');

    // Frame code as the function body.
    source = 'function(' + (variable || 'obj') + ') {\n' +
      (variable
        ? ''
        : 'obj || (obj = {});\n'
      ) +
      "var __t, __p = ''" +
      (isEscaping
         ? ', __e = _.escape'
         : ''
      ) +
      (isEvaluating
        ? ', __j = Array.prototype.join;\n' +
          "function print() { __p += __j.call(arguments, '') }\n"
        : ';\n'
      ) +
      source +
      'return __p\n}';

    var result = attempt(function() {
      return Function(importsKeys, sourceURL + 'return ' + source)
        .apply(undefined, importsValues);
    });

    // Provide the compiled function's source by its `toString` method or
    // the `source` property as a convenience for inlining compiled templates.
    result.source = source;
    if (isError(result)) {
      throw result;
    }
    return result;
  }

  /** Error message constants. */
  var FUNC_ERROR_TEXT$b = 'Expected a function';

  /**
   * Creates a throttled function that only invokes `func` at most once per
   * every `wait` milliseconds. The throttled function comes with a `cancel`
   * method to cancel delayed `func` invocations and a `flush` method to
   * immediately invoke them. Provide `options` to indicate whether `func`
   * should be invoked on the leading and/or trailing edge of the `wait`
   * timeout. The `func` is invoked with the last arguments provided to the
   * throttled function. Subsequent calls to the throttled function return the
   * result of the last `func` invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the throttled function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.throttle` and `_.debounce`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to throttle.
   * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=true]
   *  Specify invoking on the leading edge of the timeout.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new throttled function.
   * @example
   *
   * // Avoid excessively updating the position while scrolling.
   * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
   *
   * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
   * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
   * jQuery(element).on('click', throttled);
   *
   * // Cancel the trailing throttled invocation.
   * jQuery(window).on('popstate', throttled.cancel);
   */
  function throttle(func, wait, options) {
    var leading = true,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$b);
    }
    if (isObject(options)) {
      leading = 'leading' in options ? !!options.leading : leading;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    return debounce(func, wait, {
      'leading': leading,
      'maxWait': wait,
      'trailing': trailing
    });
  }

  /**
   * This method is like `_.tap` except that it returns the result of `interceptor`.
   * The purpose of this method is to "pass thru" values replacing intermediate
   * results in a method chain sequence.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Seq
   * @param {*} value The value to provide to `interceptor`.
   * @param {Function} interceptor The function to invoke.
   * @returns {*} Returns the result of `interceptor`.
   * @example
   *
   * _('  abc  ')
   *  .chain()
   *  .trim()
   *  .thru(function(value) {
   *    return [value];
   *  })
   *  .value();
   * // => ['abc']
   */
  function thru(value, interceptor) {
    return interceptor(value);
  }

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$4 = 9007199254740991;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH$5 = 4294967295;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMin$b = Math.min;

  /**
   * Invokes the iteratee `n` times, returning an array of the results of
   * each invocation. The iteratee is invoked with one argument; (index).
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   * @example
   *
   * _.times(3, String);
   * // => ['0', '1', '2']
   *
   *  _.times(4, _.constant(0));
   * // => [0, 0, 0, 0]
   */
  function times(n, iteratee) {
    n = toInteger(n);
    if (n < 1 || n > MAX_SAFE_INTEGER$4) {
      return [];
    }
    var index = MAX_ARRAY_LENGTH$5,
        length = nativeMin$b(n, MAX_ARRAY_LENGTH$5);

    iteratee = castFunction(iteratee);
    n -= MAX_ARRAY_LENGTH$5;

    var result = baseTimes(length, iteratee);
    while (++index < n) {
      iteratee(index);
    }
    return result;
  }

  /**
   * Enables the wrapper to be iterable.
   *
   * @name Symbol.iterator
   * @memberOf _
   * @since 4.0.0
   * @category Seq
   * @returns {Object} Returns the wrapper object.
   * @example
   *
   * var wrapped = _([1, 2]);
   *
   * wrapped[Symbol.iterator]() === wrapped;
   * // => true
   *
   * Array.from(wrapped);
   * // => [1, 2]
   */
  function wrapperToIterator() {
    return this;
  }

  /**
   * The base implementation of `wrapperValue` which returns the result of
   * performing a sequence of actions on the unwrapped `value`, where each
   * successive action is supplied the return value of the previous.
   *
   * @private
   * @param {*} value The unwrapped value.
   * @param {Array} actions Actions to perform to resolve the unwrapped value.
   * @returns {*} Returns the resolved value.
   */
  function baseWrapperValue(value, actions) {
    var result = value;
    if (result instanceof LazyWrapper) {
      result = result.value();
    }
    return arrayReduce(actions, function(result, action) {
      return action.func.apply(action.thisArg, arrayPush([result], action.args));
    }, result);
  }

  /**
   * Executes the chain sequence to resolve the unwrapped value.
   *
   * @name value
   * @memberOf _
   * @since 0.1.0
   * @alias toJSON, valueOf
   * @category Seq
   * @returns {*} Returns the resolved unwrapped value.
   * @example
   *
   * _([1, 2, 3]).value();
   * // => [1, 2, 3]
   */
  function wrapperValue() {
    return baseWrapperValue(this.__wrapped__, this.__actions__);
  }

  /**
   * Converts `string`, as a whole, to lower case just like
   * [String#toLowerCase](https://mdn.io/toLowerCase).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the lower cased string.
   * @example
   *
   * _.toLower('--Foo-Bar--');
   * // => '--foo-bar--'
   *
   * _.toLower('fooBar');
   * // => 'foobar'
   *
   * _.toLower('__FOO_BAR__');
   * // => '__foo_bar__'
   */
  function toLower(value) {
    return toString(value).toLowerCase();
  }

  /**
   * Converts `value` to a property path array.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Util
   * @param {*} value The value to convert.
   * @returns {Array} Returns the new property path array.
   * @example
   *
   * _.toPath('a.b.c');
   * // => ['a', 'b', 'c']
   *
   * _.toPath('a[0].b.c');
   * // => ['a', '0', 'b', 'c']
   */
  function toPath(value) {
    if (isArray(value)) {
      return arrayMap(value, toKey);
    }
    return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
  }

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$5 = 9007199254740991;

  /**
   * Converts `value` to a safe integer. A safe integer can be compared and
   * represented correctly.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toSafeInteger(3.2);
   * // => 3
   *
   * _.toSafeInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toSafeInteger(Infinity);
   * // => 9007199254740991
   *
   * _.toSafeInteger('3.2');
   * // => 3
   */
  function toSafeInteger(value) {
    return value
      ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER$5, MAX_SAFE_INTEGER$5)
      : (value === 0 ? value : 0);
  }

  /**
   * Converts `string`, as a whole, to upper case just like
   * [String#toUpperCase](https://mdn.io/toUpperCase).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the upper cased string.
   * @example
   *
   * _.toUpper('--foo-bar--');
   * // => '--FOO-BAR--'
   *
   * _.toUpper('fooBar');
   * // => 'FOOBAR'
   *
   * _.toUpper('__foo_bar__');
   * // => '__FOO_BAR__'
   */
  function toUpper(value) {
    return toString(value).toUpperCase();
  }

  /**
   * An alternative to `_.reduce`; this method transforms `object` to a new
   * `accumulator` object which is the result of running each of its own
   * enumerable string keyed properties thru `iteratee`, with each invocation
   * potentially mutating the `accumulator` object. If `accumulator` is not
   * provided, a new object with the same `[[Prototype]]` will be used. The
   * iteratee is invoked with four arguments: (accumulator, value, key, object).
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @static
   * @memberOf _
   * @since 1.3.0
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [accumulator] The custom accumulator value.
   * @returns {*} Returns the accumulated value.
   * @example
   *
   * _.transform([2, 3, 4], function(result, n) {
   *   result.push(n *= n);
   *   return n % 2 == 0;
   * }, []);
   * // => [4, 9]
   *
   * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
   *   (result[value] || (result[value] = [])).push(key);
   * }, {});
   * // => { '1': ['a', 'c'], '2': ['b'] }
   */
  function transform(object, iteratee, accumulator) {
    var isArr = isArray(object),
        isArrLike = isArr || isBuffer(object) || isTypedArray(object);

    iteratee = baseIteratee(iteratee, 4);
    if (accumulator == null) {
      var Ctor = object && object.constructor;
      if (isArrLike) {
        accumulator = isArr ? new Ctor : [];
      }
      else if (isObject(object)) {
        accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
      }
      else {
        accumulator = {};
      }
    }
    (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
      return iteratee(accumulator, value, index, object);
    });
    return accumulator;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /** Used to match leading and trailing whitespace. */
  var reTrim$1 = /^\s+|\s+$/g;

  /**
   * Removes leading and trailing whitespace or specified characters from `string`.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to trim.
   * @param {string} [chars=whitespace] The characters to trim.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {string} Returns the trimmed string.
   * @example
   *
   * _.trim('  abc  ');
   * // => 'abc'
   *
   * _.trim('-_-abc-_-', '_-');
   * // => 'abc'
   *
   * _.map(['  foo  ', '  bar  '], _.trim);
   * // => ['foo', 'bar']
   */
  function trim(string, chars, guard) {
    string = toString(string);
    if (string && (guard || chars === undefined)) {
      return string.replace(reTrim$1, '');
    }
    if (!string || !(chars = baseToString(chars))) {
      return string;
    }
    var strSymbols = stringToArray(string),
        chrSymbols = stringToArray(chars),
        start = charsStartIndex(strSymbols, chrSymbols),
        end = charsEndIndex(strSymbols, chrSymbols) + 1;

    return castSlice(strSymbols, start, end).join('');
  }

  /** Used to match leading and trailing whitespace. */
  var reTrimEnd = /\s+$/;

  /**
   * Removes trailing whitespace or specified characters from `string`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to trim.
   * @param {string} [chars=whitespace] The characters to trim.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {string} Returns the trimmed string.
   * @example
   *
   * _.trimEnd('  abc  ');
   * // => '  abc'
   *
   * _.trimEnd('-_-abc-_-', '_-');
   * // => '-_-abc'
   */
  function trimEnd(string, chars, guard) {
    string = toString(string);
    if (string && (guard || chars === undefined)) {
      return string.replace(reTrimEnd, '');
    }
    if (!string || !(chars = baseToString(chars))) {
      return string;
    }
    var strSymbols = stringToArray(string),
        end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

    return castSlice(strSymbols, 0, end).join('');
  }

  /** Used to match leading and trailing whitespace. */
  var reTrimStart$1 = /^\s+/;

  /**
   * Removes leading whitespace or specified characters from `string`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to trim.
   * @param {string} [chars=whitespace] The characters to trim.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {string} Returns the trimmed string.
   * @example
   *
   * _.trimStart('  abc  ');
   * // => 'abc  '
   *
   * _.trimStart('-_-abc-_-', '_-');
   * // => 'abc-_-'
   */
  function trimStart(string, chars, guard) {
    string = toString(string);
    if (string && (guard || chars === undefined)) {
      return string.replace(reTrimStart$1, '');
    }
    if (!string || !(chars = baseToString(chars))) {
      return string;
    }
    var strSymbols = stringToArray(string),
        start = charsStartIndex(strSymbols, stringToArray(chars));

    return castSlice(strSymbols, start).join('');
  }

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags$1 = /\w*$/;

  /**
   * Truncates `string` if it's longer than the given maximum string length.
   * The last characters of the truncated string are replaced with the omission
   * string which defaults to "...".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to truncate.
   * @param {Object} [options={}] The options object.
   * @param {number} [options.length=30] The maximum string length.
   * @param {string} [options.omission='...'] The string to indicate text is omitted.
   * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
   * @returns {string} Returns the truncated string.
   * @example
   *
   * _.truncate('hi-diddly-ho there, neighborino');
   * // => 'hi-diddly-ho there, neighbo...'
   *
   * _.truncate('hi-diddly-ho there, neighborino', {
   *   'length': 24,
   *   'separator': ' '
   * });
   * // => 'hi-diddly-ho there,...'
   *
   * _.truncate('hi-diddly-ho there, neighborino', {
   *   'length': 24,
   *   'separator': /,? +/
   * });
   * // => 'hi-diddly-ho there...'
   *
   * _.truncate('hi-diddly-ho there, neighborino', {
   *   'omission': ' [...]'
   * });
   * // => 'hi-diddly-ho there, neig [...]'
   */
  function truncate(string, options) {
    var length = DEFAULT_TRUNC_LENGTH,
        omission = DEFAULT_TRUNC_OMISSION;

    if (isObject(options)) {
      var separator = 'separator' in options ? options.separator : separator;
      length = 'length' in options ? toInteger(options.length) : length;
      omission = 'omission' in options ? baseToString(options.omission) : omission;
    }
    string = toString(string);

    var strLength = string.length;
    if (hasUnicode(string)) {
      var strSymbols = stringToArray(string);
      strLength = strSymbols.length;
    }
    if (length >= strLength) {
      return string;
    }
    var end = length - stringSize(omission);
    if (end < 1) {
      return omission;
    }
    var result = strSymbols
      ? castSlice(strSymbols, 0, end).join('')
      : string.slice(0, end);

    if (separator === undefined) {
      return result + omission;
    }
    if (strSymbols) {
      end += (result.length - end);
    }
    if (isRegExp(separator)) {
      if (string.slice(end).search(separator)) {
        var match,
            substring = result;

        if (!separator.global) {
          separator = RegExp(separator.source, toString(reFlags$1.exec(separator)) + 'g');
        }
        separator.lastIndex = 0;
        while ((match = separator.exec(substring))) {
          var newEnd = match.index;
        }
        result = result.slice(0, newEnd === undefined ? end : newEnd);
      }
    } else if (string.indexOf(baseToString(separator), end) != end) {
      var index = result.lastIndexOf(separator);
      if (index > -1) {
        result = result.slice(0, index);
      }
    }
    return result + omission;
  }

  /**
   * Creates a function that accepts up to one argument, ignoring any
   * additional arguments.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Function
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   * @example
   *
   * _.map(['6', '8', '10'], _.unary(parseInt));
   * // => [6, 8, 10]
   */
  function unary(func) {
    return ary(func, 1);
  }

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source);

  /**
   * The inverse of `_.escape`; this method converts the HTML entities
   * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
   * their corresponding characters.
   *
   * **Note:** No other HTML entities are unescaped. To unescape additional
   * HTML entities use a third-party library like [_he_](https://mths.be/he).
   *
   * @static
   * @memberOf _
   * @since 0.6.0
   * @category String
   * @param {string} [string=''] The string to unescape.
   * @returns {string} Returns the unescaped string.
   * @example
   *
   * _.unescape('fred, barney, &amp; pebbles');
   * // => 'fred, barney, & pebbles'
   */
  function unescape$1(string) {
    string = toString(string);
    return (string && reHasEscapedHtml.test(string))
      ? string.replace(reEscapedHtml, unescapeHtmlChar)
      : string;
  }

  /** Used as references for various `Number` constants. */
  var INFINITY$5 = 1 / 0;

  /**
   * Creates a set object of `values`.
   *
   * @private
   * @param {Array} values The values to add to the set.
   * @returns {Object} Returns the new set.
   */
  var createSet = !(Set$1 && (1 / setToArray(new Set$1([,-0]))[1]) == INFINITY$5) ? noop : function(values) {
    return new Set$1(values);
  };

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE$2 = 200;

  /**
   * The base implementation of `_.uniqBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new duplicate free array.
   */
  function baseUniq(array, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        length = array.length,
        isCommon = true,
        result = [],
        seen = result;

    if (comparator) {
      isCommon = false;
      includes = arrayIncludesWith;
    }
    else if (length >= LARGE_ARRAY_SIZE$2) {
      var set = iteratee ? null : createSet(array);
      if (set) {
        return setToArray(set);
      }
      isCommon = false;
      includes = cacheHas;
      seen = new SetCache;
    }
    else {
      seen = iteratee ? [] : result;
    }
    outer:
    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;

      value = (comparator || value !== 0) ? value : 0;
      if (isCommon && computed === computed) {
        var seenIndex = seen.length;
        while (seenIndex--) {
          if (seen[seenIndex] === computed) {
            continue outer;
          }
        }
        if (iteratee) {
          seen.push(computed);
        }
        result.push(value);
      }
      else if (!includes(seen, computed, comparator)) {
        if (seen !== result) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
    return result;
  }

  /**
   * Creates an array of unique values, in order, from all given arrays using
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @returns {Array} Returns the new array of combined values.
   * @example
   *
   * _.union([2], [1, 2]);
   * // => [2, 1]
   */
  var union = baseRest(function(arrays) {
    return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
  });

  /**
   * This method is like `_.union` except that it accepts `iteratee` which is
   * invoked for each element of each `arrays` to generate the criterion by
   * which uniqueness is computed. Result values are chosen from the first
   * array in which the value occurs. The iteratee is invoked with one argument:
   * (value).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {Array} Returns the new array of combined values.
   * @example
   *
   * _.unionBy([2.1], [1.2, 2.3], Math.floor);
   * // => [2.1, 1.2]
   *
   * // The `_.property` iteratee shorthand.
   * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
   * // => [{ 'x': 1 }, { 'x': 2 }]
   */
  var unionBy = baseRest(function(arrays) {
    var iteratee = last(arrays);
    if (isArrayLikeObject(iteratee)) {
      iteratee = undefined;
    }
    return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2));
  });

  /**
   * This method is like `_.union` except that it accepts `comparator` which
   * is invoked to compare elements of `arrays`. Result values are chosen from
   * the first array in which the value occurs. The comparator is invoked
   * with two arguments: (arrVal, othVal).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of combined values.
   * @example
   *
   * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
   * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
   *
   * _.unionWith(objects, others, _.isEqual);
   * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
   */
  var unionWith = baseRest(function(arrays) {
    var comparator = last(arrays);
    comparator = typeof comparator == 'function' ? comparator : undefined;
    return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
  });

  /**
   * Creates a duplicate-free version of an array, using
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons, in which only the first occurrence of each element
   * is kept. The order of result values is determined by the order they occur
   * in the array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @returns {Array} Returns the new duplicate free array.
   * @example
   *
   * _.uniq([2, 1, 2]);
   * // => [2, 1]
   */
  function uniq(array) {
    return (array && array.length) ? baseUniq(array) : [];
  }

  /**
   * This method is like `_.uniq` except that it accepts `iteratee` which is
   * invoked for each element in `array` to generate the criterion by which
   * uniqueness is computed. The order of result values is determined by the
   * order they occur in the array. The iteratee is invoked with one argument:
   * (value).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {Array} Returns the new duplicate free array.
   * @example
   *
   * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
   * // => [2.1, 1.2]
   *
   * // The `_.property` iteratee shorthand.
   * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
   * // => [{ 'x': 1 }, { 'x': 2 }]
   */
  function uniqBy(array, iteratee) {
    return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];
  }

  /**
   * This method is like `_.uniq` except that it accepts `comparator` which
   * is invoked to compare elements of `array`. The order of result values is
   * determined by the order they occur in the array.The comparator is invoked
   * with two arguments: (arrVal, othVal).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new duplicate free array.
   * @example
   *
   * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
   *
   * _.uniqWith(objects, _.isEqual);
   * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
   */
  function uniqWith(array, comparator) {
    comparator = typeof comparator == 'function' ? comparator : undefined;
    return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
  }

  /** Used to generate unique IDs. */
  var idCounter = 0;

  /**
   * Generates a unique ID. If `prefix` is given, the ID is appended to it.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {string} [prefix=''] The value to prefix the ID with.
   * @returns {string} Returns the unique ID.
   * @example
   *
   * _.uniqueId('contact_');
   * // => 'contact_104'
   *
   * _.uniqueId();
   * // => '105'
   */
  function uniqueId(prefix) {
    var id = ++idCounter;
    return toString(prefix) + id;
  }

  /**
   * Removes the property at `path` of `object`.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to unset.
   * @returns {boolean} Returns `true` if the property is deleted, else `false`.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 7 } }] };
   * _.unset(object, 'a[0].b.c');
   * // => true
   *
   * console.log(object);
   * // => { 'a': [{ 'b': {} }] };
   *
   * _.unset(object, ['a', '0', 'b', 'c']);
   * // => true
   *
   * console.log(object);
   * // => { 'a': [{ 'b': {} }] };
   */
  function unset(object, path) {
    return object == null ? true : baseUnset(object, path);
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$e = Math.max;

  /**
   * This method is like `_.zip` except that it accepts an array of grouped
   * elements and creates an array regrouping the elements to their pre-zip
   * configuration.
   *
   * @static
   * @memberOf _
   * @since 1.2.0
   * @category Array
   * @param {Array} array The array of grouped elements to process.
   * @returns {Array} Returns the new array of regrouped elements.
   * @example
   *
   * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
   * // => [['a', 1, true], ['b', 2, false]]
   *
   * _.unzip(zipped);
   * // => [['a', 'b'], [1, 2], [true, false]]
   */
  function unzip(array) {
    if (!(array && array.length)) {
      return [];
    }
    var length = 0;
    array = arrayFilter(array, function(group) {
      if (isArrayLikeObject(group)) {
        length = nativeMax$e(group.length, length);
        return true;
      }
    });
    return baseTimes(length, function(index) {
      return arrayMap(array, baseProperty(index));
    });
  }

  /**
   * This method is like `_.unzip` except that it accepts `iteratee` to specify
   * how regrouped values should be combined. The iteratee is invoked with the
   * elements of each group: (...group).
   *
   * @static
   * @memberOf _
   * @since 3.8.0
   * @category Array
   * @param {Array} array The array of grouped elements to process.
   * @param {Function} [iteratee=_.identity] The function to combine
   *  regrouped values.
   * @returns {Array} Returns the new array of regrouped elements.
   * @example
   *
   * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
   * // => [[1, 10, 100], [2, 20, 200]]
   *
   * _.unzipWith(zipped, _.add);
   * // => [3, 30, 300]
   */
  function unzipWith(array, iteratee) {
    if (!(array && array.length)) {
      return [];
    }
    var result = unzip(array);
    if (iteratee == null) {
      return result;
    }
    return arrayMap(result, function(group) {
      return apply(iteratee, undefined, group);
    });
  }

  /**
   * The base implementation of `_.update`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to update.
   * @param {Function} updater The function to produce the updated value.
   * @param {Function} [customizer] The function to customize path creation.
   * @returns {Object} Returns `object`.
   */
  function baseUpdate(object, path, updater, customizer) {
    return baseSet(object, path, updater(baseGet(object, path)), customizer);
  }

  /**
   * This method is like `_.set` except that accepts `updater` to produce the
   * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
   * is invoked with one argument: (value).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.6.0
   * @category Object
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {Function} updater The function to produce the updated value.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.update(object, 'a[0].b.c', function(n) { return n * n; });
   * console.log(object.a[0].b.c);
   * // => 9
   *
   * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
   * console.log(object.x[0].y.z);
   * // => 0
   */
  function update(object, path, updater) {
    return object == null ? object : baseUpdate(object, path, castFunction(updater));
  }

  /**
   * This method is like `_.update` except that it accepts `customizer` which is
   * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
   * path creation is handled by the method instead. The `customizer` is invoked
   * with three arguments: (nsValue, key, nsObject).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.6.0
   * @category Object
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {Function} updater The function to produce the updated value.
   * @param {Function} [customizer] The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = {};
   *
   * _.updateWith(object, '[0][1]', _.constant('a'), Object);
   * // => { '0': { '1': 'a' } }
   */
  function updateWith(object, path, updater, customizer) {
    customizer = typeof customizer == 'function' ? customizer : undefined;
    return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
  }

  /**
   * Converts `string`, as space separated words, to upper case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the upper cased string.
   * @example
   *
   * _.upperCase('--foo-bar');
   * // => 'FOO BAR'
   *
   * _.upperCase('fooBar');
   * // => 'FOO BAR'
   *
   * _.upperCase('__foo_bar__');
   * // => 'FOO BAR'
   */
  var upperCase = createCompounder(function(result, word, index) {
    return result + (index ? ' ' : '') + word.toUpperCase();
  });

  /**
   * Creates an array of the own and inherited enumerable string keyed property
   * values of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property values.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.valuesIn(new Foo);
   * // => [1, 2, 3] (iteration order is not guaranteed)
   */
  function valuesIn(object) {
    return object == null ? [] : baseValues(object, keysIn$1(object));
  }

  /**
   * Creates an array excluding all given values using
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * **Note:** Unlike `_.pull`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...*} [values] The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   * @see _.difference, _.xor
   * @example
   *
   * _.without([2, 1, 2, 3], 1, 2);
   * // => [3]
   */
  var without = baseRest(function(array, values) {
    return isArrayLikeObject(array)
      ? baseDifference(array, values)
      : [];
  });

  /**
   * Creates a function that provides `value` to `wrapper` as its first
   * argument. Any additional arguments provided to the function are appended
   * to those provided to the `wrapper`. The wrapper is invoked with the `this`
   * binding of the created function.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {*} value The value to wrap.
   * @param {Function} [wrapper=identity] The wrapper function.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var p = _.wrap(_.escape, function(func, text) {
   *   return '<p>' + func(text) + '</p>';
   * });
   *
   * p('fred, barney, & pebbles');
   * // => '<p>fred, barney, &amp; pebbles</p>'
   */
  function wrap(value, wrapper) {
    return partial(castFunction(wrapper), value);
  }

  /**
   * This method is the wrapper version of `_.at`.
   *
   * @name at
   * @memberOf _
   * @since 1.0.0
   * @category Seq
   * @param {...(string|string[])} [paths] The property paths to pick.
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
   *
   * _(object).at(['a[0].b.c', 'a[1]']).value();
   * // => [3, 4]
   */
  var wrapperAt = flatRest(function(paths) {
    var length = paths.length,
        start = length ? paths[0] : 0,
        value = this.__wrapped__,
        interceptor = function(object) { return baseAt(object, paths); };

    if (length > 1 || this.__actions__.length ||
        !(value instanceof LazyWrapper) || !isIndex(start)) {
      return this.thru(interceptor);
    }
    value = value.slice(start, +start + (length ? 1 : 0));
    value.__actions__.push({
      'func': thru,
      'args': [interceptor],
      'thisArg': undefined
    });
    return new LodashWrapper(value, this.__chain__).thru(function(array) {
      if (length && !array.length) {
        array.push(undefined);
      }
      return array;
    });
  });

  /**
   * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
   *
   * @name chain
   * @memberOf _
   * @since 0.1.0
   * @category Seq
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36 },
   *   { 'user': 'fred',   'age': 40 }
   * ];
   *
   * // A sequence without explicit chaining.
   * _(users).head();
   * // => { 'user': 'barney', 'age': 36 }
   *
   * // A sequence with explicit chaining.
   * _(users)
   *   .chain()
   *   .head()
   *   .pick('user')
   *   .value();
   * // => { 'user': 'barney' }
   */
  function wrapperChain() {
    return chain(this);
  }

  /**
   * This method is the wrapper version of `_.reverse`.
   *
   * **Note:** This method mutates the wrapped array.
   *
   * @name reverse
   * @memberOf _
   * @since 0.1.0
   * @category Seq
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var array = [1, 2, 3];
   *
   * _(array).reverse().value()
   * // => [3, 2, 1]
   *
   * console.log(array);
   * // => [3, 2, 1]
   */
  function wrapperReverse() {
    var value = this.__wrapped__;
    if (value instanceof LazyWrapper) {
      var wrapped = value;
      if (this.__actions__.length) {
        wrapped = new LazyWrapper(this);
      }
      wrapped = wrapped.reverse();
      wrapped.__actions__.push({
        'func': thru,
        'args': [reverse],
        'thisArg': undefined
      });
      return new LodashWrapper(wrapped, this.__chain__);
    }
    return this.thru(reverse);
  }

  /**
   * The base implementation of methods like `_.xor`, without support for
   * iteratee shorthands, that accepts an array of arrays to inspect.
   *
   * @private
   * @param {Array} arrays The arrays to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of values.
   */
  function baseXor(arrays, iteratee, comparator) {
    var length = arrays.length;
    if (length < 2) {
      return length ? baseUniq(arrays[0]) : [];
    }
    var index = -1,
        result = Array(length);

    while (++index < length) {
      var array = arrays[index],
          othIndex = -1;

      while (++othIndex < length) {
        if (othIndex != index) {
          result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
        }
      }
    }
    return baseUniq(baseFlatten(result, 1), iteratee, comparator);
  }

  /**
   * Creates an array of unique values that is the
   * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
   * of the given arrays. The order of result values is determined by the order
   * they occur in the arrays.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @returns {Array} Returns the new array of filtered values.
   * @see _.difference, _.without
   * @example
   *
   * _.xor([2, 1], [2, 3]);
   * // => [1, 3]
   */
  var xor = baseRest(function(arrays) {
    return baseXor(arrayFilter(arrays, isArrayLikeObject));
  });

  /**
   * This method is like `_.xor` except that it accepts `iteratee` which is
   * invoked for each element of each `arrays` to generate the criterion by
   * which by which they're compared. The order of result values is determined
   * by the order they occur in the arrays. The iteratee is invoked with one
   * argument: (value).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
   * // => [1.2, 3.4]
   *
   * // The `_.property` iteratee shorthand.
   * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
   * // => [{ 'x': 2 }]
   */
  var xorBy = baseRest(function(arrays) {
    var iteratee = last(arrays);
    if (isArrayLikeObject(iteratee)) {
      iteratee = undefined;
    }
    return baseXor(arrayFilter(arrays, isArrayLikeObject), baseIteratee(iteratee, 2));
  });

  /**
   * This method is like `_.xor` except that it accepts `comparator` which is
   * invoked to compare elements of `arrays`. The order of result values is
   * determined by the order they occur in the arrays. The comparator is invoked
   * with two arguments: (arrVal, othVal).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
   * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
   *
   * _.xorWith(objects, others, _.isEqual);
   * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
   */
  var xorWith = baseRest(function(arrays) {
    var comparator = last(arrays);
    comparator = typeof comparator == 'function' ? comparator : undefined;
    return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
  });

  /**
   * Creates an array of grouped elements, the first of which contains the
   * first elements of the given arrays, the second of which contains the
   * second elements of the given arrays, and so on.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {...Array} [arrays] The arrays to process.
   * @returns {Array} Returns the new array of grouped elements.
   * @example
   *
   * _.zip(['a', 'b'], [1, 2], [true, false]);
   * // => [['a', 1, true], ['b', 2, false]]
   */
  var zip = baseRest(unzip);

  /**
   * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
   *
   * @private
   * @param {Array} props The property identifiers.
   * @param {Array} values The property values.
   * @param {Function} assignFunc The function to assign values.
   * @returns {Object} Returns the new object.
   */
  function baseZipObject(props, values, assignFunc) {
    var index = -1,
        length = props.length,
        valsLength = values.length,
        result = {};

    while (++index < length) {
      var value = index < valsLength ? values[index] : undefined;
      assignFunc(result, props[index], value);
    }
    return result;
  }

  /**
   * This method is like `_.fromPairs` except that it accepts two arrays,
   * one of property identifiers and one of corresponding values.
   *
   * @static
   * @memberOf _
   * @since 0.4.0
   * @category Array
   * @param {Array} [props=[]] The property identifiers.
   * @param {Array} [values=[]] The property values.
   * @returns {Object} Returns the new object.
   * @example
   *
   * _.zipObject(['a', 'b'], [1, 2]);
   * // => { 'a': 1, 'b': 2 }
   */
  function zipObject(props, values) {
    return baseZipObject(props || [], values || [], assignValue);
  }

  /**
   * This method is like `_.zipObject` except that it supports property paths.
   *
   * @static
   * @memberOf _
   * @since 4.1.0
   * @category Array
   * @param {Array} [props=[]] The property identifiers.
   * @param {Array} [values=[]] The property values.
   * @returns {Object} Returns the new object.
   * @example
   *
   * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
   * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
   */
  function zipObjectDeep(props, values) {
    return baseZipObject(props || [], values || [], baseSet);
  }

  /**
   * This method is like `_.zip` except that it accepts `iteratee` to specify
   * how grouped values should be combined. The iteratee is invoked with the
   * elements of each group: (...group).
   *
   * @static
   * @memberOf _
   * @since 3.8.0
   * @category Array
   * @param {...Array} [arrays] The arrays to process.
   * @param {Function} [iteratee=_.identity] The function to combine
   *  grouped values.
   * @returns {Array} Returns the new array of grouped elements.
   * @example
   *
   * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
   *   return a + b + c;
   * });
   * // => [111, 222]
   */
  var zipWith = baseRest(function(arrays) {
    var length = arrays.length,
        iteratee = length > 1 ? arrays[length - 1] : undefined;

    iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
    return unzipWith(arrays, iteratee);
  });

  var array = {
    chunk, compact, concat, difference, differenceBy,
    differenceWith, drop, dropRight, dropRightWhile, dropWhile,
    fill, findIndex, findLastIndex, first: head, flatten,
    flattenDeep, flattenDepth, fromPairs, head, indexOf,
    initial, intersection, intersectionBy, intersectionWith, join,
    last, lastIndexOf, nth, pull, pullAll,
    pullAllBy, pullAllWith, pullAt, remove, reverse,
    slice, sortedIndex, sortedIndexBy, sortedIndexOf, sortedLastIndex,
    sortedLastIndexBy, sortedLastIndexOf, sortedUniq, sortedUniqBy, tail,
    take, takeRight, takeRightWhile, takeWhile, union,
    unionBy, unionWith, uniq, uniqBy, uniqWith,
    unzip, unzipWith, without, xor, xorBy,
    xorWith, zip, zipObject, zipObjectDeep, zipWith
  };

  var collection = {
    countBy, each: forEach, eachRight: forEachRight, every, filter,
    find, findLast, flatMap, flatMapDeep, flatMapDepth,
    forEach, forEachRight, groupBy, includes, invokeMap,
    keyBy, map, orderBy, partition, reduce,
    reduceRight, reject, sample, sampleSize, shuffle,
    size, some, sortBy
  };

  var date = {
    now
  };

  var func = {
    after, ary, before, bind, bindKey,
    curry, curryRight, debounce, defer, delay,
    flip, memoize, negate, once, overArgs,
    partial, partialRight, rearg, rest, spread,
    throttle, unary, wrap
  };

  var lang = {
    castArray, clone, cloneDeep, cloneDeepWith, cloneWith,
    conformsTo, eq, gt, gte, isArguments,
    isArray, isArrayBuffer, isArrayLike, isArrayLikeObject, isBoolean,
    isBuffer, isDate, isElement, isEmpty, isEqual,
    isEqualWith, isError, isFinite: isFinite$1, isFunction, isInteger,
    isLength, isMap, isMatch, isMatchWith, isNaN: isNaN$1,
    isNative, isNil, isNull, isNumber, isObject,
    isObjectLike, isPlainObject, isRegExp, isSafeInteger, isSet,
    isString, isSymbol, isTypedArray, isUndefined, isWeakMap,
    isWeakSet, lt, lte, toArray, toFinite,
    toInteger, toLength, toNumber, toPlainObject, toSafeInteger,
    toString
  };

  var math = {
    add, ceil, divide, floor, max,
    maxBy, mean, meanBy, min, minBy,
    multiply, round, subtract, sum, sumBy
  };

  var number = {
    clamp, inRange, random
  };

  var object = {
    assign, assignIn, assignInWith, assignWith, at,
    create, defaults, defaultsDeep, entries: toPairs, entriesIn: toPairsIn,
    extend: assignIn, extendWith: assignInWith, findKey, findLastKey, forIn,
    forInRight, forOwn, forOwnRight, functions, functionsIn,
    get, has, hasIn, invert, invertBy,
    invoke, keys, keysIn: keysIn$1, mapKeys, mapValues,
    merge, mergeWith, omit, omitBy, pick,
    pickBy, result, set, setWith, toPairs,
    toPairsIn, transform, unset, update, updateWith,
    values, valuesIn
  };

  var seq = {
    at: wrapperAt, chain, commit: wrapperCommit, lodash, next: wrapperNext,
    plant: wrapperPlant, reverse: wrapperReverse, tap, thru, toIterator: wrapperToIterator,
    toJSON: wrapperValue, value: wrapperValue, valueOf: wrapperValue, wrapperChain
  };

  var string = {
    camelCase, capitalize, deburr, endsWith, escape,
    escapeRegExp, kebabCase, lowerCase, lowerFirst, pad,
    padEnd, padStart, parseInt: parseInt$1, repeat, replace,
    snakeCase, split, startCase, startsWith, template,
    templateSettings, toLower, toUpper, trim, trimEnd,
    trimStart, truncate, unescape: unescape$1, upperCase, upperFirst,
    words
  };

  var util = {
    attempt, bindAll, cond, conforms, constant,
    defaultTo, flow, flowRight, identity, iteratee,
    matches, matchesProperty, method, methodOf, mixin,
    noop, nthArg, over, overEvery, overSome,
    property, propertyOf, range, rangeRight, stubArray,
    stubFalse, stubObject, stubString, stubTrue, times,
    toPath, uniqueId
  };

  /**
   * Creates a clone of the lazy wrapper object.
   *
   * @private
   * @name clone
   * @memberOf LazyWrapper
   * @returns {Object} Returns the cloned `LazyWrapper` object.
   */
  function lazyClone() {
    var result = new LazyWrapper(this.__wrapped__);
    result.__actions__ = copyArray(this.__actions__);
    result.__dir__ = this.__dir__;
    result.__filtered__ = this.__filtered__;
    result.__iteratees__ = copyArray(this.__iteratees__);
    result.__takeCount__ = this.__takeCount__;
    result.__views__ = copyArray(this.__views__);
    return result;
  }

  /**
   * Reverses the direction of lazy iteration.
   *
   * @private
   * @name reverse
   * @memberOf LazyWrapper
   * @returns {Object} Returns the new reversed `LazyWrapper` object.
   */
  function lazyReverse() {
    if (this.__filtered__) {
      var result = new LazyWrapper(this);
      result.__dir__ = -1;
      result.__filtered__ = true;
    } else {
      result = this.clone();
      result.__dir__ *= -1;
    }
    return result;
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$f = Math.max,
      nativeMin$c = Math.min;

  /**
   * Gets the view, applying any `transforms` to the `start` and `end` positions.
   *
   * @private
   * @param {number} start The start of the view.
   * @param {number} end The end of the view.
   * @param {Array} transforms The transformations to apply to the view.
   * @returns {Object} Returns an object containing the `start` and `end`
   *  positions of the view.
   */
  function getView(start, end, transforms) {
    var index = -1,
        length = transforms.length;

    while (++index < length) {
      var data = transforms[index],
          size = data.size;

      switch (data.type) {
        case 'drop':      start += size; break;
        case 'dropRight': end -= size; break;
        case 'take':      end = nativeMin$c(end, start + size); break;
        case 'takeRight': start = nativeMax$f(start, end - size); break;
      }
    }
    return { 'start': start, 'end': end };
  }

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMin$d = Math.min;

  /**
   * Extracts the unwrapped value from its lazy wrapper.
   *
   * @private
   * @name value
   * @memberOf LazyWrapper
   * @returns {*} Returns the unwrapped value.
   */
  function lazyValue() {
    var array = this.__wrapped__.value(),
        dir = this.__dir__,
        isArr = isArray(array),
        isRight = dir < 0,
        arrLength = isArr ? array.length : 0,
        view = getView(0, arrLength, this.__views__),
        start = view.start,
        end = view.end,
        length = end - start,
        index = isRight ? end : (start - 1),
        iteratees = this.__iteratees__,
        iterLength = iteratees.length,
        resIndex = 0,
        takeCount = nativeMin$d(length, this.__takeCount__);

    if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
      return baseWrapperValue(array, this.__actions__);
    }
    var result = [];

    outer:
    while (length-- && resIndex < takeCount) {
      index += dir;

      var iterIndex = -1,
          value = array[index];

      while (++iterIndex < iterLength) {
        var data = iteratees[iterIndex],
            iteratee = data.iteratee,
            type = data.type,
            computed = iteratee(value);

        if (type == LAZY_MAP_FLAG) {
          value = computed;
        } else if (!computed) {
          if (type == LAZY_FILTER_FLAG) {
            continue outer;
          } else {
            break outer;
          }
        }
      }
      result[resIndex++] = value;
    }
    return result;
  }

  /**
   * @license
   * Lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="es" -o ./`
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  /** Used as the semantic version number. */
  var VERSION = '4.17.15';

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_KEY_FLAG$6 = 2;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG$1 = 1,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH$6 = 4294967295;

  /** Used for built-in method references. */
  var arrayProto$5 = Array.prototype,
      objectProto$s = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$o = objectProto$s.hasOwnProperty;

  /** Built-in value references. */
  var symIterator$1 = Symbol$1 ? Symbol$1.iterator : undefined;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$g = Math.max,
      nativeMin$e = Math.min;

  // wrap `_.mixin` so it works when provided only one argument
  var mixin$1 = (function(func$$1) {
    return function(object$$1, source, options) {
      if (options == null) {
        var isObj = isObject(source),
            props = isObj && keys(source),
            methodNames = props && props.length && baseFunctions(source, props);

        if (!(methodNames ? methodNames.length : isObj)) {
          options = source;
          source = object$$1;
          object$$1 = this;
        }
      }
      return func$$1(object$$1, source, options);
    };
  }(mixin));

  // Add methods that return wrapped values in chain sequences.
  lodash.after = func.after;
  lodash.ary = func.ary;
  lodash.assign = object.assign;
  lodash.assignIn = object.assignIn;
  lodash.assignInWith = object.assignInWith;
  lodash.assignWith = object.assignWith;
  lodash.at = object.at;
  lodash.before = func.before;
  lodash.bind = func.bind;
  lodash.bindAll = util.bindAll;
  lodash.bindKey = func.bindKey;
  lodash.castArray = lang.castArray;
  lodash.chain = seq.chain;
  lodash.chunk = array.chunk;
  lodash.compact = array.compact;
  lodash.concat = array.concat;
  lodash.cond = util.cond;
  lodash.conforms = util.conforms;
  lodash.constant = util.constant;
  lodash.countBy = collection.countBy;
  lodash.create = object.create;
  lodash.curry = func.curry;
  lodash.curryRight = func.curryRight;
  lodash.debounce = func.debounce;
  lodash.defaults = object.defaults;
  lodash.defaultsDeep = object.defaultsDeep;
  lodash.defer = func.defer;
  lodash.delay = func.delay;
  lodash.difference = array.difference;
  lodash.differenceBy = array.differenceBy;
  lodash.differenceWith = array.differenceWith;
  lodash.drop = array.drop;
  lodash.dropRight = array.dropRight;
  lodash.dropRightWhile = array.dropRightWhile;
  lodash.dropWhile = array.dropWhile;
  lodash.fill = array.fill;
  lodash.filter = collection.filter;
  lodash.flatMap = collection.flatMap;
  lodash.flatMapDeep = collection.flatMapDeep;
  lodash.flatMapDepth = collection.flatMapDepth;
  lodash.flatten = array.flatten;
  lodash.flattenDeep = array.flattenDeep;
  lodash.flattenDepth = array.flattenDepth;
  lodash.flip = func.flip;
  lodash.flow = util.flow;
  lodash.flowRight = util.flowRight;
  lodash.fromPairs = array.fromPairs;
  lodash.functions = object.functions;
  lodash.functionsIn = object.functionsIn;
  lodash.groupBy = collection.groupBy;
  lodash.initial = array.initial;
  lodash.intersection = array.intersection;
  lodash.intersectionBy = array.intersectionBy;
  lodash.intersectionWith = array.intersectionWith;
  lodash.invert = object.invert;
  lodash.invertBy = object.invertBy;
  lodash.invokeMap = collection.invokeMap;
  lodash.iteratee = util.iteratee;
  lodash.keyBy = collection.keyBy;
  lodash.keys = keys;
  lodash.keysIn = object.keysIn;
  lodash.map = collection.map;
  lodash.mapKeys = object.mapKeys;
  lodash.mapValues = object.mapValues;
  lodash.matches = util.matches;
  lodash.matchesProperty = util.matchesProperty;
  lodash.memoize = func.memoize;
  lodash.merge = object.merge;
  lodash.mergeWith = object.mergeWith;
  lodash.method = util.method;
  lodash.methodOf = util.methodOf;
  lodash.mixin = mixin$1;
  lodash.negate = negate;
  lodash.nthArg = util.nthArg;
  lodash.omit = object.omit;
  lodash.omitBy = object.omitBy;
  lodash.once = func.once;
  lodash.orderBy = collection.orderBy;
  lodash.over = util.over;
  lodash.overArgs = func.overArgs;
  lodash.overEvery = util.overEvery;
  lodash.overSome = util.overSome;
  lodash.partial = func.partial;
  lodash.partialRight = func.partialRight;
  lodash.partition = collection.partition;
  lodash.pick = object.pick;
  lodash.pickBy = object.pickBy;
  lodash.property = util.property;
  lodash.propertyOf = util.propertyOf;
  lodash.pull = array.pull;
  lodash.pullAll = array.pullAll;
  lodash.pullAllBy = array.pullAllBy;
  lodash.pullAllWith = array.pullAllWith;
  lodash.pullAt = array.pullAt;
  lodash.range = util.range;
  lodash.rangeRight = util.rangeRight;
  lodash.rearg = func.rearg;
  lodash.reject = collection.reject;
  lodash.remove = array.remove;
  lodash.rest = func.rest;
  lodash.reverse = array.reverse;
  lodash.sampleSize = collection.sampleSize;
  lodash.set = object.set;
  lodash.setWith = object.setWith;
  lodash.shuffle = collection.shuffle;
  lodash.slice = array.slice;
  lodash.sortBy = collection.sortBy;
  lodash.sortedUniq = array.sortedUniq;
  lodash.sortedUniqBy = array.sortedUniqBy;
  lodash.split = string.split;
  lodash.spread = func.spread;
  lodash.tail = array.tail;
  lodash.take = array.take;
  lodash.takeRight = array.takeRight;
  lodash.takeRightWhile = array.takeRightWhile;
  lodash.takeWhile = array.takeWhile;
  lodash.tap = seq.tap;
  lodash.throttle = func.throttle;
  lodash.thru = thru;
  lodash.toArray = lang.toArray;
  lodash.toPairs = object.toPairs;
  lodash.toPairsIn = object.toPairsIn;
  lodash.toPath = util.toPath;
  lodash.toPlainObject = lang.toPlainObject;
  lodash.transform = object.transform;
  lodash.unary = func.unary;
  lodash.union = array.union;
  lodash.unionBy = array.unionBy;
  lodash.unionWith = array.unionWith;
  lodash.uniq = array.uniq;
  lodash.uniqBy = array.uniqBy;
  lodash.uniqWith = array.uniqWith;
  lodash.unset = object.unset;
  lodash.unzip = array.unzip;
  lodash.unzipWith = array.unzipWith;
  lodash.update = object.update;
  lodash.updateWith = object.updateWith;
  lodash.values = object.values;
  lodash.valuesIn = object.valuesIn;
  lodash.without = array.without;
  lodash.words = string.words;
  lodash.wrap = func.wrap;
  lodash.xor = array.xor;
  lodash.xorBy = array.xorBy;
  lodash.xorWith = array.xorWith;
  lodash.zip = array.zip;
  lodash.zipObject = array.zipObject;
  lodash.zipObjectDeep = array.zipObjectDeep;
  lodash.zipWith = array.zipWith;

  // Add aliases.
  lodash.entries = object.toPairs;
  lodash.entriesIn = object.toPairsIn;
  lodash.extend = object.assignIn;
  lodash.extendWith = object.assignInWith;

  // Add methods to `lodash.prototype`.
  mixin$1(lodash, lodash);

  // Add methods that return unwrapped values in chain sequences.
  lodash.add = math.add;
  lodash.attempt = util.attempt;
  lodash.camelCase = string.camelCase;
  lodash.capitalize = string.capitalize;
  lodash.ceil = math.ceil;
  lodash.clamp = number.clamp;
  lodash.clone = lang.clone;
  lodash.cloneDeep = lang.cloneDeep;
  lodash.cloneDeepWith = lang.cloneDeepWith;
  lodash.cloneWith = lang.cloneWith;
  lodash.conformsTo = lang.conformsTo;
  lodash.deburr = string.deburr;
  lodash.defaultTo = util.defaultTo;
  lodash.divide = math.divide;
  lodash.endsWith = string.endsWith;
  lodash.eq = lang.eq;
  lodash.escape = string.escape;
  lodash.escapeRegExp = string.escapeRegExp;
  lodash.every = collection.every;
  lodash.find = collection.find;
  lodash.findIndex = array.findIndex;
  lodash.findKey = object.findKey;
  lodash.findLast = collection.findLast;
  lodash.findLastIndex = array.findLastIndex;
  lodash.findLastKey = object.findLastKey;
  lodash.floor = math.floor;
  lodash.forEach = collection.forEach;
  lodash.forEachRight = collection.forEachRight;
  lodash.forIn = object.forIn;
  lodash.forInRight = object.forInRight;
  lodash.forOwn = object.forOwn;
  lodash.forOwnRight = object.forOwnRight;
  lodash.get = object.get;
  lodash.gt = lang.gt;
  lodash.gte = lang.gte;
  lodash.has = object.has;
  lodash.hasIn = object.hasIn;
  lodash.head = array.head;
  lodash.identity = identity;
  lodash.includes = collection.includes;
  lodash.indexOf = array.indexOf;
  lodash.inRange = number.inRange;
  lodash.invoke = object.invoke;
  lodash.isArguments = lang.isArguments;
  lodash.isArray = isArray;
  lodash.isArrayBuffer = lang.isArrayBuffer;
  lodash.isArrayLike = lang.isArrayLike;
  lodash.isArrayLikeObject = lang.isArrayLikeObject;
  lodash.isBoolean = lang.isBoolean;
  lodash.isBuffer = lang.isBuffer;
  lodash.isDate = lang.isDate;
  lodash.isElement = lang.isElement;
  lodash.isEmpty = lang.isEmpty;
  lodash.isEqual = lang.isEqual;
  lodash.isEqualWith = lang.isEqualWith;
  lodash.isError = lang.isError;
  lodash.isFinite = lang.isFinite;
  lodash.isFunction = lang.isFunction;
  lodash.isInteger = lang.isInteger;
  lodash.isLength = lang.isLength;
  lodash.isMap = lang.isMap;
  lodash.isMatch = lang.isMatch;
  lodash.isMatchWith = lang.isMatchWith;
  lodash.isNaN = lang.isNaN;
  lodash.isNative = lang.isNative;
  lodash.isNil = lang.isNil;
  lodash.isNull = lang.isNull;
  lodash.isNumber = lang.isNumber;
  lodash.isObject = isObject;
  lodash.isObjectLike = lang.isObjectLike;
  lodash.isPlainObject = lang.isPlainObject;
  lodash.isRegExp = lang.isRegExp;
  lodash.isSafeInteger = lang.isSafeInteger;
  lodash.isSet = lang.isSet;
  lodash.isString = lang.isString;
  lodash.isSymbol = lang.isSymbol;
  lodash.isTypedArray = lang.isTypedArray;
  lodash.isUndefined = lang.isUndefined;
  lodash.isWeakMap = lang.isWeakMap;
  lodash.isWeakSet = lang.isWeakSet;
  lodash.join = array.join;
  lodash.kebabCase = string.kebabCase;
  lodash.last = last;
  lodash.lastIndexOf = array.lastIndexOf;
  lodash.lowerCase = string.lowerCase;
  lodash.lowerFirst = string.lowerFirst;
  lodash.lt = lang.lt;
  lodash.lte = lang.lte;
  lodash.max = math.max;
  lodash.maxBy = math.maxBy;
  lodash.mean = math.mean;
  lodash.meanBy = math.meanBy;
  lodash.min = math.min;
  lodash.minBy = math.minBy;
  lodash.stubArray = util.stubArray;
  lodash.stubFalse = util.stubFalse;
  lodash.stubObject = util.stubObject;
  lodash.stubString = util.stubString;
  lodash.stubTrue = util.stubTrue;
  lodash.multiply = math.multiply;
  lodash.nth = array.nth;
  lodash.noop = util.noop;
  lodash.now = date.now;
  lodash.pad = string.pad;
  lodash.padEnd = string.padEnd;
  lodash.padStart = string.padStart;
  lodash.parseInt = string.parseInt;
  lodash.random = number.random;
  lodash.reduce = collection.reduce;
  lodash.reduceRight = collection.reduceRight;
  lodash.repeat = string.repeat;
  lodash.replace = string.replace;
  lodash.result = object.result;
  lodash.round = math.round;
  lodash.sample = collection.sample;
  lodash.size = collection.size;
  lodash.snakeCase = string.snakeCase;
  lodash.some = collection.some;
  lodash.sortedIndex = array.sortedIndex;
  lodash.sortedIndexBy = array.sortedIndexBy;
  lodash.sortedIndexOf = array.sortedIndexOf;
  lodash.sortedLastIndex = array.sortedLastIndex;
  lodash.sortedLastIndexBy = array.sortedLastIndexBy;
  lodash.sortedLastIndexOf = array.sortedLastIndexOf;
  lodash.startCase = string.startCase;
  lodash.startsWith = string.startsWith;
  lodash.subtract = math.subtract;
  lodash.sum = math.sum;
  lodash.sumBy = math.sumBy;
  lodash.template = string.template;
  lodash.times = util.times;
  lodash.toFinite = lang.toFinite;
  lodash.toInteger = toInteger;
  lodash.toLength = lang.toLength;
  lodash.toLower = string.toLower;
  lodash.toNumber = lang.toNumber;
  lodash.toSafeInteger = lang.toSafeInteger;
  lodash.toString = lang.toString;
  lodash.toUpper = string.toUpper;
  lodash.trim = string.trim;
  lodash.trimEnd = string.trimEnd;
  lodash.trimStart = string.trimStart;
  lodash.truncate = string.truncate;
  lodash.unescape = string.unescape;
  lodash.uniqueId = util.uniqueId;
  lodash.upperCase = string.upperCase;
  lodash.upperFirst = string.upperFirst;

  // Add aliases.
  lodash.each = collection.forEach;
  lodash.eachRight = collection.forEachRight;
  lodash.first = array.head;

  mixin$1(lodash, (function() {
    var source = {};
    baseForOwn(lodash, function(func$$1, methodName) {
      if (!hasOwnProperty$o.call(lodash.prototype, methodName)) {
        source[methodName] = func$$1;
      }
    });
    return source;
  }()), { 'chain': false });

  /**
   * The semantic version number.
   *
   * @static
   * @memberOf _
   * @type {string}
   */
  lodash.VERSION = VERSION;
  (lodash.templateSettings = string.templateSettings).imports._ = lodash;

  // Assign default placeholders.
  arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
    lodash[methodName].placeholder = lodash;
  });

  // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
  arrayEach(['drop', 'take'], function(methodName, index) {
    LazyWrapper.prototype[methodName] = function(n) {
      n = n === undefined ? 1 : nativeMax$g(toInteger(n), 0);

      var result$$1 = (this.__filtered__ && !index)
        ? new LazyWrapper(this)
        : this.clone();

      if (result$$1.__filtered__) {
        result$$1.__takeCount__ = nativeMin$e(n, result$$1.__takeCount__);
      } else {
        result$$1.__views__.push({
          'size': nativeMin$e(n, MAX_ARRAY_LENGTH$6),
          'type': methodName + (result$$1.__dir__ < 0 ? 'Right' : '')
        });
      }
      return result$$1;
    };

    LazyWrapper.prototype[methodName + 'Right'] = function(n) {
      return this.reverse()[methodName](n).reverse();
    };
  });

  // Add `LazyWrapper` methods that accept an `iteratee` value.
  arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
    var type = index + 1,
        isFilter = type == LAZY_FILTER_FLAG$1 || type == LAZY_WHILE_FLAG;

    LazyWrapper.prototype[methodName] = function(iteratee$$1) {
      var result$$1 = this.clone();
      result$$1.__iteratees__.push({
        'iteratee': baseIteratee(iteratee$$1, 3),
        'type': type
      });
      result$$1.__filtered__ = result$$1.__filtered__ || isFilter;
      return result$$1;
    };
  });

  // Add `LazyWrapper` methods for `_.head` and `_.last`.
  arrayEach(['head', 'last'], function(methodName, index) {
    var takeName = 'take' + (index ? 'Right' : '');

    LazyWrapper.prototype[methodName] = function() {
      return this[takeName](1).value()[0];
    };
  });

  // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
  arrayEach(['initial', 'tail'], function(methodName, index) {
    var dropName = 'drop' + (index ? '' : 'Right');

    LazyWrapper.prototype[methodName] = function() {
      return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
    };
  });

  LazyWrapper.prototype.compact = function() {
    return this.filter(identity);
  };

  LazyWrapper.prototype.find = function(predicate) {
    return this.filter(predicate).head();
  };

  LazyWrapper.prototype.findLast = function(predicate) {
    return this.reverse().find(predicate);
  };

  LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
    if (typeof path == 'function') {
      return new LazyWrapper(this);
    }
    return this.map(function(value) {
      return baseInvoke(value, path, args);
    });
  });

  LazyWrapper.prototype.reject = function(predicate) {
    return this.filter(negate(baseIteratee(predicate)));
  };

  LazyWrapper.prototype.slice = function(start, end) {
    start = toInteger(start);

    var result$$1 = this;
    if (result$$1.__filtered__ && (start > 0 || end < 0)) {
      return new LazyWrapper(result$$1);
    }
    if (start < 0) {
      result$$1 = result$$1.takeRight(-start);
    } else if (start) {
      result$$1 = result$$1.drop(start);
    }
    if (end !== undefined) {
      end = toInteger(end);
      result$$1 = end < 0 ? result$$1.dropRight(-end) : result$$1.take(end - start);
    }
    return result$$1;
  };

  LazyWrapper.prototype.takeRightWhile = function(predicate) {
    return this.reverse().takeWhile(predicate).reverse();
  };

  LazyWrapper.prototype.toArray = function() {
    return this.take(MAX_ARRAY_LENGTH$6);
  };

  // Add `LazyWrapper` methods to `lodash.prototype`.
  baseForOwn(LazyWrapper.prototype, function(func$$1, methodName) {
    var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
        isTaker = /^(?:head|last)$/.test(methodName),
        lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
        retUnwrapped = isTaker || /^find/.test(methodName);

    if (!lodashFunc) {
      return;
    }
    lodash.prototype[methodName] = function() {
      var value = this.__wrapped__,
          args = isTaker ? [1] : arguments,
          isLazy = value instanceof LazyWrapper,
          iteratee$$1 = args[0],
          useLazy = isLazy || isArray(value);

      var interceptor = function(value) {
        var result$$1 = lodashFunc.apply(lodash, arrayPush([value], args));
        return (isTaker && chainAll) ? result$$1[0] : result$$1;
      };

      if (useLazy && checkIteratee && typeof iteratee$$1 == 'function' && iteratee$$1.length != 1) {
        // Avoid lazy use if the iteratee has a "length" value other than `1`.
        isLazy = useLazy = false;
      }
      var chainAll = this.__chain__,
          isHybrid = !!this.__actions__.length,
          isUnwrapped = retUnwrapped && !chainAll,
          onlyLazy = isLazy && !isHybrid;

      if (!retUnwrapped && useLazy) {
        value = onlyLazy ? value : new LazyWrapper(this);
        var result$$1 = func$$1.apply(value, args);
        result$$1.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
        return new LodashWrapper(result$$1, chainAll);
      }
      if (isUnwrapped && onlyLazy) {
        return func$$1.apply(this, args);
      }
      result$$1 = this.thru(interceptor);
      return isUnwrapped ? (isTaker ? result$$1.value()[0] : result$$1.value()) : result$$1;
    };
  });

  // Add `Array` methods to `lodash.prototype`.
  arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
    var func$$1 = arrayProto$5[methodName],
        chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
        retUnwrapped = /^(?:pop|shift)$/.test(methodName);

    lodash.prototype[methodName] = function() {
      var args = arguments;
      if (retUnwrapped && !this.__chain__) {
        var value = this.value();
        return func$$1.apply(isArray(value) ? value : [], args);
      }
      return this[chainName](function(value) {
        return func$$1.apply(isArray(value) ? value : [], args);
      });
    };
  });

  // Map minified method names to their real names.
  baseForOwn(LazyWrapper.prototype, function(func$$1, methodName) {
    var lodashFunc = lodash[methodName];
    if (lodashFunc) {
      var key = lodashFunc.name + '';
      if (!hasOwnProperty$o.call(realNames, key)) {
        realNames[key] = [];
      }
      realNames[key].push({ 'name': methodName, 'func': lodashFunc });
    }
  });

  realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG$6).name] = [{
    'name': 'wrapper',
    'func': undefined
  }];

  // Add methods to `LazyWrapper`.
  LazyWrapper.prototype.clone = lazyClone;
  LazyWrapper.prototype.reverse = lazyReverse;
  LazyWrapper.prototype.value = lazyValue;

  // Add chain sequence methods to the `lodash` wrapper.
  lodash.prototype.at = seq.at;
  lodash.prototype.chain = seq.wrapperChain;
  lodash.prototype.commit = seq.commit;
  lodash.prototype.next = seq.next;
  lodash.prototype.plant = seq.plant;
  lodash.prototype.reverse = seq.reverse;
  lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = seq.value;

  // Add lazy aliases.
  lodash.prototype.first = lodash.prototype.head;

  if (symIterator$1) {
    lodash.prototype[symIterator$1] = seq.toIterator;
  }

  /**
   * @license
   * Lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="es" -o ./`
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  const disableZeroCountElements = (list) => {
    return list.map(listElement => {
      const disabled = !listElement.count;
      return {
        ...listElement,
        disabled
      }
    });
  };

  const keysMap = {
    uniqueCode: 'id',
    modelRangeName: 'label'
  };

  const renameKeys = (val, keysMap) => {
    if (val == null) return null;
    if (Array.isArray(val)) {
      return val.map(item => renameKeys(item, keysMap));
    } else if (typeof val == "object") {
      return Object.keys(val).reduce((obj, key) => {
        const propKey = renameKeys(key, keysMap);
        obj[propKey] = renameKeys(val[key], keysMap);
        return obj;
      }, {});
    } else if (typeof val === "string") {
      return keysMap[val] || val;
    }
    return val;
  };

  const prepareFuelQuery = (params) => {
    const selectedEngines = Object.keys(params.engine)
      .filter(key => params.engine[key])
      .join();

    const selectedFuels = Object.keys(params.fuel)
      .filter(key => params.fuel[key])
      .join();

    return {
      fuel: selectedFuels,
      engines: selectedEngines,
    };
  };

  const prepareMarketingModelRangeQuery = (params) => {
    const selectedUniqueCodes = params.allOptions.series.map(series => series.uniqueModelRanges)
      .flat()
      .filter(uniqueModelRange => params.marketingModelRange[uniqueModelRange.modelRangeName])
      .map(uniqueModelRange => uniqueModelRange.uniqueCode)
      .join(',');

    return `${selectedUniqueCodes}`;
  };

  const getFiltersParameters = (params = {}, currentPosition = {}) => {
    const getActiveFiltersCollection = collection =>
      Object.keys(collection).filter(value => collection[value]);
    const filterParamsUrl = Object.keys(params).reduce((previous, current) => {
      if (current === 'price') {
        if (typeof params[current][0] === 'number' && typeof params[current][1] === 'number') {
          return `${previous}priceMin=${params[current][0]}&priceMax=${params[current][1]}&`;
        }
        return '';
      }
      if (current === 'radius' || current === 'onlyDiscounted') {
        return `${previous}${current}=${params[current]}&`;
      }
      if (current === 'engine') {
        const query = prepareFuelQuery(params);
        return `${previous}fuel=${query.fuel}&engine=${query.engines}&`;
      }
      if (current === 'marketingModelRange') {
        return `${previous}series=${prepareMarketingModelRangeQuery(params)}&`
      }
      if (current === 'engineType' || current === 'transmissionType' || current === 'fuel' ||  current === 'allOptions') {
        return `${previous}`;
      }
      return `${previous}${current}=${getActiveFiltersCollection(
      params[current]
    ).join(',')}&`;
    }, '');

    if (currentPosition && Object.keys(currentPosition).length && params.radius) {
      return `${filterParamsUrl}lat=${currentPosition.lat}&lng=${currentPosition.lng}&`;
    }
    return filterParamsUrl;
  };

  const getSortingParameters = (sortingAndCountValues) => {
    if(!isObject(sortingAndCountValues)) {
      return '';
    }

    return Object.keys(sortingAndCountValues).reduce((previous, current) => {
      return `${previous}${sortingAndCountValues[current][0]}=${
      sortingAndCountValues[current][1]
    }&`;
    }, '');
  };

  const simpleFiltersData = (data, i18n) => ({
    marketingModelRange: {
      list: [...data.series],
      name: i18n.marketingModelRange,
      type: 'groupSelect',
    },
    series: {
      list: [...data.series],
      name: i18n.series,
    },
    body: {
      list: [...data.body],
      name: i18n.bodyTypes,
    },
    price: {
      list: [data.priceMin, data.priceMax],
      name: i18n.price,
      type: 'range',
    },
  });

  const COLORS_ORDER = ['black', 'silver', 'white', 'blue', 'red', 'green', 'orange', 'yellow', 'brown'];
  const orderByColors = (colors) => {
    return COLORS_ORDER
      .map(colorId => {
        return colors.find(({ id }) => colorId === id);
      })
      .filter(color => !!color)
  };

  const getFiltersParser = (data, i18n, aemConfig = {}) => {
    const newFilters = {
      engineType: {
        list: [...data.fuel],
        name: i18n.engineAndFuelType,
        type: 'groupSelect'
      },
      transmissionType: {
        list: [...data.transmission, ...data.driveType],
        name: i18n.transmissionAndDriveType,
      },
      color: {
        list: [...orderByColors(translateOption(data.color, i18n))],
        name: i18n.colors,
        type: 'color'
      },
      options: {
        list: [...data.options],
        name: i18n.options,
      },
    };

    let filters = {
      ...newFilters,
      ...simpleFiltersData(data, i18n)
    };

    filters = Object.keys(filters).reduce((previous, index) => {
      previous[index] = { ...filters[index] };
      if(index !== 'radius' && index !== 'price') {
        previous[index].list = disableZeroCountElements(filters[index].list);

        if (index === 'marketingModelRange') {
          previous[index].list = previous[index].list.map((item) => {
            if (item.uniqueModelRanges) {
              return {
                ...item,
                uniqueModelRanges: renameKeys(disableZeroCountElements(item.uniqueModelRanges), keysMap),
              }
            }
            return item;
          });
        }

        if (index === 'engineType') {
          previous[index].list = previous[index].list.map((item) => {
            if (item.engines) {
              return {
                ...item,
                engines: disableZeroCountElements(item.engines)
              }
            }
            return item;
          });
        }
      }
      return previous;
    }, {});

    const filtersWithTranslatedApiLabels = Object.keys(filters).reduce((previous, filterName) => {
      previous[filterName] = { ...filters[filterName] };

      if (previous[filterName].list) {
        previous[filterName].list = replaceApiLabelWithI18nLabel(i18n, filterName, previous[filterName].list);
      }

      return previous;
    }, {});

    const getName = name => {
      switch (name) {
      case 'bodytype':
        return 'body';
      case 'engine':
        return 'engineType';
      case 'transmission':
        return 'transmissionType';
      case 'location':
        return 'radius';
      default:
        return name;
      }
    };

    return Object.keys(aemConfig)
      .filter(key => aemConfig[key])
      .reduce((previous, key) => {
        const name = getName(key);
        const filter$$1 = filtersWithTranslatedApiLabels[name] || {};
        const filterList = get(filter$$1, 'list', []);

        previous[name] = {
          ...filter$$1,
          list: key === 'color' ? filterList : sortBy(filterList, ['label'])
        };

        return previous;
      }, {});
  };

  const replaceApiLabelWithI18nLabel = (i18n, filterName, filterList) => {
    return filterList.map(item => {
      if (item.id === undefined) {
        return;
      }

      if (i18n[`dynamicLabels.${filterName}.${item.id}`]) {
        item.label = i18n[`dynamicLabels.${filterName}.${item.id}`];
      }

      return item;
    });
  };

  const prepareFiltersTrackingScreen = ({ data }) => {
    const fieldValue = field => {
      const keys$$1 = Object.keys(data[field]).filter(key => data[field][key]);

      return keys$$1.length > 0 ? `${field}|${keys$$1.join('|')}` : '';
    };

    const notAllowedTypes = ['engineType', 'transmissionType'];

    return Object.keys(data)
      .filter(element => notAllowedTypes.findIndex(type => type === element))
      .map(fieldValue)
      .join('~');
  };

  /*
  @bmwkit/fetch-image
  Version: 0.0.1
  (c) Interone
  */

  function unfetch$1(url, options) {
  	options = options || {};
  	return new Promise( (resolve, reject) => {
  		let request = new XMLHttpRequest();

  		request.open(options.method || 'get', url, true);

  		for (let i in options.headers) {
  			request.setRequestHeader(i, options.headers[i]);
  		}

  		request.withCredentials = options.credentials=='include';

  		request.onload = () => {
  			resolve(response());
  		};

  		request.onerror = reject;

  		request.send(options.body || null);

  		function response() {
  			let keys = [],
  				all = [],
  				headers = {},
  				header;

  			request.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, (m, key, value) => {
  				keys.push(key = key.toLowerCase());
  				all.push([key, value]);
  				header = headers[key];
  				headers[key] = header ? `${header},${value}` : value;
  			});

  			return {
  				ok: (request.status/100|0) == 2,		// 200-299
  				status: request.status,
  				statusText: request.statusText,
  				url: request.responseURL,
  				clone: response,
  				text: () => Promise.resolve(request.responseText),
  				json: () => Promise.resolve(request.responseText).then(JSON.parse),
  				blob: () => Promise.resolve(new Blob([request.response])),
  				headers: {
  					keys: () => keys,
  					entries: () => all,
  					get: n => headers[n.toLowerCase()],
  					has: n => n.toLowerCase() in headers
  				}
  			};
  		}
  	});
  }

  if (!self.fetch) self.fetch = unfetch$1;

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var FetchImage = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',[(_vm.forceUrl)?[_vm._t("default",null,{"fetchedImage":_vm.url})]:[_c('FetchJson',{attrs:{"promise":_vm.promise},scopedSlots:_vm._u([{key:"default",fn:function({ fetchedJson }){return _c('div',{staticClass:"tw-w-full tw-h-full"},[_vm._t("default",null,{"fetchedImage":fetchedJson})],2)}}],null,true)})]],2)},staticRenderFns: [],
    name: 'FetchImage',
    components: {
      FetchJson
    },
    props: {
      url: {
        type: String,
        required: true,
      },
      forceUrl: {
        type: Boolean,
        required: true,
        default: false
      },
      options: {
        type: Object,
        default() {
          return {};
        },
      }
    },
    computed: {
      promise() {
        return this.fetchImagePromise(this.url, this.options);
      },
    },
    methods: {
      fetchImagePromise(url, options) {
        const arrayBufferToBase64 = buffer => {
          let binary = '';

          [].slice.call(new Uint8Array(buffer)).forEach(b => {
            return (binary += String.fromCharCode(b));
          });

          return window.btoa(binary);
        };
        return fetch(this.url, this.options).then(
          response => {
            if (!response.ok) {
              throw Error(response.statusText);
            }
            return response.arrayBuffer().then(buffer => {
              const base64Flag = 'data:image/jpeg;base64,';
              const imageStr = arrayBufferToBase64(buffer);
              return base64Flag + imageStr;
            });
          }
        );

      }
    },
    errorCaptured(err, vm, info) {
      console.warn(`${err.stack}\n\nfound in ${info} inside FetchJson component`);
      this.$emit('error', err);
      return false;
    },
  };

  /**
   * vue-promised v1.0.0
   * (c) 2018 Eduardo San Martin Morote <posva13@gmail.com>
   * @license MIT
   */

  function assert$1 (condition, message) {
    if (!condition) {
      // useful when testing
      // console.warn(`[vue-promised] ${message}`)
      throw new Error(("[vue-promised] " + message))
    }
  }

  var Promised$1 = {
    props: {
      tag: {
        type: String,
        default: 'span',
      },
      promise: {
        // allow polyfied Promise
        validator: function (p) { return p && typeof p.then === 'function' && typeof p.catch === 'function'; },
      },
      pendingDelay: {
        type: [Number, String],
        default: 200,
      },
    },

    data: function () { return ({
      resolved: false,
      data: null,
      error: null,

      isDelayElapsed: false,
    }); },

    render: function render (h) {
      if (this.$scopedSlots.combined) {
        var node = this.$scopedSlots.combined({
          isPending: !this.resolved,
          isDelayOver: this.isDelayElapsed,
          data: this.data,
          error: this.error,
        });
        assert$1(
          (Array.isArray(node) && node.length === 1) || node,
          'Provided "combined" scoped-slot cannot be empty and must contain one single children'
        );
        return Array.isArray(node) ? node[0] : node
      }

      if (this.error) {
        assert$1(this.$scopedSlots.rejected, 'No slot "rejected" provided. Cannot display the error');
        var node$1 = this.$scopedSlots.rejected(this.error);
        assert$1(
          (Array.isArray(node$1) && node$1.length) || node$1,
          'Provided slot "rejected" is empty. Cannot display the error'
        );
        return Array.isArray(node$1) ? convertVNodeArray$1(h, this.tag, node$1) : node$1
      }

      var defaultSlot = this.$slots.default;
      if (this.resolved) {
        if (this.$scopedSlots.default) {
          var node$2 = this.$scopedSlots.default(this.data);
          assert$1(
            (Array.isArray(node$2) && node$2.length) || node$2,
            'Provided default scoped-slot is empty. Cannot display the data'
          );
          return Array.isArray(node$2) ? convertVNodeArray$1(h, this.tag, node$2) : node$2
        }
        assert$1(defaultSlot, 'No default slot provided. Cannot display the data');
        assert$1(defaultSlot.length, 'Provided default slot is empty. Cannot display the data');
        return convertVNodeArray$1(h, this.tag, defaultSlot)
      }

      if (!this.isDelayElapsed) { return h() }

      var pendingSlot = this.$slots.pending;
      assert$1(pendingSlot, 'No "pending" slot provided. Cannot display pending state');
      assert$1(pendingSlot.length, 'Provided "pending" slot is empty. Cannot display pending state');
      return convertVNodeArray$1(h, this.tag, pendingSlot)
    },

    watch: {
      promise: {
        handler: function handler (promise) {
          var this$1 = this;

          if (!promise) { return }
          this.resolved = false;
          this.error = null;
          this.setupDelay();
          promise
            .then(function (data) {
              if (this$1.promise === promise) {
                this$1.data = data;
                this$1.resolved = true;
              }
            })
            .catch(function (err) {
              if (this$1.promise === promise) {
                this$1.error = err;
                this$1.resolved = true;
              }
            });
        },
        immediate: true,
      },
    },

    methods: {
      setupDelay: function setupDelay () {
        var this$1 = this;

        if (this.pendingDelay > 0) {
          this.isDelayElapsed = false;
          if (this.timerId) { clearTimeout(this.timerId); }
          this.timerId = setTimeout(function () { return (this$1.isDelayElapsed = true); }, this.pendingDelay);
        } else {
          this.isDelayElapsed = true;
        }
      },
    },
  };

  function convertVNodeArray$1 (h, wrapperTag, nodes) {
    if (nodes.length > 1 || !nodes[0].tag) { return h(wrapperTag, {}, nodes) }
    return nodes[0]
  }

  const ERROR_CODES = {
    UNKNOWN: 1000,
    INITIALIZATION_FAILED: 1001,
    VEHICLE_UNAVAILABLE: 1002,
    FINANCIAL_OFFER_UNAVAILABLE: 1003,
  };

  const DEFAULT_ATTRIBUTES = {
    requestedURL: 'na',
    errorCode: 'na',
    linkedPage: {
      pageInfo: {
        pageID: 'na',
      },
    },
    linkedProduct: {
      productInfo: {
        productID: 'na',
      },
    },
  };

  const DEFAULT_CATEGORY = {
    primaryCategory: 'new car stock locator - importers',
    subCategory1: 'na',
  };

  const DETAILS_PAGE_ATTRIBUTES = {
    search: {
      label: 'na',
      state: 'na',
      term: 'na',
      unit: 'na',
    },
  };
  const TRACKING_EVENT_ERROR = 'STOCK_LOCATOR::ERROR_EVENT';
  const TRACKING_EVENT_START = 'STOCK_LOCATOR::START_EVENT';
  const TRACKING_EVENT_ENTER_PAGE = 'STOCK_LOCATOR::ENTER_PAGE';
  const TRACKING_EVENT_RFX_CLICK = 'STOCK_LOCATOR::RFX_CLICK';
  const TRACKING_EVENT_EQUIPMENT_LAYER_OPENED =
    'STOCK_LOCATOR::EQUIPMENT_LAYER_OPENED';
  const TRACKING_EVENT_SORT_CHANGE = 'STOCK_LOCATOR::SORT_CHANGE';
  const TRACKING_EVENT_FILTER_CHANGE = 'STOCK_LOCATOR::FILTER_CHANGE';
  const TRACKING_EVENT_DETAILS_PAGE_DATA =
    'STOCK_LOCATOR::DETAILS_PAGE_DATA';

  const PAGE_TYPE_HOME_PAGE = 'home';
  const PAGE_TYPE_RESULTS_PAGE = 'search';
  const PAGE_TYPE_DETAILS_PAGE = 'vehicle';

  const TRACKING_EVENT_NAME = 'stockcar-tracking-event';

  const SORT_EFFECTS = {
    relevance_asc: 'sl > sort relevance',
    price_asc: 'sl > sort lowest price',
    price_desc: 'sl > sort highest price',
    model_asc: 'sl > sort A-Z',
    model_desc: 'sl > sort Z-A',
    default: 'sl > sort change',
  };

  const FILTER_WHITELIST = [
    'body',
    'color',
    'engine',
    'fuel',
    'marketingModelRange',
    'options',
    'price',
    'radius',
    'series',
    'transmissionType',
  ];

  const FILTER_LABELS = {
    body: 'body type',
    color: 'color',
    engine: 'engine',
    fuel: 'fuel type',
    marketingModelRange: 'marketing model range',
    options: 'options',
    radius: 'radius',
    series: 'series',
    transmissionType: 'transmission',
  };

  /**
   * Create an array of search entries from a map of active filters
   * @param filters
   * @return {Array<SearchEntry>[]}
   */
  function createSearchAttributes(filters) {
    return Object.keys(filters)
      .filter((key) => FILTER_WHITELIST.includes(key))
      .map((key) => {
        const activeFilters = filters[key];
        return createSearchAttributesForFilter(key, activeFilters);
      })
      .flat();
  }

  /**
   * @typedef SearchEntry
   *
   * @property {String} label
   * @property {String} state
   * @property {String} term
   * @property {String} unit
   */

  /**
   *
   * @param {String} type
   * @param {Object<String, Boolean>} filters
   * @return {Array<SearchEntry>}
   */
  function createSearchAttributesForFilter(type, filters) {
    if (type === 'price') {
      return createPriceSearchEntries(filters);
    } else if (type === 'radius') {
      return createLocationSearchEntries(filters);
    }
    return Object.keys(filters)
      .filter((key) => filters[key])
      .reduce((acc, key) => {
        return [...acc, createSearchAttributesEntry(type, key)];
      }, []);
  }

  /**
   * Creates an array of search entries for the price filter
   * @param {Array<Number>} values
   */
  function createPriceSearchEntries(values$$1) {
    return [
      ...(values$$1.length >= 1
        ? [createSearchAttributesEntry('price', `${values$$1[0]}`, 'price (min)')]
        : []),
      ...(values$$1.length >= 2
        ? [createSearchAttributesEntry('price', `${values$$1[1]}`, 'price (max)')]
        : []),
    ];
  }

  function createLocationSearchEntries(value) {
    return [createSearchAttributesEntry('radius', `${value}`)];
  }

  /**
   * Creates a search array entry for a selected filter
   * @param {String} type
   * @param {String|Number} value
   * @param {String} [label]
   * @return {SearchEntry}
   */
  function createSearchAttributesEntry(type, value, label) {
    if (!label) {
      label = FILTER_LABELS[type] || type;
    }
    return {
      label,
      state: 'user selected',
      term: value,
      unit: type === 'radius' ? 'km' : 'na',
    };
  }

  function dispatchEvent(type, payload) {
    document.dispatchEvent(
      new CustomEvent(TRACKING_EVENT_NAME, {
        detail: {
          type,
          payload,
        },
      })
    );
  }

  class TrackingEventHandler {
    constructor(router, componentData, config, isAuthorMode = false) {
      this.router = router;
      this.componentData = componentData;
      this.config = config;
      this.isAuthorMode = isAuthorMode;
      this.handleTrackingEvent = this.handleTrackingEvent.bind(this);
      document.addEventListener(TRACKING_EVENT_NAME, this.handleTrackingEvent);
      this.initComponentTracking(componentData);
      this.stockLocatorComponent = componentData;
    }

    get routeContext() {
      return this.router.currentRoute.name;
    }

    get rootPage() {
      return get(window, 'dataLayer.pages[0]');
    }

    get stockLocatorComponentId() {
      if (!this.stockLocatorComponent) {
        return 'na';
      }
      return get(this.stockLocatorComponent, 'componentInfo.componentID', 'na');
    }

    get currentPageIndex() {
      if (this.isAuthorMode) {
        return 0;
      }
      if (typeof this.virtualPageIndex === 'number') {
        return this.virtualPageIndex;
      }
      const getPageId = get(
        window,
        'digital.tracking.lib.getLastActiveVirtualPageId',
        () => {}
      );
      return getPageId();
    }

    get currentPage() {
      const pageIndex = this.currentPageIndex;
      if (!pageIndex) {
        return;
      }
      return get(window, `dataLayer.pages[${pageIndex}]`);
    }

    get currentPageId() {
      const currentPage = this.currentPage;
      if (!currentPage) {
        return '';
      }
      return get(currentPage, 'page.pageInfo.pageID', '');
    }

    get currentVin() {
      return get(this.router.currentRoute, 'params.id');
    }

    get language() {
      const parts = this.config.languagePageName.split('_');
      return parts[0];
    }

    get defaultEventAttributes() {
      const attributes = Object.assign({}, DEFAULT_ATTRIBUTES);
      attributes.linkedPage.pageInfo.pageID = this.currentPageId || 'na';
      attributes.linkedComponent = [
        {
          componentInfo: {
            componentID: this.stockLocatorComponentId,
          },
        },
      ];
      return attributes;
    }

    initComponentTracking(componentData) {
      if (this.isAuthorMode) {
        return;
      }

      this._initComponentTracking(componentData);
    }

    trackVirtualPage({ name }) {
      const page = {
        account: ['BMW_AG'],
        cart: {
          cartID: 'na',
          price: {
            basePrice: 'na',
            voucherCode: 'na',
            voucherDiscount: 'na',
            currency: 'na',
            taxRate: 'na',
            cartTotal: 'na',
          },
          item: [],
        },
        component: this.stockLocatorComponent ? [this.stockLocatorComponent] : [],
        page: {
          pageInfo: {
            pageID: `sl > new car stock locator - importer > ${name}`,
            pageName: `sl > ${name}`,
            author: 'Proximity Technology GmbH',
            destinationUrl: document.location.href,
            referringUrl: document.referrer,
            sysEnv: get(this.rootPage, 'page.pageInfo.devEnv', 'na'),
            variant: 'virtual page',
            version: 'custom',
            language: this.language,
            geoRegion: get(this.rootPage, 'page.pageInfo.geoRegion', 'na'),
          },
          category: {
            primaryCategory: 'new car stock locator - importer',
            subCategory1: 'na',
            subCategory2: 'na',
            pageType: 'search',
          },
          attributes: {
            brand: 'bmw',
            currencyCode: this.config.currencyCode || 'na',
            timeZone: this.config.timeZoneTracking || 'na',
          },
        },
        product: [],
        dealer: [],
        user: {},
        version: {
          version: '1.0',
          attributes: {
            ceddlTagConcept: 'bmw ceddl 20201026',
          },
        },
      };

      this.closeVirtualPage();

      const { pageId } = this._addVirtualPage(page);
      this.virtualPageIndex = pageId;
      this._track('newCar-stocklocator_pageload');
    }

    closeVirtualPage() {
      const pageIndex = this.currentPageIndex;
      if (!pageIndex) {
        return;
      }

      this._closeVirtualPage(pageIndex);
    }

    trackVehicles(vehicles) {
      vehicles.forEach((vehicle) => this.trackVehicle(vehicle));
    }

    _prepareSA(interior = [], exterior = [], options = [], packages = [], line = [], modvar = []) {
      return [...interior, ...exterior, ...options, ...packages, ...line, ...modvar]
        .map((option) => option.code)
        .sort();
    }

    _buildProductID(vehicle) {
      const saCodes = this._prepareSA(
        vehicle.attributes.interior,
        vehicle.attributes.exterior,
        vehicle.attributes.options,
        vehicle.attributes.packages,
        vehicle.attributes.line,
        vehicle.attributes.modvar
      );
      return `${vehicle.attributes.modelValue}:${saCodes.join(
      ':'
    )}`.toUpperCase();
    }

    _prepareProductName({ series, model }) {
      return `${series} ${model}`;
    }

    trackVehicle(vehicle) {
      // we need a virtual page index to link the page and the product
      const pageIndex = this.currentPageIndex;
      if (!pageIndex) {
        return;
      }

      const productID = this._buildProductID(vehicle);
      const vehicleType = get(vehicle, 'attributes.vehicleType', 'na');

      const product = {
        productInfo: {
          productID,
          productName: this._prepareProductName(vehicle.attributes),
          manufacturer: 'bmw',
          color: get(vehicle, 'attributes.simpleColor', 'na'),
        },
        category: {
          primaryCategory: 'new car',
          subCategory1: 'build to stock',
          subCategory2: 'not ready for dcs',
          productType: 'vehicle',
        },
        attributes: {
          mmdr: get(vehicle, 'attributes.modelRange', 'na'),
          modelCode: get(vehicle, 'attributes.modelValue', 'na'),
          bodyType: get(vehicle, 'attributes.body', 'na'),
          fuelType: get(vehicle, 'attributes.fuel', 'na'),
          hybridVersion: vehicleType !== 'none' ? vehicleType : 'NOHY',
          motorization: get(vehicle, 'attributes.engine', 'na'),
          gearing: get(vehicle, 'attributes.transmission', 'na'),
          productionYear: 'na',
          yearOfRegistration: 'na',
          stockID: get(vehicle, 'attributes.groupReference', 'na'),
          series: get(vehicle, 'attributes.series', 'na'),
        },
      };

      this._initProductTracking(product, pageIndex);

      const currentPage = this.currentPage;

      if (currentPage && Array.isArray(currentPage.dealer)) {
        currentPage.dealer.forEach((dealer) => {
          const dealerId = get(dealer, 'dealerInfo.dealerGroupID');
          const outletId = get(dealer, 'dealerInfo.dealerOutletID');

          if (!dealerId || !outletId) {
            return;
          }

          const dealerKey = get(vehicle, 'dealer.dealerKey');

          if (dealer.attributes && dealerKey === `${dealerId}_${outletId}`) {
            dealer.attributes.linkedProduct =
              dealer.attributes.linkedProduct || [];
            dealer.attributes.linkedProduct.push({
              productInfo: {
                productID,
              },
            });
          }
        });
      }

      if (currentPage && currentPage.page && currentPage.page.pageInfo) {
        currentPage.page.pageInfo.linkedProduct =
          currentPage.page.pageInfo.linkedProduct || [];
        currentPage.page.pageInfo.linkedProduct.push({
          productInfo: {
            productID,
          },
        });
      }
    }

    trackDealer(dealers) {
      const currentPage = this.currentPage;

      // we need a virtual page index to link the page and the product
      if (!currentPage) {
        return;
      }

      currentPage.dealer = dealers
        .map((dealer) => this._getDealerTrackingData(dealer))
        .filter((dealer) => !!dealer);
    }

    trackEvent(event) {
      if (this.isAuthorMode) {
        return;
      }

      this._addEventTracking(event);
      this._track('newCar-stocklocator_event');
    }

    _initProductTracking(product, pageIndex) {
      if (this.isAuthorMode) {
        return;
      }
      const initProductTracking = get(
        window,
        'digitals2.tracking.api.initProductTracking',
        () => {}
      );
      initProductTracking(product, pageIndex);
    }

    _addVirtualPage(page) {
      if (this.isAuthorMode) {
        return { pageId: false };
      }
      const addVirtualPage = get(
        window,
        'digitals2.tracking.api.addVirtualPage',
        () => ({ pageId: false })
      );
      return addVirtualPage(page);
    }

    _closeVirtualPage(pageIndex) {
      if (this.isAuthorMode) {
        return;
      }
      const closeVirtualPage = get(
        window,
        'digitals2.tracking.api.closeVirtualPage',
        () => {}
      );
      closeVirtualPage(pageIndex);
    }

    _initComponentTracking(componentData) {
      if (this.isAuthorMode) {
        return;
      }
      const initComponentTracking = get(
        window,
        'digitals2.tracking.api.initComponentTracking',
        () => {}
      );
      initComponentTracking(componentData, 0);
    }

    _track(eventName) {
      if (this.isAuthorMode) {
        return;
      }

      const getCurrentPageIndex = get(
        window,
        'digitals2.tracking.api.getCurrentPageIndex',
        () => 0
      );
      const getPageObject = get(
        window,
        'digitals2.tracking.api.getPageObject',
        () => ({})
      );
      const pageIndex = getCurrentPageIndex();
      const pageObjectCopy = cloneDeep(getPageObject(pageIndex));

      document.dispatchEvent(
        new CustomEvent(eventName, {
          detail: pageObjectCopy,
        })
      );
    }

    _eventCookieSave(event) {
      if (this.isAuthorMode) {
        return;
      }
      const eventCookieSave = get(
        window,
        'digitals2.tracking.api.eventCookieSave',
        () => {}
      );
      eventCookieSave(event); // if eventType delayed - store event in cookie file and populate after new page loads
    }

    _addEventTracking(event) {
      if (this.isAuthorMode) {
        return;
      }
      const addEventTracking = get(
        window,
        'digitals2.tracking.api.addEventTracking',
        () => {}
      );
      addEventTracking({}, event, 0); // if eventType delayed - store event in cookie file and populate after new page loads
    }

    _getDealerTrackingData(dealer) {
      if (!dealer) {
        return;
      }

      const keyParts = dealer.dealerKey.split('_');

      return {
        dealerInfo: {
          dealerGroup: 'na',
          dealerGroupID: keyParts.length >= 1 ? keyParts[0] : 'na',
          dealerOutletName: dealer.dealerName,
          dealerOutletID: keyParts.length >= 2 ? keyParts[1] : 'na',
        },
        attributes: {
          selectionState: 'selected',
          linkedPage: {
            pageInfo: {
              pageID: this.currentPageId || 'na',
            },
          },
          linkedComponent: [
            {
              componentInfo: {
                componentID: this.stockLocatorComponentId,
              },
            },
          ],
          linkedProduct: [],
        },
      };
    }

    handleTrackingEvent(evt) {
      const { type, payload } = evt.detail;
      switch (type) {
        case TRACKING_EVENT_ENTER_PAGE:
          return this.trackVirtualPage(payload);
        case TRACKING_EVENT_EQUIPMENT_LAYER_OPENED:
          return this.trackEquipmentLayerOpenedEvent(payload);
        case TRACKING_EVENT_RFX_CLICK:
          return this.trackRfxClickEvent(payload);
        case TRACKING_EVENT_START:
          return this.trackStartEvent(payload);
        case TRACKING_EVENT_FILTER_CHANGE:
          return this.trackFilterChangeEvent(payload);
        case TRACKING_EVENT_SORT_CHANGE:
          return this.trackSortChangeEvent(payload);
        case TRACKING_EVENT_DETAILS_PAGE_DATA:
          return this.trackDetailsPageData(payload);
        case TRACKING_EVENT_ERROR:
          return this.trackErrorEvent(payload);
      }
    }

    trackDetailsPageData({ vehicles }) {
      let dealers = vehicles.map((vehicle) => vehicle.dealer);
      dealers = uniqBy(dealers, 'dealerKey');
      this.trackDealer(dealers);
      this.trackVehicles(vehicles);
    }

    trackStartEvent({ filter: filter$$1 }) {
      const attributes = {
        ...this.defaultEventAttributes,
        search: createSearchAttributes(filter$$1),
      };
      const event = this.createEvent({
        eventName: 'interactions',
        eventAction: 'component load',
        type: 'interaction',
        effect: 'sl > stock locator started',
        attributes,
      });
      this.trackEvent(event);
    }

    trackRfxClickEvent({ url, type }) {
      let isExternalClick = false;

      if (url.startsWith('http://') || url.startsWith('https://')) {
        // check if target url is on same host as current page
        const urlWithoutProtocol = url.replace(/https?:\/\//g, '');
        isExternalClick = !urlWithoutProtocol.startsWith(window.location.host);
      }
      const eventAction = isExternalClick ? 'outbound click' : 'internal click';
      const attributes = {
        ...this.defaultEventAttributes,
        ...DETAILS_PAGE_ATTRIBUTES,
      };
      const event = this.createEvent({
        eventAction,
        attributes,
        effect: `sl > ${type} CTA clicked`,
      });
      this.trackEvent(event);
    }

    trackEquipmentLayerOpenedEvent({ saCode }) {
      const attributes = {
        ...this.defaultEventAttributes,
        ...DETAILS_PAGE_ATTRIBUTES,
      };
      const event = this.createEvent({
        eventName: 'search',
        eventAction: 'drop-down',
        effect: `sl > equipment details viewed - ${saCode}`,
        attributes,
      });
      this.trackEvent(event);
    }

    trackSortChangeEvent({ sort, filter: filter$$1, location = {} }) {
      const sortAttribute = get(sort, 'sortingField[1]', 'na');
      const sortDirection = get(sort, 'sortingDirection[1]', 'na');

      let key;

      if (sortAttribute !== 'na' && sortDirection !== 'na') {
        key = `${sortAttribute}_${sortDirection}`;
      } else {
        key = 'default';
      }

      const attributes = {
        ...this.defaultEventAttributes,
        search: createSearchAttributes(filter$$1),
      };
      const event = this.createEvent({
        attributes,
        eventName: 'search',
        eventAction: 'drop-down',
        effect: SORT_EFFECTS[key] || 'na',
      });
      this.trackEvent(event);
    }

    trackFilterChangeEvent({ filter: filter$$1 = {}, location = {} }) {
      const attributes = {
        ...this.defaultEventAttributes,
        search: createSearchAttributes(filter$$1),
      };
      const event = this.createEvent({
        attributes,
        eventName: 'search',
        eventAction: 'internal click',
        effect: 'sl > user searched for vehicles',
      });
      this.trackEvent(event);
    }

    trackErrorEvent({ action = 'internal click', error, code, cause, effect }) {
      const attributes = Object.assign({}, this.defaultEventAttributes || {}, {
        errorCode: error.status || code || 'na',
        requestedURL: error.url || 'na',
      });
      const categories = Object.assign({
        primaryCategory: 'new car stock locator - importers',
        subCategory1: error.status,
      });
      const event = this.createEvent({
        eventName: 'error',
        eventAction: action,
        type: 'backend 1st party',
        cause: error.message || cause || 'na',
        effect: error.effect || effect || 'na',
        eventPoints: 'na',
        attributes,
        categories,
      });
      this.trackEvent(event);
    }

    createEvent({
      eventName = 'interaction',
      eventAction = 'internal click',
      eventPoints = 'na',
      type = 'success',
      cause = 'default',
      effect,
      category = DEFAULT_CATEGORY,
      attributes,
    }) {
      return {
        eventInfo: {
          eventName,
          eventAction,
          eventPoints,
          type,
          timestamp: new Date().getTime(),
          effect,
          cause,
        },
        category,
        attributes,
      };
    }

    static dispatchEvent(type, payload) {
      dispatchEvent(type, payload);
    }
  }

  class ExtendableError extends Error {
    constructor(message = '') {
      super(message);

      // extending Error is weird and does not propagate `message`
      Object.defineProperty(this, 'message', {
        configurable: true,
        enumerable: false,
        value: message,
        writable: true,
      });

      Object.defineProperty(this, 'name', {
        configurable: true,
        enumerable: false,
        value: this.constructor.name,
        writable: true,
      });

      if (Error.hasOwnProperty('captureStackTrace')) {
        Error.captureStackTrace(this, this.constructor);
        return;
      }

      Object.defineProperty(this, 'stack', {
        configurable: true,
        enumerable: false,
        value: new Error(message).stack,
        writable: true,
      });
    }
  }

  class TrackingError extends ExtendableError {
    constructor(message, status, effect, url, requestDuration) {
      super(message);
      this._status = status;
      this._effect = effect;
      this._url = url;
      this._requestDuration = requestDuration;
    }

    get url() {
      return this._url;
    }

    get requestDuration() {
      return this._requestDuration;
    }

    get status() {
      return this._status;
    }

    set effect(value) {
      this._effect = value;
    }

    get effect() {
      if (!this._effect) {
        return this._getEffectFromStatusCode();
      }
      return this._effect;
    }

    _getEffectFromStatusCode() {
      switch (this._status) {
        case 400:
          return 'sl > 400 Bad Request';
        case 401:
          return 'sl > 401 Unauthorized';
        case 403:
          return 'sl > 403 Forbidden';
        case 404:
          return 'sl > 404 Not Found';
        case 405:
          return 'sl > 405 Method Not Allowed';
        case 408:
          return 'sl > 408 Request Timeout';
        case 500:
          return 'sl > 500 Internal Server Error';
        case 501:
          return 'sl > 501 Not Implemented';
        case 502:
          return 'sl > 502 Bad Gateway';
        case 503:
          return 'sl > 503 Service Unavailable';
        case 504:
          return 'sl > 504 Gateway Timeout';
      }
    }
  }

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var StockcarFetchJson = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.urlType !== 'homepageImage' && _vm.urlType !== 'filters')?_c('FetchJson',{attrs:{"promise":_vm.fetchPromise},scopedSlots:_vm._u([{key:"default",fn:function({ fetchedJson }){return _c('div',{},[_vm._t("default",null,{"fetchedJson":_vm.transformingFunction(fetchedJson)})],2)}}],null,true)}):(_vm.urlType === 'homepageImage' && _vm.urlType !== 'filters')?_c('FetchImage',{attrs:{"url":_vm.url,"force-url":true,"options":_vm.fetchOptions},scopedSlots:_vm._u([{key:"default",fn:function({ fetchedImage }){return _c('div',{},[_vm._t("default",null,{"fetchedImage":fetchedImage})],2)}}],null,true)}):(_vm.urlType === 'filters')?_c('Promised',{attrs:{"promise":_vm.fetchPromise},scopedSlots:_vm._u([{key:"combined",fn:function({ isPending, data }){return _c('div',{},[_vm._t("default",null,{"fetchedJson":_vm.transformingFunction(data),"isPending":isPending})],2)}}],null,true)}):_vm._e()},staticRenderFns: [],
    name: 'StockcarFetchJson',
    components: {
      FetchImage,
      FetchJson,
      Promised: Promised$1,
    },
    props: {
      apiConfig: {
        type: Object,
        default() {
          return {};
        },
      },
      imageSize: {
        type: String,
        default: '',
      },
      urlType: {
        type: String,
        default: '',
      },
      market: {
        type: String,
        default: 'bmw_de',
      },
      locale: {
        type: String,
        default: 'de_DE',
      },
      parameters: {
        type: Object,
        default() {
          return {};
        },
      },
      transformingFunction: {
        type: Function,
        default: (json) => json,
      },
      currentGeolocation: {
        type: Object,
        default: () => {},
      },
      disableRequests: {
        type: Boolean,
        default: false,
      },
    },
    data() {
      return {
        url: '',
        fetchPromise: new Promise(() => ({})),
        baseUrl: this.apiConfig.baseUrl,
        fetchOptions: {
          method: 'GET',
          headers: {
            'x-api-key': this.apiConfig.xApiKey,
          },
        },
        urls: {
          homepage: {
            // TODO: remove offset when necessary
            string: `vehicles/${this.market}/best-sellers?locale=${this.locale}`,
            needParams: false,
          },
          details: {
            string: `vehicle/${this.parameters.id}?locale=${this.locale}`,
            needParams: false,
          },
          options: {
            string: `vehicles/${this.market}/options?locale=${this.locale}&groupReference=`,
            needParams: false,
          },
          list: {
            string: `vehicles/${this.market}?locale=${this.locale}`,
            needParams: true,
          },
          filters: {
            string: `filters-new/${this.market}?locale=${this.locale}`,
            needParams: true,
            isFilters: true,
          },
          homepageImage: {
            string: `vehicles/${this.market}/merge/most-expensive${this.imageSize}?locale=${this.locale}`,
            needParams: false,
            isImage: true,
          },
          dealers: {
            string: `dealers/${this.market}`,
            needParams: false,
          },
          bsi: {
            string: `bsi/${this.market}`,
            needParams: false,
          },
        },
      };
    },
    watch: {
      parameters() {
        this.createApiCall();
      },
      currentGeolocation() {
        this.createApiCall();
      },
    },
    mounted() {
      // hack to avoid most of the time double request when still pending for geolocation
      setTimeout(() => {
        if (!this.currentGeolocation) {
          this.createApiCall();
        }
      }, 250);
    },
    methods: {
      fetch(url, options, emit = true) {
        let cache = Vue.cache || [];
        if (cache[url]) {
          if (emit) this.$emit('onResponse', cache[url]);
          return Promise.resolve(cache[url]);
        }
        return fetch(url, options)
          .then(
            (resp) => {
              if (!resp.ok) {
                throw new TrackingError(
                  'could not load data - system error',
                  res.status,
                  '',
                  url
                );
              }
              return resp.json();
            },
            () => {
              throw new TrackingError(
                'could not load data - network error',
                res.status,
                '',
                url
              );
            }
          )
          .then((jsonResponse) => {
            cache[url] = jsonResponse;
            Vue.cache = cache;
            if (emit) this.$emit('onResponse', jsonResponse);
            return jsonResponse;
          })
          .catch((err) => {
            dispatchEvent(TRACKING_EVENT_ERROR, {
              error: err,
              code: ERROR_CODES.INITIALIZATION_FAILED,
              cause: 'error during slwa request',
              effect: 'stock locator is unavailable',
            });
          });
      },
      keysToLowerCase(source) {
        return Object.keys(source).reduce((destination, key) => {
          destination[key.toLowerCase()] = source[key];
          return destination;
        }, {});
      },
      matchOptions(vehicleAttrs, options) {
        const optionsAttrs = options.data.attributes;
        const keys = Object.keys(optionsAttrs);
        return keys.reduce((acc, key) => {
          acc[key] = [];
          Object.keys(optionsAttrs[key]).forEach((code) => {
            acc[key].push({
              ...optionsAttrs[key][code],
              code,
            });
          });
          return acc;
        }, {});
      },
      prepareDetailsPromise() {
        const optionsUrl = this.getUrlByType(this.urls.options, 'options');
        const promises = [
          this.fetch(this.url, this.fetchOptions, false),
          this.fetch(optionsUrl, this.fetchOptions, false),
        ];
        return Promise.all(promises).then((response) => {
          const vehicle = response[0];
          const attributes = {
            ...vehicle.data.attributes,
            ...this.matchOptions(vehicle.data.attributes, response[1]),
          };
          const data = {
            ...response[0],
            data: { attributes },
          };
          this.$emit('onResponse', data);
          return data;
        });
      },
      createApiCall() {
        if (!this.disableRequests) {
          this.prepareUrl();
          if (this.urlType === 'details') {
            this.fetchPromise = this.prepareDetailsPromise();
          } else {
            this.fetchPromise = this.fetch(this.url, this.fetchOptions);
          }
        }
      },
      getUrlByType(url, type) {
        switch (type) {
          case 'homepage':
            return this.getApiUrl(url.string, url.needParams);
          case 'options':
            return `${this.getApiUrl(url.string, url.needParams)}${
            this.parameters.id
          }`;
          case 'details':
            return `${this.getApiUrl(url.string, url.needParams)}`;
          default:
            return this.getApiUrl(url.string, url.needParams, url.isFilters);
        }
      },
      prepareUrl() {
        if (this.urls.hasOwnProperty(this.urlType)) {
          this.url = this.getUrlByType(this.urls[this.urlType], this.urlType);
        }
      },
      getApiUrl(url, needParams, isFilter = false) {
        const parameters = needParams ? this.prepareUrlParams(isFilter) : '';
        return `${this.baseUrl}/${url}${parameters}`;
      },
      prepareUrlParams(isFilter) {
        const sorting = isFilter
          ? ''
          : getSortingParameters(this.parameters.sorting);

        const filters = {
          ...this.parameters.filters,
          ...(!!this.$allOptions && {
            allOptions: {
              ...this.$allOptions,
            },
          }),
        };

        return `&${getFiltersParameters(
        filters,
        this.currentGeolocation
      )}${sorting}`;
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside StockcarFetchJson component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  /*
  base-core
  Version: 0.0.1
  (c) Interone
  */

  /*
  base-core
  Version: 1.0.7
  (c) Interone
  */

  /*
  |-------------------------------------------------------------------------------
  | Colors                                    https://tailwindcss.com/docs/colors
  |-------------------------------------------------------------------------------
  |
  | Here you can specify the colors used in your project.
  |
  | Usage:
  |
  | For text colors:
  |  text-{colorname}
  | For background colors:
  |  bg-{colorname}
  | For border colors:
  |  border-{colorname}
  |
  */

  const colors = {
    transparent: 'transparent',
    // Blue (primary)
    'primary-500': '#1c69d4',
    'primary-900': '#0653b6',
    // Blue
    'blue-100': '#2d64ae',
    // Grey
    'grey-200': '#f2f2f2',
    'grey-300': '#e6e6e6',
    'grey-400': '#bbbbbb',
    'grey-500': '#8e8e8e',
    'grey-600': '#666666',
    'grey-800': '#4d4d4d',
    'grey-900': '#262626',
    // Others
    'third-500': '#ffad1f',
    'fourth-500': '#d20000',
    'fifth-500': '#3db014',
    white: '#ffffff',
  };

  var colors_1 = colors;

  /*
  |-----------------------------------------------------------------------------
  | Border colors                     https://tailwindcss.com/docs/border-color
  |-----------------------------------------------------------------------------
  |
  | Here is where you define your border colors. By default these use the
  | color palette we defined above, however you're welcome to set these
  | independently if that makes sense for your project.
  |
  | Take note that border colors require a special "default" value set
  | as well. This is the color that will be used when you do not
  | specify a border color.
  |
  | Class name: .border-{color}
  |
  */



  const borderColors = Object.assign(
    {
      default: colors_1['grey-light'],
    },
    colors_1
  );

  /*
    |-----------------------------------------------------------------------------
    | Screens                      https://tailwindcss.com/docs/responsive-design
    |-----------------------------------------------------------------------------
    |
    | Screens in Tailwind are translated to CSS media queries. They define the
    | responsive breakpoints for your project. By default Tailwind takes a
    | "mobile first" approach, where each screen size represents a minimum
    | viewport width. Feel free to have as few or as many screens as you
    | want, naming them in whatever way you'd prefer for your project.
    |
    | Tailwind also allows for more complex screen definitions, which can be
    | useful in certain situations. Be sure to see the full responsive
    | documentation for a complete list of options.
    |
    | Class name: .{screen}:{utility}
    |
    */

  const breakpoints = {
    sm: '576px',
    medium: '600px',
    md: '768px',
    lg: '992px',
    large: '1024px',
    xl: '1200px',
    xlarge: '1760px',
  };

  var breakpoints_1 = breakpoints;

  const breakpointsInt = {};
  Object.keys(breakpoints_1).forEach(breakpoint => {
    breakpointsInt[breakpoint] = parseInt(
      breakpoints_1[breakpoint].split('px')[0],
      10
    );
  });
  let EventBus;
  const THROTTLE_MS_VALUE = 100;

  let prevWidth = null;
  let prevHeight = null;

  function getDimensions() {
    const width = window.innerWidth;
    const height = window.innerHeight;

    EventBus.$emit('windowResize', { width, height, prevWidth, prevHeight });
    EventBus.$data.windowData = { width, height, prevWidth, prevHeight };

    prevWidth = width;
    prevHeight = height;

    return { width, height, prevWidth, prevHeight };
  }
  function getBreakpoint({ width }) {
    switch (true) {
    case width < breakpointsInt.sm:
      EventBus.$data.activeBreakpoint = 'xs';
      EventBus.$emit('breakpointChange', 'xs');
      break;
    case breakpointsInt.sm <= width && width < breakpointsInt.md:
      EventBus.$data.activeBreakpoint = 'sm';
      EventBus.$emit('breakpointChange', 'sm');
      break;
    case breakpointsInt.md <= width && width < breakpointsInt.lg:
      EventBus.$data.activeBreakpoint = 'md';
      EventBus.$emit('breakpointChange', 'md');
      break;
    case breakpointsInt.lg <= width && width < breakpointsInt.xl:
      EventBus.$data.activeBreakpoint = 'lg';
      EventBus.$emit('breakpointChange', 'lg');
      break;
    case width >= breakpointsInt.xl:
      EventBus.$data.activeBreakpoint = 'xl';
      EventBus.$emit('breakpointChange', 'xl');
      break;
    }
  }
  function handleResize(e) {
    const pipeline = [() => getDimensions(), sizes => getBreakpoint(sizes)];
    return pipeline.reduce((xs, f) => f(xs), e);
  }
  function handleMouseMove(e) {
    return EventBus.$emit('mousemove', e);
  }
  function handleScroll(event) {
    return requestAnimationFrame(() => EventBus.$emit('scroll', event));
  }

  function throttle$1(callback, wait, context = this) {
    let timeout = null;
    let callbackArgs = null;

    const later = () => {
      callback.apply(context, callbackArgs);
      timeout = null;
    };

    return () => {
      if (!timeout) {
        callbackArgs = arguments;
        timeout = setTimeout(later, wait);
      }
    };
  }

  if (Vue.prototype.$eventBus) {
    EventBus = Vue.prototype.$eventBus;
    EventBus.getBreakpoint = getBreakpoint;
  } else {
    // We need this for future SSR
    EventBus = new Vue();
    EventBus.getBreakpoint = getBreakpoint;
    if (typeof window !== 'undefined') {
      const throttledResizeHandler = throttle$1(
        event => handleResize(event),
        THROTTLE_MS_VALUE
      );

      window.addEventListener('resize', throttledResizeHandler);
      window.addEventListener('mousemove', handleMouseMove);
      window.addEventListener('scroll', handleScroll);

      // we initialize the window size and breakpoints - resize fires sometimes before component init
      handleResize(null);
      setTimeout(() => {
        handleResize(null);
      });
    }

    Vue.prototype.$eventBus = EventBus;
  }

  var EventBus$1 = EventBus;

  const stockcarConfiguredComponentMixin = {
    props: {
      config: {
        type: Object,
        default() {
          return null;
        },
      },
    },
  };

  const stockcarListComponentMixin = {
    props: {
      config: {
        type: Array,
        default() {
          return [];
        },
      },
    },
  };

  const stockcarTranslationComponent = {
    props: {
      i18n: {
        type: Object,
        required: true,
      },
    },
  };

  const stockcarPageMixin = {
    components: {
      StockcarFetchJson,
    },
    props: {
      aemConfig: {
        type: Object,
        default() {
          return {};
        },
      },
      i18n: {
        type: Object,
        default() {
          return {};
        },
      },
      vehicleData: {
        type: Object,
        default() {
          return {};
        },
      },
    },
  };

  const stockcarContentMixin = {
    props: {
      ...stockcarConfiguredComponentMixin.props,
      ...stockcarPageMixin.props,
      ...stockcarTranslationComponent.props,
    },
  };

  const stockcarDetecSizeMixin = {
    data() {
      return {
        device: '',
        breakpoint: '',
      };
    },
    created() {
      this.breakpoint = EventBus$1.$data.activeBreakpoint;
      this.device = this.prepareDevice();
    },
    mounted() {
      EventBus$1.$on('breakpointChange', (breakpoint) => {
        this.breakpoint = breakpoint;
        this.device = this.prepareDevice();
      });
    },
    methods: {
      prepareDevice() {
        if (['lg', 'xl'].indexOf(this.breakpoint) !== -1) {
          return 'desktop';
        }
        if (['md'].indexOf(this.breakpoint) !== -1) {
          return 'tablet';
        }
        if (['xs', 'sm'].indexOf(this.breakpoint) !== -1) {
          return 'mobile';
        }
        return '';
      },
    },
  };

  /**
   * @this {Promise}
   */
  function finallyConstructor(callback) {
    var constructor = this.constructor;
    return this.then(
      function(value) {
        return constructor.resolve(callback()).then(function() {
          return value;
        });
      },
      function(reason) {
        return constructor.resolve(callback()).then(function() {
          return constructor.reject(reason);
        });
      }
    );
  }

  // Store setTimeout reference so promise-polyfill will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var setTimeoutFunc = setTimeout;

  function noop$1() {}

  // Polyfill for Function.prototype.bind
  function bind$1(fn, thisArg) {
    return function() {
      fn.apply(thisArg, arguments);
    };
  }

  /**
   * @constructor
   * @param {Function} fn
   */
  function Promise$2(fn) {
    if (!(this instanceof Promise$2))
      throw new TypeError('Promises must be constructed via new');
    if (typeof fn !== 'function') throw new TypeError('not a function');
    /** @type {!number} */
    this._state = 0;
    /** @type {!boolean} */
    this._handled = false;
    /** @type {Promise|undefined} */
    this._value = undefined;
    /** @type {!Array<!Function>} */
    this._deferreds = [];

    doResolve(fn, this);
  }

  function handle(self, deferred) {
    while (self._state === 3) {
      self = self._value;
    }
    if (self._state === 0) {
      self._deferreds.push(deferred);
      return;
    }
    self._handled = true;
    Promise$2._immediateFn(function() {
      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
      if (cb === null) {
        (self._state === 1 ? resolve : reject$1)(deferred.promise, self._value);
        return;
      }
      var ret;
      try {
        ret = cb(self._value);
      } catch (e) {
        reject$1(deferred.promise, e);
        return;
      }
      resolve(deferred.promise, ret);
    });
  }

  function resolve(self, newValue) {
    try {
      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
      if (newValue === self)
        throw new TypeError('A promise cannot be resolved with itself.');
      if (
        newValue &&
        (typeof newValue === 'object' || typeof newValue === 'function')
      ) {
        var then = newValue.then;
        if (newValue instanceof Promise$2) {
          self._state = 3;
          self._value = newValue;
          finale(self);
          return;
        } else if (typeof then === 'function') {
          doResolve(bind$1(then, newValue), self);
          return;
        }
      }
      self._state = 1;
      self._value = newValue;
      finale(self);
    } catch (e) {
      reject$1(self, e);
    }
  }

  function reject$1(self, newValue) {
    self._state = 2;
    self._value = newValue;
    finale(self);
  }

  function finale(self) {
    if (self._state === 2 && self._deferreds.length === 0) {
      Promise$2._immediateFn(function() {
        if (!self._handled) {
          Promise$2._unhandledRejectionFn(self._value);
        }
      });
    }

    for (var i = 0, len = self._deferreds.length; i < len; i++) {
      handle(self, self._deferreds[i]);
    }
    self._deferreds = null;
  }

  /**
   * @constructor
   */
  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  /**
   * Take a potentially misbehaving resolver function and make sure
   * onFulfilled and onRejected are only called once.
   *
   * Makes no guarantees about asynchrony.
   */
  function doResolve(fn, self) {
    var done = false;
    try {
      fn(
        function(value) {
          if (done) return;
          done = true;
          resolve(self, value);
        },
        function(reason) {
          if (done) return;
          done = true;
          reject$1(self, reason);
        }
      );
    } catch (ex) {
      if (done) return;
      done = true;
      reject$1(self, ex);
    }
  }

  Promise$2.prototype['catch'] = function(onRejected) {
    return this.then(null, onRejected);
  };

  Promise$2.prototype.then = function(onFulfilled, onRejected) {
    // @ts-ignore
    var prom = new this.constructor(noop$1);

    handle(this, new Handler(onFulfilled, onRejected, prom));
    return prom;
  };

  Promise$2.prototype['finally'] = finallyConstructor;

  Promise$2.all = function(arr) {
    return new Promise$2(function(resolve, reject) {
      if (!arr || typeof arr.length === 'undefined')
        throw new TypeError('Promise.all accepts an array');
      var args = Array.prototype.slice.call(arr);
      if (args.length === 0) return resolve([]);
      var remaining = args.length;

      function res(i, val) {
        try {
          if (val && (typeof val === 'object' || typeof val === 'function')) {
            var then = val.then;
            if (typeof then === 'function') {
              then.call(
                val,
                function(val) {
                  res(i, val);
                },
                reject
              );
              return;
            }
          }
          args[i] = val;
          if (--remaining === 0) {
            resolve(args);
          }
        } catch (ex) {
          reject(ex);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  Promise$2.resolve = function(value) {
    if (value && typeof value === 'object' && value.constructor === Promise$2) {
      return value;
    }

    return new Promise$2(function(resolve) {
      resolve(value);
    });
  };

  Promise$2.reject = function(value) {
    return new Promise$2(function(resolve, reject) {
      reject(value);
    });
  };

  Promise$2.race = function(values) {
    return new Promise$2(function(resolve, reject) {
      for (var i = 0, len = values.length; i < len; i++) {
        values[i].then(resolve, reject);
      }
    });
  };

  // Use polyfill for setImmediate for performance gains
  Promise$2._immediateFn =
    (typeof setImmediate === 'function' &&
      function(fn) {
        setImmediate(fn);
      }) ||
    function(fn) {
      setTimeoutFunc(fn, 0);
    };

  Promise$2._unhandledRejectionFn = function _unhandledRejectionFn(err) {
    if (typeof console !== 'undefined' && console) {
      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
    }
  };

  const initGeoLocation = () => {
    return new Promise$2((resolve) => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(position => {
          resolve({
            lng: position.coords.longitude,
            lat: position.coords.latitude,
          });
        });
      } else {
        resolve(null);
      }
    })
  };

  const deg2rad = (deg) => {
    return deg * (Math.PI / 180);
  };

  // To read more about this algorithm:
  // https://en.wikipedia.org/wiki/Haversine_formula
  // http://www.movable-type.co.uk/scripts/latlong.html
  const getDistanceBeetweenCoords = (p1, p2) => {
    const R = 6371; // Radius of the earth in km
    const dLat = deg2rad(p2.lat - p1.lat);
    const dLon = deg2rad(p2.lng - p1.lng);
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(deg2rad(p1.lat)) * Math.cos(deg2rad(p2.lat)) *
      Math.sin(dLon / 2) * Math.sin(dLon / 2)
      ;
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c; // Distance in km
    return distance;
  };

  const getDistanceFromCurrentPos = (startingPosition, userPosition) => {
    return Math.round(getDistanceBeetweenCoords(startingPosition, userPosition) * 100) / 100;
  };

  /*
  link-item
  Version: 0.0.1
  (c) Interone
  */

  function loadImage(url, fallbackImage = '', signal) {
    const options = {
      method: 'GET',
      mode: 'cors',
      cache: 'default',
      signal,
    };
    const request = new Request(url);

    return fetch(request, options)
      .then(response => {
        if (response.headers.has('errorcode') && !!fallbackImage) {
          return fetch(new Request(fallbackImage), options)
            .then(response => response.arrayBuffer());
        } else {
          return response.arrayBuffer();
        }
      })
      .then(buffer => arrayBufferToBase64(buffer));
  }

  function arrayBufferToBase64(buffer) {
    let binary = '';
    const bytes = [].slice.call(new Uint8Array(buffer));

    bytes.forEach((b) => { binary += String.fromCharCode(b); });

    return window.btoa(binary);
  }

  class Node$1 {
    constructor(key, value, next = null, prev = null) {
      this.key = key;
      this.value = value;
      this.next = next;
      this.prev = prev;
    }
  }

  class LRU {
    // set default limit of 10 if limit is not passed.
    constructor(limit = 10) {
      this.size = 0;
      this.limit = limit;
      this.head = null;
      this.tail = null;
      this.cache = {};
    }

    // Write Node to head of LinkedList
    // update cache with Node key and Node reference
    write(key, value) {
      this.ensureLimit();

      if (!this.head) {
        this.head = this.tail = new Node$1(key, value);
      } else {
        const node = new Node$1(key, value, this.head);
        this.head.prev = node;
        this.head = node;
      }

      // Update the cache map
      this.cache[ key ] = this.head;
      this.size++;
    }

    // Read from cache map and make that node as new Head of LinkedList
    read(key) {
      if (this.cache[ key ]) {
        const value = this.cache[ key ].value;

        // node removed from it's position and cache
        this.remove(key);
        // write node again to the head of LinkedList to make it most recently used
        this.write(key, value);

        return value;
      }
    }

    ensureLimit() {
      if (this.size === this.limit) {
        this.remove(this.tail.key);
      }
    }

    remove(key) {
      const node = this.cache[ key ];

      if (node.prev !== null) {
        node.prev.next = node.next;
      } else {
        this.head = node.next;
      }

      if (node.next !== null) {
        node.next.prev = node.prev;
      } else {
        this.tail = node.prev;
      }

      delete this.cache[ key ];
      this.size--;
    }

    clear() {
      this.head = null;
      this.tail = null;
      this.size = 0;
      this.cache = {};
    }

    // Invokes the callback function with every node of the chain and the index of the node.
    forEach(fn) {
      let node = this.head;
      let counter = 0;
      while (node) {
        fn(node, counter);
        node = node.next;
        counter++;
      }
    }
  }

  var ImageCache = new LRU(250);

  const GENERAL_LINES = {
    options: {
      none: '',
      '1 Series - 3door': '2P71',
      '1 Series - 5door': '2R11',
      '2 Series - Coupe': '2H31',
      '2 Series - Cabrio': '2M11',
      '2 Series - Active Tourer': '2X91',
      '2 Series - Grand Tourer ': '6V11',
      '3 Series - Sedan ': '8E31',
      '3 Series - Touring': '8K11',
      '3 Series - Gran Turismo': '8X31',
      '4 Series - Coupe': '4S31',
      '4 Series - Cabrio': '4V11',
      '4 Series - Gran Coupé': '4H31',
      '5 Series - Sedan': 'JK51',
      '5 Series - Touring': 'JT91',
      '6 Series - Gran Turismo': 'JX61',
      '7 Series - Sedan': '7G41',
      '8 Series - Coupe': 'BC21',
      'X1 Series - ': 'JJ11',
      'X2 Series - ': 'YK51',
      'X3 Series - ': 'TX91',
      'X4 Series - ': 'VJ11',
      'X5 Series - ': 'CV01',
      'X6 Series - ': 'KV61',
      'i3 Series - 4 doors': '7Z41',
      'i8 Series - Coupe': '2Z41',
      'i8 Series - Roadster': '2Z61',
    },
    value: '2P71',
  };

  const ALIGN_OPTIONS = {
    options: {
      EMPTY: '',
      TOP: 'TOP',
      CENTER: 'CENTER',
      BOTTOM: 'BOTTOM',
      LEFT: 'LEFT',
      RIGHT: 'RIGHT',
    },
    value: 'CENTER',
  };

  const RESP_OPTIONS = {
    options: {
      JPEG: 'JPEG',
      PNG: 'PNG',
      WEBP: 'WEBP'
    },
    value: 'JPEG',
  };

  const BRAND_OPTIONS = {
    options: {
      WBBM: 'WBBM',
      WBABM: 'WBABM',
      WBBI: 'WBBI',
      RR: 'RR',
    },
    value: 'WBBM',
  };

  const CUT_RANGE = {
    range: true,
    step: 1,
    min: 0,
    max: 3,
    value: 0,
  };
  const X_RANGE = {
    min: -99999,
    max: 99999,
    value: 0,
  };
  const Y_RANGE = {
    min: -99999,
    max: 99999,
    value: 0,
  };

  const HEIGHT_RANGE = {
    value: 400,
  };
  const H_RANGE = {
    min: 1,
    max: 19999,
    value: 10000,
  };

  const WIDTH_RANGE = {
    value: 600,
  };
  const W_RANGE = {
    min: 1,
    max: 19999,
    value: 10000,
  };

  const ANGLE_RANGE = {
    range: true,
    step: 10,
    min: -360,
    max: 360,
    value: 50,
  };

  const POV_OPTIONS = {
    options: {
      EMPTYVALUE: '',
      FRONT: 'FRONT',
      POLSTER: 'POLSTER',
      FRONTSIDE: 'FRONTSIDE',
      SIDE: 'SIDE',
      REARSIDE: 'REARSIDE',
      REAR: 'REAR',
      DRIVERDOOR: 'DRIVERDOOR',
      DASHBOARD: 'DASHBOARD',
      DRIVER: 'DRIVER',
      REARBIRDSEYE: 'REARBIRDSEYE',
      WALKAROUND: 'WALKAROUND',
      WALKAROUND_OPEN: 'WALKAROUND,OPEN',
      WALKAROUND_CLOSE: 'WALKAROUND,CLOSE',
      CENTERPANO: 'CENTERPANO',
      PANOCUBE_TOP: 'PANOCUBE_TOP',
      PANOCUBE_BOTTOM: 'PANOCUBE_BOTTOM',
      PANOCUBE_LEFT: 'PANOCUBE_LEFT',
      PANOCUBE_RIGHT: 'PANOCUBE_RIGHT',
      PANOCUBE_FRONT: 'PANOCUBE_FRONT',
      PANOCUBE_REAR: 'PANOCUBE_REAR',
      CLOSEUPPOLSTER: 'CLOSEUPPOLSTER',
    },
    value: 'WALKAROUND',
  };

  const CLIENT = {
    options: {
      EMPTYVALUE: '',
      STATIC: 'STATIC',
      NCC: 'NCC',
      NVCO: 'NVCO'
    },
    value: 'STATIC',
  };
  const QUALITY_RANGE = {
    range: true,
    step: 5,
    min: 0,
    max: 100,
    value: 80,
  };

  const PITCH_RANGE = {
    min: -90,
    max: 90,
    value: 0,
  };

  const VIEW_OPTIONS = {
    options: {
      EXTERIEUR: 'EXTERIEUR',
      INTERIEUR: 'INTERIEUR',
      CENTERPANO: 'CENTERPANO',
      VIDEO: 'VIDEO',
      STATIC: 'STATIC',
      static_wide: 'static_wide',
      static_1560x880: 'static_1560x880',
      paint_839x839: 'paint_839x839',
      paint_470x263: 'paint_470x263',
      paint_1500x839: 'paint_1500x839',
      rim_1000x1000_transparent: 'rim_1000x1000_transparent',
      trim_839x839: 'trim_839x839',
      trim_1500x839: 'trim_1500x839',
      fabric_839x839: 'fabric_839x839',
      fabric_1500x839: 'fabric_1500x839',
      softtop_839x839: 'softtop_839x839',
      EMPTY: '',
    },
    value: '',
  };

  const DISPLAY_OPTIONS = {
    img: 'IMAGE',
    backgroundImg: 'BACKGROUND_IMAGE',
  };

  const BKGND_OPTIONS = {
    options: {
      ORIGINAL: 'ORIGINAL',
      WHITE: 'WHITE',
      BLACK: 'BLACK',
      TRANSPARENT: 'TRANSPARENT',
      SKYNCC: 'SKYNCC',
      bkgnd_generic: 'bkgnd_generic',
      bkgnd_generic2: 'bkgnd_generic2',
      EMPTY: '',
    },
    value: 'bkgnd_generic2',
  };

  var constant$1 = /*#__PURE__*/Object.freeze({
    GENERAL_LINES: GENERAL_LINES,
    ALIGN_OPTIONS: ALIGN_OPTIONS,
    RESP_OPTIONS: RESP_OPTIONS,
    BRAND_OPTIONS: BRAND_OPTIONS,
    CUT_RANGE: CUT_RANGE,
    X_RANGE: X_RANGE,
    Y_RANGE: Y_RANGE,
    HEIGHT_RANGE: HEIGHT_RANGE,
    H_RANGE: H_RANGE,
    WIDTH_RANGE: WIDTH_RANGE,
    W_RANGE: W_RANGE,
    ANGLE_RANGE: ANGLE_RANGE,
    POV_OPTIONS: POV_OPTIONS,
    CLIENT: CLIENT,
    QUALITY_RANGE: QUALITY_RANGE,
    PITCH_RANGE: PITCH_RANGE,
    VIEW_OPTIONS: VIEW_OPTIONS,
    DISPLAY_OPTIONS: DISPLAY_OPTIONS,
    BKGND_OPTIONS: BKGND_OPTIONS
  });

  /*
  base-core
  Version: 0.0.1
  (c) Interone
  */

  /*  COSY DECODE / ENCODE
      Code from Appendix provided by BMW */
  // constants
  const COSY_URL = 'https://prod.cosy.bmw.cloud/bmwweb/cosySec';
  const COSY_TOKEN = '4Zak0rQzNsXdVEl3S1CTuf7yJ%tmLHwYqoi6Dh9pjMbG2ePUvBW8gIKx5OFcRnA';
  const COSY_PREFIX = 'COSY-EU-100-';

  function encodeCosyParameters(token, prefix, params) {
    if (!prefix) prefix = COSY_PREFIX;

    let tokenLength;

    if (token) {
      tokenLength = token.length;
    } else {
      token = COSY_TOKEN;
      tokenLength = 63;
    }

    let encryptionCharPosition = 25;
    let encryptionStepSize = 45;
    let temp = '';
    let result = `${prefix}${encryptionCharPosition}${encryptionStepSize}`;
    let encodedParams = URLEncode(params);

    for (let i = 0; i < encodedParams.length; i++) {
      switch (encodedParams.charAt(i)) {
      case '+':
        temp += '%20';
        break;
      case '-':
        temp += '%2D';
        break;
      case '_':
        temp += '%5F';
        break;
      case '.':
        temp += '%2E';
        break;
      case '*':
        temp += '%2A';
        break;
      default:
        temp += encodedParams.charAt(i);
        break;
      }
    }

    for (let i = 0; i < temp.length; i++) {
      const pos = (encryptionCharPosition + token.indexOf(temp.charAt(i))) % tokenLength;
      result += token.charAt(pos);
      encryptionCharPosition += encryptionStepSize;
    }
    return encodeURI(result);
  }

  function URLEncode(clearString) {
    let output = '';
    let x = 0;
    clearString = clearString.toString();
    const regex = /(^[a-zA-Z0-9_.]*)/;
    while (x < clearString.length) {
      const match = regex.exec(clearString.substr(x));
      if (match !== null && match.length > 1 && match[1] !== '') {
        output += match[1];
        x += match[1].length;
      } else {
        if (clearString[x] === ' ') output += '+';
        else {
          const charCode = clearString.charCodeAt(x);
          const hexVal = charCode.toString(16);
          output += `%${hexVal.length < 2 ? '0' : ''}${hexVal.toUpperCase()}`;
        }
        x++;
      }
    }
    return output;
  }
  const encode = ({ cosyUrl, cosyToken, cosyPrefix, sURL }) => {
    if (!cosyUrl) cosyUrl = COSY_URL;
    if (!cosyToken) cosyToken = COSY_TOKEN;
    if (!cosyPrefix) cosyPrefix = COSY_PREFIX;
    return `${cosyUrl}?${encodeCosyParameters(cosyToken, cosyPrefix, sURL)}`;
  };

  const encode$1 = encode;

  const isInRange = (value, min, max) => value >= min && value <= max;
  const values$1 = obj =>
    Object.keys(obj).map(key => {
      return obj[key];
    });
  const existsInCollection = (value, collection) =>
    values$1(collection).indexOf(value) !== -1;

  const canUseWebP = () => {
    try {
      return document.createElement('canvas').toDataURL('image/webp').indexOf('data:image/webp') === 0;
    } catch (err) {
      return false;
    }
  };

  const prepareCosyImageUrl = ({
    cosyUrl,
    cosyToken,
    cosyPrefix,
    align = ALIGN_OPTIONS.value,
    angle = ANGLE_RANGE.value,
    background = '',
    brand = BRAND_OPTIONS.value,
    client = '',
    cut = CUT_RANGE.value,
    h = H_RANGE.value,
    height = 0,
    market = '',
    paint = '',
    fabric = '',
    pov = POV_OPTIONS.value,
    prodDate = '',
    resp = RESP_OPTIONS.value,
    quality = QUALITY_RANGE.value,
    sa = '',
    tilt = '',
    vehicle = '',
    view = '',
    w = W_RANGE.value,
    width = 0,
    x = X_RANGE.value,
    y = Y_RANGE.value,
    hfov = '',
    pitch = PITCH_RANGE.value,
  }) => {
    const url = [
      `ALIGN=${align}`,
      `ANGLE=${angle}`,
      `BKGND=${background}`,
      `BRAND=${brand}`,
      `CLIENT=${client}`,
      `CUT=${cut}`,
      `H=${h}`,
      `HEIGHT=${height}`,
      `MARKET=${market}`,
      `PAINT=${paint}`,
      `FABRIC=${fabric}`,
      `POV=${pov}`,
      `RESP=${resp}`,
      `QUALITY=${quality}`,
      `SA=${sa}`,
      `VEHICLE=${vehicle}`,
      `VIEW=${view}`,
      `W=${w}`,
      `WIDTH=${width}`,
      `X=${x}`,
      `Y=${y}`,
      `HFOV=${hfov}`,
      `PITCH=${pitch}`,
    ];
    if (prodDate) {
      url.push(`PRODDATE=${prodDate}`);
    }
    if (tilt === 0 || !!tilt) {
      url.push(`TILT=${tilt}`);
    }
    return encode$1({ sURL: url.join('&'), cosyUrl, cosyToken, cosyPrefix });
  };

  const CAN_USE_WEBP = canUseWebP();

  var CosyImage = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.isImageMode && _vm.imageData)?_c('img',{attrs:{"src":_vm.imageData,"alt":_vm.alt}}):(_vm.isImageMode && !_vm.imageData && _vm.isLoading)?_c('div',{class:_vm.loadingClass},[_vm._t("loading")],2):_c('div',{style:(_vm.backgroundImageStyles),attrs:{"alt":_vm.alt}})},staticRenderFns: [],
    name: 'CosyImage',
    props: {
      fallbackImage: {
        type: String,
        default: '',
      },
      brand: {
        type: String,
        default: BRAND_OPTIONS.value,
        validator: value => {
          return existsInCollection(
            value,
            BRAND_OPTIONS.options
          );
        },
      },
      alt: {
        /* Custom string value */
        type: String,
        default: 'Not found',
      },
      cosyUrl: {
        type: String,
        default: 'https://prod.cosy.bmw.cloud/bmwweb/cosySec',
      },
      cosyToken: {
        type: String,
      },
      cosyPrefix: {
        type: String,
      },
      vehicle: {
        /* Custom string value */
        type: String,
        default: '',
      },
      width: {
        type: [Number, String],
        default: 600,
      },
      w: {
        type: [Number, String],
        default: W_RANGE.value,
        validator: value => {
          if (value === '') {
            return true;
          }
          return isInRange(
            value,
            W_RANGE.min,
            W_RANGE.max
          );
        },
      },
      height: {
        type: [Number, String],
        default: 400,
      },
      h: {
        type: [Number, String],
        default: H_RANGE.value,
        validator: value => {
          if (value === '') {
            return true;
          }
          return isInRange(
            value,
            H_RANGE.min,
            H_RANGE.max
          );
        },
      },
      background: {
        type: String,
        default: 'WHITE',
      },
      tilt: {
        type: Number,
        default: 0,
      },
      resp: {
        type: String,
        default: RESP_OPTIONS.value,
        validator: value => {
          return existsInCollection(
            value,
            RESP_OPTIONS.options
          );
        },
      },
      market: {
        /* Custom string value */
        type: String,
        default: '',
      },
      sa: {
        /* Custom string value */
        type: String,
        default: '',
      },
      client: {
        /* Custom string value */
        type: String,
        default: '',
      },
      prodDate: {
        /* Custom string value */
        type: String,
        default: '',
      },
      angle: {
        type: [Number, String],
        default: ANGLE_RANGE.value,
        validator: value => {
          return isInRange(
            value,
            ANGLE_RANGE.min,
            ANGLE_RANGE.max
          );
        },
      },
      pov: {
        type: String,
        default: POV_OPTIONS.value,
        validator: value => {
          return existsInCollection(
            value,
            POV_OPTIONS.options
          );
        },
      },
      paint: {
        type: String,
        default: '',
      },
      fabric: {
        type: String,
        default: '',
      },
      quality: {
        type: [Number, String],
        default: QUALITY_RANGE.value,
        validator: value => {
          return isInRange(
            value,
            QUALITY_RANGE.min,
            QUALITY_RANGE.max
          );
        },
      },
      x: {
        type: [Number, String],
        default: X_RANGE.value,
        validator: value => {
          return isInRange(
            value,
            X_RANGE.min,
            X_RANGE.max
          );
        },
      },
      y: {
        type: [Number, String],
        default: Y_RANGE.value,
        validator: value => {
          return isInRange(
            value,
            Y_RANGE.min,
            Y_RANGE.max
          );
        },
      },
      hfov: {
        type: String,
        default: '',
      },
      pitch: {
        type: [Number, String],
        default: PITCH_RANGE.value,
        validator: value => {
          return isInRange(
            value,
            PITCH_RANGE.min,
            PITCH_RANGE.max
          );
        },
      },
      cut: {
        type: [Number, String],
        default: CUT_RANGE.value,
        validator: value => {
          return isInRange(
            value,
            CUT_RANGE.min,
            CUT_RANGE.max
          );
        },
      },
      align: {
        /* Custom string value */
        type: String,
        default: ALIGN_OPTIONS.value,
        validator: value => {
          return existsInCollection(
            value,
            ALIGN_OPTIONS.options
          );
        },
      },
      view: {
        /* Custom string value */
        type: String,
        default: VIEW_OPTIONS.value,
        validator: value => {
          return existsInCollection(
            value,
            VIEW_OPTIONS.options
          );
        },
      },
      option: {
        type: String,
        default: DISPLAY_OPTIONS.img,
      },
      styles: {
        type: Object,
        default: () => ({}),
      },
      loadingClass: {
        type: [Object, Array, String],
        default: '',
      },
    },
    inject: {
      injectedFallbackImagePath: { default: '' },
    },
    data: () => ({
      constant: constant$1,
      imageData: '',
      isLoading: false,
    }),
    watch: {
      imageSrc(oldVal, newVal) {
        if (oldVal && oldVal !== newVal) {
          this.loadCurrentImage();
        }
      },
    },
    computed: {
      fallbackImagePath() {
        return this.fallbackImage !== ''
          ? this.fallbackImage
          : this.injectedFallbackImagePath;
      },
      actualResp() {
        return CAN_USE_WEBP ? RESP_OPTIONS.options.WEBP : this.resp;
      },
      imageSrc() {
        return prepareCosyImageUrl(
          Object.assign({}, this.$props, { resp: this.actualResp })
        );
      },
      backgroundImageStyles() {
        return Object.assign(
          {
            backgroundImage: `url(${this.imageSrc})`,
            height: `${this.height}px`,
            width: `${this.width}px`,
          },
          this.styles
        );
      },
      isImageMode() {
        return this.option === DISPLAY_OPTIONS.img;
      },
    },
    methods: {
      loadCurrentImage() {
        const data = ImageCache.read(this.imageSrc);

        if (data) {
          this.imageData = data;
          return;
        }

        this.isLoading = true;
        const imageSrc = `${this.imageSrc}`;

        const signal = this.createAbortController();

        loadImage(imageSrc, this.fallbackImagePath, signal)
          .then(data => {
            if (this.imageSrc !== imageSrc) {
              return;
            }
            const prefixMap = {
              PNG: 'data:image/png;base64,',
              JPEG: 'data:image/jpeg;base64,',
              WEBP: 'data:image/webp;base64,',
            };
            const prefix = prefixMap[this.actualResp];
            this.imageData = `${prefix}${data}`;

            ImageCache.write(this.imageSrc, this.imageData);

            this.isLoading = false;
          })
          .catch((err) => {
            if (err.name !== 'AbortError') {
              this.isLoading = false;
            }
          });
      },
      createAbortController() {
        if (typeof window.AbortController !== 'undefined') {
          if (this.currentRequest) {
            this.currentRequest.abort();
          }

          this.currentRequest = new AbortController();
          return this.currentRequest.signal;
        }
      },
    },
    mounted() {
      if (this.isImageMode) {
        this.loadCurrentImage();
      }
    },
    errorCaptured(err, vm, info) {
      console.warn(`${err.stack}\n\nfound in ${info} inside CosyImage component`);
      this.$emit('error', err);
      return false;
    },
  };

  var CardConfig = {
    default: {
      angle: 50,
      w: 8000,
      h: 6700,
      x: 700,
      y: 2100,
      width: 270,
      height: 230,
    },
    large: {
      angle: 90,
      w: 5000,
      h: 6000,
      x: 500,
      y: 2100,
      width: 700,
      height: 600,
    },
    duo: {
      angle: -20,
      cut: 0,
      w: 6000,
      h: 6500,
      x: 2600,
      y: 2500,
      width: 460,
      height: 240,
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".emission-cube[data-v-5403282e]{min-width:24px;padding:4px;text-align:center}.emission-cube--pollution-level.emission-cube--value-1[data-v-5403282e]{color:#fff;background-color:#314d40}.emission-cube--pollution-level.emission-cube--value-2[data-v-5403282e]{color:#fff;background-color:#2c6846}.emission-cube--pollution-level.emission-cube--value-3[data-v-5403282e]{color:#fff;background-color:#387d53}.emission-cube--pollution-level.emission-cube--value-4[data-v-5403282e]{color:#262626;background-color:#3f8d54}.emission-cube--pollution-level.emission-cube--value-5[data-v-5403282e]{color:#262626;background-color:#4aa45d}.emission-cube--pollution-level.emission-cube--value-6[data-v-5403282e]{color:#262626;background-color:#56a353}.emission-cube--pollution-level.emission-cube--value-7[data-v-5403282e]{color:#262626;background-color:#6fb859}.emission-cube--pollution-level.emission-cube--value-8[data-v-5403282e]{color:#262626;background-color:#f4eb5f}.emission-cube--pollution-level.emission-cube--value-9[data-v-5403282e]{color:#262626;background-color:#f7c645}.emission-cube--pollution-level.emission-cube--value-10[data-v-5403282e]{color:#262626;background-color:#efa741}.emission-cube--pollution-level.emission-cube--value-11[data-v-5403282e]{color:#262626;background-color:#e7873b}.emission-cube--pollution-level.emission-cube--value-12[data-v-5403282e]{color:#262626;background-color:#e1633a}.emission-cube--pollution-level.emission-cube--value-13[data-v-5403282e]{color:#fff;background-color:#c5492d}.emission-cube--pollution-level.emission-cube--value-14[data-v-5403282e]{color:#fff;background-color:#b43834}.emission-cube--pollution-level.emission-cube--value-15[data-v-5403282e]{color:#fff;background-color:#983636}.emission-cube--safety-level.emission-cube--value-0[data-v-5403282e]{color:#fff;background-color:#9b3633}.emission-cube--safety-level.emission-cube--value-1[data-v-5403282e]{color:#fff;background-color:#e06337}.emission-cube--safety-level.emission-cube--value-2[data-v-5403282e]{color:#262626;background-color:#f7c645}.emission-cube--safety-level.emission-cube--value-3[data-v-5403282e]{color:#262626;background-color:#5ab38f}.emission-cube--safety-level.emission-cube--value-4[data-v-5403282e]{color:#fff;background-color:#48889d}.emission-cube--safety-level.emission-cube--value-5[data-v-5403282e]{color:#fff;background-color:#4185c4}.emission-cube--safety-level.emission-cube--value-6[data-v-5403282e]{color:#fff;background-color:#3370b3}.emission-cube--safety-level.emission-cube--value-7[data-v-5403282e]{color:#fff;background-color:#4a72ae}.emission-cube--safety-level.emission-cube--value-8[data-v-5403282e]{color:#fff;background-color:#455da4}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();





  const CUBE_TYPE_POLLUTION = 'pollutionLevel';
  const CUBE_TYPE_SAFETY = 'safetyLevel';

  var EmissionCube = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"emission-cube tw-text-2xs",class:_vm.emissionCubeClasses},[_vm._v(" "+_vm._s(_vm.value)+" ")])},staticRenderFns: [],_scopeId: 'data-v-5403282e',
    name: 'EmissionCube',
    props: {
      value: {
        type: [String, Number],
        required: true,
      },
      type: {
        type: String,
        default: CUBE_TYPE_POLLUTION,
        validator: (value) => {
          return value === CUBE_TYPE_POLLUTION || value === CUBE_TYPE_SAFETY;
        },
      },
    },
    computed: {
      emissionCubeClasses() {
        return {
          [this.typeClass]: true,
          [`emission-cube--value-${this.value}`]: true,
        };
      },
      typeClass() {
        return this.type === CUBE_TYPE_SAFETY
          ? 'emission-cube--safety-level'
          : 'emission-cube--pollution-level';
      },
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".headline-1[data-v-137c2efe],.headline-2[data-v-137c2efe]{font-size:32px;font-size:2rem;line-height:40px;line-height:2.5rem}.headline-3[data-v-137c2efe]{font-size:24px;font-size:1.5rem;line-height:32px;line-height:2rem}.headline-4[data-v-137c2efe]{font-size:20px;font-size:1.25rem;line-height:28px;line-height:1.75rem}.headline-5[data-v-137c2efe]{font-size:16px;font-size:1rem;line-height:24px;line-height:1.5rem}.headline-6[data-v-137c2efe]{font-size:20px;font-size:1.25rem;line-height:28px;line-height:1.75rem}.headline-7[data-v-137c2efe]{font-size:16px;font-size:1rem;line-height:24px;line-height:1.5rem;font-weight:400}.body-1[data-v-137c2efe]{font-size:16px;font-size:1rem;line-height:24px;line-height:1.5rem}.body-2[data-v-137c2efe]{font-size:14px;font-size:.875rem;line-height:20px;line-height:1.25rem}.subtitle-1[data-v-137c2efe]{font-size:16px;font-size:1rem;line-height:24px;line-height:1.5rem}.subtitle-2[data-v-137c2efe]{font-size:14px;font-size:.875rem;line-height:20px;line-height:1.25rem}.link-1[data-v-137c2efe]{font-size:16px;font-size:1rem;line-height:24px;line-height:1.5rem;text-decoration:underline}.link-2[data-v-137c2efe]{font-size:14px;font-size:.875rem;line-height:20px;line-height:1.25rem;text-decoration:underline}.caption[data-v-137c2efe],.label-1[data-v-137c2efe]{font-size:12px;font-size:.75rem;line-height:16px;line-height:1rem}.label-2[data-v-137c2efe]{font-size:10px;font-size:.625rem;line-height:14px;line-height:.875rem}.button-1[data-v-137c2efe]{font-size:16px;font-size:1rem;line-height:20px;line-height:1.25rem;font-weight:700}@media screen and (min-width:600px){.headline-1[data-v-137c2efe]{font-size:3rem;line-height:4rem}}@media screen and (min-width:1024px){.headline-1[data-v-137c2efe]{font-size:4rem;line-height:5rem}.headline-2[data-v-137c2efe]{font-size:3rem;line-height:4rem}.headline-3[data-v-137c2efe]{font-size:2rem;line-height:2.5rem}.headline-4[data-v-137c2efe]{font-size:1.5rem;line-height:2rem}}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();





  const BOLD_FONTS = [
    'subtitle-1',
    'subtitle-2',
    'link-1',
    'link-2',
    'label-1',
    'label-2',
  ];

  var TextBlock = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(_vm.element,{tag:"component",class:_vm.classes},[_vm._t("default")],2)},staticRenderFns: [],_scopeId: 'data-v-137c2efe',
    name: 'TextBlock',
    props: {
      font: {
        type: String,
        default: 'light',
      },
      typo: {
        type: String,
        default: 'body-1',
      },
      element: {
        type: String,
        default: 'div',
      },
    },
    computed: {
      classes() {
        return {
          [this.fontClass]: true,
          [this.typoClass]: true,
        };
      },
      fontClass() {
        if (BOLD_FONTS.indexOf(this.typo) !== -1) {
          return 'tw-font-bmw-bold';
        }
        return 'tw-font-bmw-light';
      },
      typoClass() {
        return this.typo;
      },
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".flag-container[data-v-73c33b03]{margin-bottom:5px}[dir=rtl] .flag-container[data-v-73c33b03]{-webkit-transform:rotateY(180deg);transform:rotateY(180deg);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse}[dir=rtl] .flag-content[data-v-73c33b03]{-webkit-transform:rotateY(180deg);transform:rotateY(180deg)}.model-card-flag[data-v-73c33b03]{top:24px;height:36px}.flag-icon[data-v-73c33b03]{margin-right:8px}[dir=rtl] .flag-icon[data-v-73c33b03]{margin-right:unset;margin-left:8px}.flag-polygon[data-v-73c33b03]{-webkit-transform:translateX(-.5px);transform:translateX(-.5px)}.special-offer-polygon[data-v-73c33b03]{fill:#4d4d4d}.coming-soon-polygon[data-v-73c33b03]{fill:#dde8f9}.coming-soon-flag-bg[data-v-73c33b03]{background-color:#dde8f9}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();
  var ModelCardFlag = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"flag-container tw-inline-flex"},[_c('div',{staticClass:"flag-content model-card-flag tw-px-ng-400 tw-inline-flex tw-items-center",class:_vm.isComingSoonFlag ? 'coming-soon-flag-bg' : 'tw-bg-grey-800 tw-text-white'},[(_vm.isComingSoonFlag)?_c('svg',{staticClass:"flag-icon",attrs:{"width":"12","height":"12","viewBox":"0 0 12 12","fill":"none","xmlns":"http://www.w3.org/2000/svg"}},[_c('path',{attrs:{"d":"M7.125 4.125V9.375H5.625V6H4.125V4.71L6.183 4.125H7.125ZM12 0V12H0V0H12ZM10.875 3H1.125V10.875H10.875V3Z","fill":"#262626"}})]):_vm._e(),_vm._v(" "),(!_vm.isComingSoonFlag)?_c('svg',{staticClass:"flag-icon",attrs:{"width":"12","height":"12","viewBox":"0 0 12 12","fill":"none","xmlns":"http://www.w3.org/2000/svg"}},[_c('path',{attrs:{"d":"M6.00036 2.23379L6.69702 4.38193L6.91563 5.05655H7.62493H9.75429L8.05745 6.33243L7.49955 6.75194L7.71635 7.41536L8.48383 9.76224L6.59151 8.31942L5.99928 7.86775L5.40741 8.32014L3.5187 9.76405L4.28401 7.41355L4.49973 6.7505L3.94219 6.33171L2.24571 5.05691H4.37507H5.08437L5.30298 4.3823L6.00036 2.23379ZM6.30172 0H5.69901L4.37579 4.08094H0.201265L0 4.58862L3.35646 7.11111L1.93279 11.4844L2.4271 11.8262L6.00036 9.09521L9.57615 11.8219L10.0665 11.4638L8.64354 7.1122L12 4.58862L11.7987 4.0813H7.62493L6.30172 0Z","fill":"white"}})]):_vm._e(),_vm._v(" "),_c('TextBlock',{staticClass:"tw-uppercase",attrs:{"typo":"label-1"}},[_vm._v(_vm._s(_vm.labelText))])],1),_vm._v(" "),_c('svg',{staticClass:"flag-polygon",attrs:{"width":"16","height":"36","viewBox":"0 0 16 36","fill":"none","xmlns":"http://www.w3.org/2000/svg"}},[_c('path',{class:_vm.isComingSoonFlag ? 'coming-soon-polygon' : 'special-offer-polygon',attrs:{"d":"M0 36V0H16L0 36Z","fill":"#DDE8F9"}})])])},staticRenderFns: [],_scopeId: 'data-v-73c33b03',
    name: 'ModelCardFlag',
    components: { TextBlock },
    props: {
      labelText: {
        type: String,
        default: 'Flag Label',
      },
      isComingSoonFlag: {
        type: Boolean,
        default: false,
      },
    },
  };

  var ModelFlagMixin = {
    props: {
      isPreproduction: {
        type: Boolean,
        default: false,
      },
      hasDiscountedPrice: {
        type: Boolean,
        default: false,
      },
    },
    methods: {
      shouldDisplayModelCardFlag() {
        return this.hasDiscountedPrice;
      },
      shouldDisplayComingSoonFlagVariant() {
        return this.isPreproduction && !this.hasDiscountedPrice;
      },
    },
  };

  const preprodImagesPropsMixin = {
    props: {
      preprodImages: {
        type: Array,
        default: () => [],
      },
    },
  };

  const preprodImagesMixin = {
    methods: {
      teaserPreprodImage(vehicle) {
        // get a list of preprodImages and return a list with either the one with imgType 'teaser' or an empty list
        if (
          vehicle.isPromotional &&
          vehicle.preprodImages &&
          vehicle.preprodImages.length > 0
        ) {
          return vehicle.preprodImages.filter(
            (image) => image.imgType === 'teaser'
          );
        }
        return [];
      },
      heroPreprodImage(modelList) {
        const preprodImage = modelList.filter((image) => {
          return image.preprodImages.length !== 0;
        });
        if (preprodImage && preprodImage.length > 0) {
          const heroImages = preprodImage[0].preprodImages.filter(
            (image) => image.imgType === 'hero'
          );

          const firstHeroImage = heroImages[0];

          if (firstHeroImage) return firstHeroImage;
        }
        return undefined;
      },
      heroPromotionalSettings(modelList) {
        const isPromotional = modelList.some((model) => model.isPromotional);
        const promotionalSettingsModel = modelList.filter((model) => {
          return (
            model.promotionalSettings &&
            Object.keys(model.promotionalSettings).length > 0
          );
        });
        if (
          isPromotional &&
          promotionalSettingsModel &&
          promotionalSettingsModel.length > 0
        ) {
          return {
            ...promotionalSettingsModel[0].promotionalSettings,
            url: `details/${promotionalSettingsModel[0].id}`,
            fullCardTitle: promotionalSettingsModel[0].fullCardTitle,
            image: this.heroPreprodImage(modelList),
          };
        }
        if (isPromotional && this.heroPreprodImage(modelList)) {
          return {
            image: this.heroPreprodImage(modelList),
          };
        }
        return {};
      },
      detailedPreprodImage(vehicle) {
        // take preprodImages list from a vehicle and return a list with either all entries with imgType 'detailed' or an empty list
        if (
          vehicle.isPromotional &&
          vehicle.preprodImages &&
          vehicle.preprodImages.length > 0
        ) {
          return vehicle.preprodImages.filter(
            (image) => image.imgType === 'detailed'
          );
        }
        return [];
      },
    },
    computed: {
      hasPreprodImages() {
        return this.preprodImages.length > 0;
      },
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".info-i-btn[data-v-b97c6764]{fill:#666}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();


















  var InfoIconButton = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('svg',{staticClass:"info-i-btn tw-z-10 tw-relative tw-cursor-pointer tw-rounded-full hover:tw-shadow",attrs:{"width":"16","height":"16","viewBox":"0 0 16 16","fill":"none","xmlns":"http://www.w3.org/2000/svg"},on:{"click":function($event){return _vm.$emit('click')}}},[_c('path',{attrs:{"fill-rule":"evenodd","clip-rule":"evenodd","d":"M14.6 8C14.6 4.3605 11.6395 1.4 8 1.4C4.3605 1.4 1.4 4.3605 1.4 8C1.4 11.6395 4.3605 14.6 8 14.6C11.6395 14.6 14.6 11.6395 14.6 8ZM0 8C0 3.582 3.582 0 8 0C12.418 0 16 3.582 16 8C16 12.4185 12.418 16 8 16C3.582 16 0 12.4185 0 8ZM7 5.5V3.5H9V5.5H7ZM7 12.5V7.5H9V12.5H7Z"}})])},staticRenderFns: [],_scopeId: 'data-v-b97c6764',
    name: 'InfoIconButton',
  };

  (function(){ if(typeof document !== 'undefined'){ var head$$1=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css="h2.tw-font-bmw-light[data-v-65169612],h4.tw-font-bmw-light[data-v-65169612]{font-family:bmwTypeNextWeb,Arial,Helvetica,Roboto,sans-serif;font-weight:300}.model-card[data-v-65169612]{background-color:#fff;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.model-card img[data-v-65169612]{width:100%}.model-card[data-v-65169612]:not(.alternative-carousel-item):after{position:absolute;top:0;left:0;width:100%;height:100%;content:\"\"}.model-card[data-v-65169612]:not(.alternative-carousel-item):hover:after{-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.model-card-with-hover[data-v-65169612]:not(.alternative-carousel-item):hover:after{-webkit-box-shadow:0 2px 8px 0 rgba(0,0,0,.15),0 8px 15px 0 rgba(0,0,0,.15);box-shadow:0 2px 8px 0 rgba(0,0,0,.15),0 8px 15px 0 rgba(0,0,0,.15);-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}a.cta[data-v-65169612]{position:relative;float:left;color:#fff;text-align:center;text-decoration:none;visibility:hidden}.layer-info[data-v-65169612]{line-height:1.29}.stockcar-alternative-cards a.cta[data-v-65169612]{background:#1c69d4;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.model-card:hover a.cta[data-v-65169612]{display:block;visibility:visible}.stockcar-alternative-cards a.cta[data-v-65169612]:hover{background:#0653b6}.stockcar-alternative-cards a.cta[data-v-65169612]{width:100%}.model-card-preprod[data-v-65169612]{display:block;height:100%;padding:0}.model-card-preprod .image-container[data-v-65169612]{margin-bottom:0}.model-card-preprod .image-container a[data-v-65169612]{display:inline}.model-card-preprod .description-container[data-v-65169612]{width:245px}@media (max-width:576px){.model-card-preprod .description-container[data-v-65169612]{width:100%}}.model-card-preprod .model-card-button[data-v-65169612]{position:absolute;bottom:66px;left:88px}.model-card-preprod .model-card-button .cta[data-v-65169612]{width:auto;padding:14px 51px;margin:0;visibility:visible}@media (max-width:992px){.model-card-preprod .model-card-button[data-v-65169612]{display:-webkit-box;display:-ms-flexbox;display:flex;left:0;bottom:37px;width:100%}.model-card-preprod .model-card-button .cta[data-v-65169612]{visibility:visible;background:#1c69d4;margin:0 auto}}@media (min-width:992px){.stockcar-alternative-cards a.cta[data-v-65169612]{position:relative;width:300px;visibility:visible;background:#1c69d4;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.stockcar-alternative-cards a.cta[data-v-65169612]:hover{background:#0653b6}}[dir=rtl] .stockcar-alternative-cards a.cta[data-v-65169612]{float:right}[dir=rtl] .layer-info[data-v-65169612]{text-align:right}[dir=rtl] .stockcar-alternative-cards h4[data-v-65169612]{text-align:right}@media (max-width:992px){a.cta[data-v-65169612]{float:left;visibility:visible;background:#4d4d4d}}@media (max-width:576px){.stockcar-alternative-cards a.cta[data-v-65169612]{position:relative;visibility:visible;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}}.cta-icon[data-v-65169612]{position:absolute;top:0;bottom:0;left:10px;height:70%;margin:auto;font-size:32px}.default-image-height[data-v-65169612]{height:150px}.preprod-image-height[data-v-65169612]{height:auto}.large-image-height[data-v-65169612]{height:250px}.model-card-disclaimer[data-v-65169612]{border:1px solid #e6e6e6}.model-card-disclaimer-icon[data-v-65169612]{width:22px;height:22px;line-height:22px}.model-card-disclaimer-icon[data-v-65169612]:hover{background:transparent;border:2px solid transparent;-webkit-box-shadow:0 1px 2px 0 rgba(0,0,0,.1),0 2px 5px 0 rgba(0,0,0,.2);box-shadow:0 1px 2px 0 rgba(0,0,0,.1),0 2px 5px 0 rgba(0,0,0,.2);-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.close-button[data-v-65169612]{right:0;font-size:50px}.model-card-title[data-v-65169612]{margin-right:auto}.large-card[data-v-65169612]{-webkit-box-orient:horizontal;-webkit-box-direction:reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse}.model-card-disclaimer.left-arrow[data-v-65169612]:after,.model-card-disclaimer.left-arrow[data-v-65169612]:before{position:absolute;top:55px;right:100%;width:0;height:0;content:\" \";border:solid transparent;pointer-events:none}.model-card-disclaimer.left-arrow[data-v-65169612]:after{margin-top:-14px;border-width:14px;border-color:hsla(0,0%,100%,0) #fff hsla(0,0%,100%,0) hsla(0,0%,100%,0)}.model-card-disclaimer.left-arrow[data-v-65169612]:before{margin-top:-15px;border-width:15px;border-color:transparent #e6e6e6 transparent transparent}.model-card-disclaimer.right-arrow[data-v-65169612]:after,.model-card-disclaimer.right-arrow[data-v-65169612]:before{position:absolute;top:55px;left:100%;width:0;height:0;content:\" \";border:solid transparent;pointer-events:none}.model-card-disclaimer.right-arrow[data-v-65169612]:after{margin-top:-14px;border-width:14px;border-color:hsla(0,0%,100%,0) hsla(0,0%,100%,0) hsla(0,0%,100%,0) #fff}.model-card-disclaimer.right-arrow[data-v-65169612]:before{margin-top:-15px;border-width:15px;border-color:transparent transparent transparent #e6e6e6}[dir=rtl] .large-card[data-v-65169612]{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}[dir=rtl] .close-button[data-v-65169612]{right:auto;left:0}[dir=rtl] .model-card-title[data-v-65169612]{margin-right:0;margin-left:auto}[dir=rtl] .card-description-price[data-v-65169612]{-webkit-box-orient:horizontal;-webkit-box-direction:reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse}[dir=rtl] .layer-info-item[data-v-65169612]{-webkit-box-orient:horizontal;-webkit-box-direction:reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse}[dir=rtl] .emission-cubes[data-v-65169612]{-webkit-box-orient:horizontal;-webkit-box-direction:reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse}.emission-cube-item[data-v-65169612]{margin:0 4px 0 0}[dir=rtl] .emission-cube-item[data-v-65169612]{margin:0 0 0 4px}.layer-legal-item[data-v-65169612]{margin-right:8px;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}[dir=rtl] .layer-legal-item[data-v-65169612]{margin-right:0;margin-left:8px;-webkit-box-orient:horizontal;-webkit-box-direction:reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse}@media (min-width:992px){.model-card-flag[data-v-65169612]{margin-left:-25px}[dir=rtl] .model-card-flag[data-v-65169612]{margin-right:-25px}}@media (max-width:576px){.model-card-flag[data-v-65169612]{margin-bottom:14px}}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head$$1.appendChild(style); } })();

  var ModelCard = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"click-outside",rawName:"v-click-outside",value:(_vm.closeModals),expression:"closeModals"}],ref:"modelCard",staticClass:"model-card tw-flex tw-flex-wrap tw-w-full tw-relative tw-px-450 tw-py-500",class:{ 'large-card': _vm.isLarge(), 'tw-pr-0': _vm.isLarge(), 'model-card-with-hover': !_vm.isDuo(), 'model-card-preprod': this.hasPreprodImages, }},[(
      !this.hasPreprodImages &&
        this.cardVariant !== 'large' &&
        (this.shouldShowFlag || this.shouldShowComingSoonFlag)
      )?_c('ModelCardFlag',{class:{ 'model-card-flag': !_vm.isDuo() },attrs:{"label-text":this.shouldShowComingSoonFlag
          ? _vm.i18n.comingSoonLabel
          : _vm.i18n.specialOfferLabel,"is-coming-soon-flag":this.shouldShowComingSoonFlag}}):_vm._e(),_vm._v(" "),_c('div',{ref:"image-container",staticClass:"image-container",class:{ 'tw-w-3/5': _vm.isLarge(), 'tw-mt-400 tw-mb-600': _vm.isLarge(), 'tw-ml-auto': _vm.isDuo() && _vm.isDuoReverseVariant, 'tw-mr-auto': _vm.isDuo() && !_vm.isDuoReverseVariant, 'tw-mb-400': !_vm.isDuo(), }},[_c('div',{class:{ 'tw-h-full': _vm.isDuo(), 'default-image-height': _vm.isDefault(), 'large-image-height': _vm.isLarge(), 'preprod-image-height': this.hasPreprodImages, },attrs:{"dir":_vm.direction.image}},[_c('router-link',{staticClass:"tw-z-10 tw-block tw-relative",attrs:{"data-tracking-linkid":_vm.activityMapLink,"to":{
            path: _vm.url,
            query: _vm.query,
          }}},[(_vm.hasPreprodImages)?_c('img',{attrs:{"src":_vm.preprodImage.url,"alt":_vm.fullCardTitle}}):_c('CosyImage',{attrs:{"alt":_vm.alt,"angle":!_vm.isDuoReverseVariant ? _vm.config.angle : -_vm.config.angle,"background":_vm.background,"brand":_vm.brand,"cosy-prefix":_vm.cosyPrefix,"cosy-token":_vm.cosyToken,"cosy-url":_vm.cosyUrl,"cut":_vm.config.cut,"h":_vm.config.h,"height":_vm.calcHeight,"paint":_vm.paint,"resp":_vm.resp,"sa":_vm.sa,"vehicle":_vm.vehicle,"w":_vm.config.w,"width":_vm.calcWidth,"x":!_vm.isDuoReverseVariant ? _vm.config.x : _vm.config.x - 1000,"y":_vm.config.y,"client":"NVCO","pov":"WALKAROUND"}})],1)],1)]),_vm._v(" "),_c('div',{staticClass:"description-container tw-font-bmw-light",class:{ 'tw-w-2/5': _vm.isLarge(), 'tw-w-full': !_vm.isLarge(), },attrs:{"dir":_vm.direction.description}},[_c('div',{class:{ 'tw-pl-600': _vm.isDuo() && _vm.isDesktop(), }},[(
            !this.hasPreprodImages &&
            this.cardVariant === 'large' &&
            (this.shouldShowFlag || this.shouldShowComingSoonFlag)
          )?_c('ModelCardFlag',{class:{ 'model-card-flag': !_vm.isDuo() },attrs:{"label-text":this.shouldShowComingSoonFlag
              ? _vm.i18n.comingSoonLabel
              : _vm.i18n.specialOfferLabel,"is-coming-soon-flag":this.shouldShowComingSoonFlag}}):_vm._e(),_vm._v(" "),(!this.hasPreprodImages)?_c('div',{staticClass:"tw-mb-100 tw-grey-900",class:{ 'tw-mt-200': !_vm.isDefault() }},[(_vm.hasShortTitle())?_c('h2',{staticClass:"tw-text-l tw-font-bmw-light"},[_vm._v(" "+_vm._s(_vm.shortCardTitle)+" ")]):_vm._e(),_vm._v(" "),(!_vm.hasShortTitle())?_c('h4',{staticClass:"tw-px-0 tw-font-bmw-light",class:{ 'tw-text-m': !_vm.isLarge(), 'tw-text-l': _vm.isLarge(), }},[_vm._v(" "+_vm._s(_vm.fullCardTitle)+" ")]):_vm._e()]):_vm._e(),_vm._v(" "),(!this.hasPreprodImages && _vm.cardDescription && !_vm.hasShortTitle())?_c('div',{staticClass:"tw-text-xs tw-mb-400"},[_c('div',{staticClass:"layer-info"},[(_vm.shownInfo.power)?_c('div',{staticClass:"layer-info-item tw-text-xs tw-flex"},[_c('span',[_vm._v(_vm._s(_vm.translateLabel('modelCardPower', _vm.power))+" "),(_vm.isDisclaimerEnabled)?_c('InfoIconButton',{staticClass:"tw-align-middle",on:{"click":_vm.openDisclaimerLayer}}):_vm._e()],1),_vm._v(" "),_vm._l((_vm.infoLayer),function(item){return _c('div',{directives:[{name:"show",rawName:"v-show",value:(item.key === 'consumption'),expression:"item.key === 'consumption'"}],key:item.key,staticClass:"layer-info-item tw-inline-block tw-text-xs tw-font-bmw-light"},[_c('span',{staticClass:"layer-info-item tw-flex"},[(item.value)?_c('span',{staticClass:"separator"}):_vm._e(),_vm._v(" "),(item.value && _vm.isOptionSelected(item.key))?_c('span',[_vm._v(" ,  ")]):_vm._e(),_vm._v(" "),(item.value && _vm.isOptionSelected(item.key))?_c('span',[_vm._v(" "+_vm._s(_vm.translateLabel(item.label, item.value))+" ")]):_vm._e(),_vm._v(" "),_c('a',{staticClass:"tw-relative tw-z-10 tw-ml-100",on:{"click":function($event){$event.preventDefault();return _vm.scrollToId('_js-stockcar-disclaimers')}}},[_c('sup',{staticClass:"tw-font-bmw-light"},[_vm._v(_vm._s(_vm.disclaimer(item.disclaimer, false)))])])])])})],2):_vm._e(),_vm._v(" "),_vm._l((_vm.filteredInfoLayer),function(item){return _c('div',{key:item.key,staticClass:"layer-info-item tw-text-xs tw-flex tw-font-bmw-light"},[_c('span',[_vm._v(" "+_vm._s(_vm.translateLabel(item.label, item.value))+" ")]),_vm._v(" "),_c('a',{staticClass:"tw-relative tw-z-10",on:{"click":function($event){$event.preventDefault();return _vm.scrollToId('_js-stockcar-disclaimers')}}},[_c('sup',{staticClass:"tw-font-bmw-light"},[_vm._v(_vm._s(_vm.disclaimer(item.disclaimer, false)))])])])})],2)]):_vm._e(),_vm._v(" "),(!this.hasPreprodImages)?_c('div',{staticClass:"card-description-price tw-flex tw-items-center tw-mb-200 tw-font-bmw-light",class:{ 'tw-text-m': !_vm.isLarge(), 'tw-text-l': _vm.isLarge(), }},[(_vm.carPrice !== 0)?[(!_vm.isDuo() && _vm.cardDescription && _vm.cardDescription.isGroup)?_c('span',[_vm._v(" "+_vm._s(_vm.i18n.startingFrom)+"  ")]):_vm._e(),_vm._v(" "),_c('span',{staticClass:"car-price"},[_vm._v(" "+_vm._s(_vm.priceFormat(_vm.carPrice))+" ")]),_vm._v(" "),(_vm.shownInfo.priceTooltip && !_vm.isGroup(_vm.carPrice))?_c('div',{ref:"disclaimerIcon",staticClass:"model-card-disclaimer-icon tw-z-10 tw-relative tw-cursor-pointer tw-border-solid tw-rounded-full tw-border-200 tw-border-grey-300 tw-mx-200 tw-inline-block tw-text-m",on:{"click":function($event){return _vm.openDisclaimer()}}},[_c('i',{staticClass:"icon-info-i tw-text-grey-600"})]):_vm._e()]:_vm._e()],2):_vm._e(),_vm._v(" "),(!_vm.isMobile())?_c('div',{staticClass:"tw-clearfix model-card-button"},[_c('router-link',{staticClass:"cta tw-text-button tw-bg-primary-500 tw-p-300 tw-block tw-z-10",class:{ 'tw-mt-500 tw-w-full': !_vm.isDuo(), 'tw-mt-300': _vm.isDuo(), },attrs:{"data-tracking-linkid":_vm.activityMapLink,"to":{
              path: _vm.url,
              query: _vm.query,
            }}},[(_vm.urlI18n.length)?_c('span',{staticClass:"white tw-font-bmw-bold"},[_vm._v(" "+_vm._s(_vm.urlI18n)+" ")]):_vm._e()])],1):_vm._e(),_vm._v(" "),(
          !this.hasPreprodImages &&
          _vm.emissionCubes &&
          _vm.emissionCubes.length > 0)?_c('div',{staticClass:"emission-cubes tw-flex"},_vm._l((_vm.emissionCubes),function(item){return _c('div',{key:item.key,staticClass:"layer-legal-item tw-text-xs tw-flex tw-font-bmw-light"},[_c('EmissionCube',{staticClass:"emission-cube-item tw-inline",attrs:{"value":item.value,"type":item.key}}),_vm._v(" "),_c('p',{staticClass:"layer-legal-item__label tw-text-xs tw-mb-100"},[_vm._v(" "+_vm._s(_vm.translateLabel(item.label, item.value, item.key))+" ")]),_vm._v(" "),(
                typeof item.value !== 'undefined' && _vm.isOptionSelected(item.key)
              )?_c('a',{staticClass:"tw-relative tw-m-0 tw-z-10",on:{"click":function($event){$event.preventDefault();return _vm.scrollToId('_js-stockcar-disclaimers')}}},[_c('sup',{staticClass:"tw-font-bmw-light"},[_vm._v(_vm._s(_vm.disclaimer(item.disclaimer, false)))])]):_vm._e()],1)}),0):_vm._e()],1)]),_vm._v(" "),_c('transition',{attrs:{"name":"fade"}},[(_vm.open)?_c('div',{ref:"modelCardDisclaimer",staticClass:"model-card-disclaimer tw-z-200 sm:tw-absolute tw-h-full tw-w-screen sm:tw-w-auto sm:tw-h-auto tw-fixed tw-z-20 tw-p-500 tw-bg-white",class:_vm.arrowClass,style:({
          left: _vm.tooltipStyles.left,
          top: _vm.tooltipStyles.top,
          right: _vm.tooltipStyles.right,
          width: _vm.tooltipStyles.width,
        })},[_c('div',[_c('div',{staticClass:"tw-flex tw-mb-200"},[_c('p',{staticClass:"model-card-title tw-text-grey-900 tw-text-m tw-w-3/5 tw-font-bmw-bold"},[_vm._v(" "+_vm._s(_vm.fullCardTitle)+" ")]),_vm._v(" "),_c('button',{staticClass:"close-button tw-absolute tw-m-200 tw-pin-t reset-button reset-button-hover tw-text-grey-800 icon-close-x",class:_vm.buttonStyle,on:{"click":_vm.closeDisclaimer}})]),_vm._v(" "),_vm._t("model-card-finance")],2)]):_vm._e()])],1)},staticRenderFns: [],_scopeId: 'data-v-65169612',
    name: 'ModelCard',
    components: {
      EmissionCube,
      ModelCardFlag,
      CosyImage,
      InfoIconButton,
    },
    mixins: [
      ModelFlagMixin,
      preprodImagesPropsMixin,
      preprodImagesMixin,
    ],
    directives: {
      'click-outside': {
        bind(el, binding, vnode) {
          let event = function (event) {
            if (!(el === event.target || el.contains(event.target))) {
              vnode.context[binding.expression](event);
            }
          };
          document.body.addEventListener('click', event);
        },
        unbind(el) {
          document.body.removeEventListener('click', event);
        },
      },
    },
    props: {
      aemConfig: {
        type: Object,
        default: () => ({}),
      },
      dataConfig: {
        type: Object,
        default: () => ({}),
      },
      containerElement: {
        type: [Object, Element],
        default: () => ({}),
      },
      shownInfo: {
        type: Object,
        default: () => ({}),
      },
      width: {
        type: Number,
        default: 360,
      },
      height: {
        type: Number,
        default: 150,
      },
      alt: {
        type: String,
        default: 'Not found',
      },
      brand: {
        type: String,
        default: 'WBBM',
      },
      vehicle: {
        type: String,
        default: 'YH11',
      },
      sa: {
        type: String,
        default: 'sa',
      },
      cardVariant: {
        type: String,
        default: 'default',
      },
      shortCardTitle: {
        type: String,
        default: '',
      },
      fullCardTitle: {
        type: String,
        default: '',
      },
      url: {
        type: String,
        default: '/details',
      },
      query: {
        type: Object,
        default: () => ({}),
      },
      urlI18n: {
        type: String,
        default: 'View details',
      },
      carPrice: {
        type: [Number, Object],
        required: true,
        default: 100000,
      },
      cardDescription: {
        type: Object,
        default() {
          return null;
        },
      },
      currencyFormat: {
        type: Object,
        default() {
          return {
            separator: '.',
            format: '###,### €',
          };
        },
      },
      isDuoReverseVariant: {
        type: Boolean,
        default: false,
      },
      paint: {
        type: String,
        default: '',
      },
      findOutMoreI18n: {
        type: String,
        default: 'Find out more',
      },
      i18n: {
        type: Object,
        required: true,
      },
      cosyUrl: {
        type: String,
        default: 'https://prod.cosy.bmw.cloud/bmwweb/cosySec',
      },
      cosyPrefix: {
        type: String,
      },
      cosyToken: {
        type: String,
      },
      infoLayer: {
        type: [Object, Array],
        required: true,
      },
      disclaimers: {
        type: Object,
        required: true,
      },
      power: {
        type: Array,
        required: true,
      },
      buttonStyle: {
        type: String,
        default: '',
      },
    },
    data() {
      return {
        config: {
          angle: 0,
          cut: 1,
          w: 0,
          h: 0,
          x: 0,
          y: 0,
        },
        tooltipStyles: {
          left: '0px',
          top: '0px',
          right: 'auto',
          width: '400px',
        },
        imageContainerSize: {
          width: 0,
          height: 0,
        },
        calcWidth: 330,
        calcHeight: 150,
        background: 'WHITE',
        resp: 'JPEG',
        direction() {
          return this.getDirection();
        },
        activeBreakpoint: EventBus$1.$data.activeBreakpoint,
        calculatedHeight: 0,
        open: false,
        wltp: false,
        arrowClass: 'left-arrow',
        shouldShowComingSoonFlag: this.shouldDisplayComingSoonFlagVariant(),
        shouldShowFlag: this.shouldDisplayModelCardFlag(),
      };
    },
    computed: {
      preprodImage() {
        return this.preprodImages[0];
      },
      activityMapLink() {
        return `sl > new car stocklocator-importers > vehicle details viewed - ${this.fullCardTitle}`;
      },
      classObject() {
        const object = {
          'tw-flex-col': this.isDefault(),
          'tw-flex-row-reverse': this.isLarge(),
          'tw-px-600 tw-py-500': this.isDuo() && this.isLarge(),
        };
        object[this.cardVariant] = true;
        return object;
      },
      findOutMoreCTA() {
        return !this.isDuo() && !this.isDefault();
      },
      disclaimerNumbers() {
        return [
          this.disclaimers.nefzDisclaimerEnable,
          this.disclaimers.nefzCorrelatedDisclaimerEnable,
          this.disclaimers.wltpDisclaimerEnable,
          this.disclaimers.emissionIconDisclaimerEnable,
        ]
          .map((isEnabled) => (isEnabled ? 1 : 0))
          .reduce(
            (acc, value, idx) => {
              const previous = acc[`disc${idx}`] || 0;
              acc[`disc${idx + 1}`] = previous + value;
              return acc;
            },
            {
              disc1: 0,
              disc2: 0,
              disc3: 0,
              disc4: 0,
              disc5: 0,
            }
          );
      },
      emissionCubes() {
        return this.infoLayer.filter(
          (item) =>
            (item.key === 'pollutionLevel' || item.key === 'safetyLevel') &&
            typeof item.value !== 'undefined' &&
            this.isOptionSelected(item.key)
        );
      },
      filteredInfoLayer() {
        return this.infoLayer.filter(
          (item) =>
            item.key !== 'pollutionLevel' &&
            item.key !== 'safetyLevel' &&
            typeof item.value !== 'undefined' &&
            this.isOptionSelected(item.key)
        );
      },
      isDisclaimerEnabled() {
        return (
          (this.dataConfig.type === 'PHEV' &&
            this.aemConfig.shownInfo.phevDisclaimer) ||
          (this.dataConfig.type === 'MHEV' &&
            this.aemConfig.shownInfo.mhevDisclaimer)
        );
      },
    },
    mounted() {
      EventBus$1.$on('breakpointChange', (breakpoint) => {
        this.activeBreakpoint = breakpoint;
        this.direction = this.getDirection();
        this.calculateImageSizes();
      });
      this.imageContainerSize = this.getImageContainerSizes();
      this.calculateImageSizes();
    },
    created() {
      this.config = CardConfig[this.cardVariant];
      this.direction = this.getDirection();
    },
    methods: {
      scrollToId(id) {
        const disclaimerElement = document.getElementById(id.replace('#', ''));
        const offsetFromTopNav = 100;
        if (disclaimerElement) {
          if (window.scrollTo) {
            const scrollValue =
              disclaimerElement.getBoundingClientRect().top + window.scrollY;
            window.scrollTo(0, Math.floor(scrollValue - offsetFromTopNav));
          } else {
            disclaimerElement.scrollIntoView();
          }
        }
      },
      isGroup(price) {
        return isObject(price);
      },
      disclaimer(disclaimer, link) {
        if (disclaimer === 'nefz' && this.disclaimers.nefzDisclaimerEnable) {
          if (link) {
            return '#nefzDisclaimer';
          }
          return `[${this.disclaimerNumbers.disc1}]`;
        }

        if (
          disclaimer === 'nefzCorelated' &&
          this.disclaimers.nefzCorrelatedDisclaimerEnable
        ) {
          if (link) {
            return '#nefzCorrelatedDisclaimer';
          }
          return `[${this.disclaimerNumbers.disc2}]`;
        }

        if (disclaimer === 'wltp' && this.disclaimers.wltpDisclaimerEnable) {
          if (link) {
            return '#wltpDisclaimer';
          }
          return `[${this.disclaimerNumbers.disc3}]`;
        }

        if (
          disclaimer === 'emissionIcon' &&
          this.disclaimers.emissionIconDisclaimerEnable
        ) {
          if (link) {
            return '#emissionIconDisclaimer';
          }
          return `[${this.disclaimerNumbers.disc4}]`;
        }

        return '';
      },
      priceFormat(price) {
        let carPrice = 0;
        if (isObject(price)) {
          carPrice = price.min;
        } else {
          carPrice = price;
        }

        let numberPattern = '###,###';
        let numberWithSeparator = carPrice
          .toString()
          .replace(/\B(?=(\d{3})+(?!\d))/g, this.currencyFormat.separator);
        let numberWithCurrency = this.currencyFormat.format.replace(
          numberPattern,
          numberWithSeparator
        );
        return numberWithCurrency;
      },
      infoValueFormat(value) {
        let separator = this.currencyFormat.separator;
        let numberWithSeparator = value.toString().replace(/[.,]/g, separator);
        return numberWithSeparator;
      },
      toFixed(label, value) {
        const parsedValue = +value;
        if (
          (parsedValue || parsedValue === 0) &&
          parsedValue.toFixed &&
          label !== 'power' &&
          label !== 'modelCardPower' &&
          label !== 'electricRange' &&
          label !== 'meanCustomerElRange' &&
          label !== 'meanCustomerRange'
        ) {
          return parsedValue.toFixed(1);
        }
        return parsedValue;
      },
      translateLabel(label, value, key) {
        let translation = this.i18n[label];

        if (!translation) {
          return '';
        }

        if (!Array.isArray(value)) {
          if (
            translation.indexOf('{0}') === -1 &&
            key !== 'pollutionLevel' &&
            key !== 'safetyLevel'
          ) {
            return `${translation} - ${this.toFixed(label, value)}`;
          }

          value = [value];
        }

        value.forEach((currVal, index) => {
          currVal = this.toFixed(label, currVal);
          currVal = this.infoValueFormat(currVal);
          translation = translation.replace(`{${index}}`, currVal);
        });
        return translation;
      },
      showEmissionCube(option) {
        return option === 'pollution' || option === 'safety';
      },
      isOptionSelected(option) {
        let mappedConfig = Object.keys(this.shownInfo).reduce((acc, key) => {
          let newKey = key;
          if (key === 'fuel') {
            newKey = 'consumption';
          }
          if (
            key === 'electricRangeMeanCustomer' ||
            key === 'electricRangeMean'
          ) {
            newKey = 'meanCustomerElRange';
          }
          if (key === 'totalRangeMeanCustomer' || key === 'totalRange') {
            newKey = 'meanCustomerRange';
          }
          if (key === 'co2') {
            newKey = 'emission';
          }
          if (key === 'electricityConsumption') {
            newKey = 'electricityConsumption';
          }
          acc[newKey] = this.shownInfo[key];

          return acc;
        }, {});

        return mappedConfig[option] || false;
      },
      isLarge() {
        return this.cardVariant === 'large';
      },
      isDefault() {
        return this.cardVariant === 'default';
      },
      isDuo() {
        return this.cardVariant === 'duo';
      },
      isDesktop() {
        return this.activeBreakpoint === 'lg' || this.activeBreakpoint === 'xl';
      },
      isMobile() {
        return (
          this.activeBreakpoint === 'xs' ||
          this.activeBreakpoint === 'sm' ||
          this.activeBreakpoint === 'md'
        );
      },
      isLargeScreen() {
        return this.activeBreakpoint === 'lg';
      },
      closeDisclaimer() {
        this.open = false;
      },
      getContainerBoundaries() {
        if (
          this.containerElement &&
          this.containerElement.getBoundingClientRect
        ) {
          const boundaries = this.containerElement.getBoundingClientRect();
          return {
            right: boundaries.x + boundaries.width,
            bottom: boundaries.bottom,
          };
        }
        return {
          right: window.innerWidth,
          bottom: null,
        };
      },
      openDisclaimer() {
        if (!this.isMobile()) {
          const boundaries = this.getContainerBoundaries();
          const containerWidth = boundaries.right || window.innerWidth;
          const modelCardWidth = this.$refs.modelCard.getBoundingClientRect()
            .width;
          const iconSize = this.$refs.disclaimerIcon.getBoundingClientRect();
          const iconTopPosition = this.$refs.disclaimerIcon.offsetTop;
          const iconLeftPosition = this.$refs.disclaimerIcon.offsetLeft;
          const iconRightPosition = modelCardWidth - iconLeftPosition;
          const topOffset = 65;
          const horizontalOffset = 35;

          this.tooltipStyles.left = `${
          Math.round(iconLeftPosition) + iconSize.width + horizontalOffset
        }px`;
          this.tooltipStyles.top = `${
          Math.round(iconTopPosition) + iconSize.height - topOffset
        }px`;
          this.arrowClass = 'left-arrow';
          this.open = true;

          this.$nextTick(() => {
            const disclaimerRightPosition = this.$refs.modelCardDisclaimer.getBoundingClientRect()
              .right;
            if (disclaimerRightPosition > containerWidth) {
              this.arrowClass = 'right-arrow';
              this.tooltipStyles.left = 'auto';
              this.tooltipStyles.right = `${Math.round(
              iconRightPosition + horizontalOffset
            )}px`;
            }
          });
        } else {
          this.$emit('openDisclaimer');
          this.open = true;
        }
      },
      closeModals(event) {
        this.wltp = false;
        this.open = false;
      },
      getDirection() {
        if (this.isDuo() && this.isDesktop()) {
          if (this.isDuoReverseVariant) {
            return {
              image: 'ltr',
              description: 'ltr',
            };
          }
          return {
            image: 'rtl',
            description: 'ltr',
          };
        }
        return {
          image: 'auto',
          description: 'ltr',
        };
      },
      calculateImageSizes() {
        this.calcHeight = this.height;
        this.calcWidth = this.width - 30;
        if (this.isLarge() && this.$refs['image-container']) {
          const sizes = this.imageContainerSize;
          this.calcHeight =
            sizes.height > this.height ? sizes.height : this.height;
          this.calcWidth = sizes.width;
        }
        if (this.isDuo()) {
          this.calcHeight = this.config.height;
          this.calcWidth = this.config.width;
        }
      },
      hasShortTitle() {
        return (
          this.shortCardTitle && this.shortCardTitle.length && this.isDefault()
        );
      },
      getImageContainerSizes() {
        return {
          width: this.$refs['image-container'].scrollWidth,
          height: this.$refs['image-container'].scrollHeight,
        };
      },
      openDisclaimerLayer() {
        this.$emit('openDisclaimerLayer');
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(`${err.stack}\n\nfound in ${info} inside ModelCard component`);
      this.$emit('error', err);
      return false;
    },
  };

  var PriceFormatMixin = {
    props: {
      currencyFormat: {
        type: Object,
        default() {
          return {
            separator:".",
            format:"###,### €",
          };
        },
      },
    },
    methods: {
      priceFormat(price) {
        let carPrice = 0;
        if(isObject(price)){
          carPrice = price.min;
        } else {
          carPrice = price;
        }

        let numberPattern = '###,###';
        let numberWithSeparator = carPrice.toString().replace(/\B(?=(\d{3})+(?!\d))/g, this.currencyFormat.separator);
        let numberWithCurrency = this.currencyFormat.format.replace(numberPattern, numberWithSeparator);
        return numberWithCurrency;
      },
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".finance-data-label[data-v-2f555ace]{margin-right:auto}.finance-data-price[data-v-2f555ace]{margin-left:auto}html[dir=rtl] .finance-data-label[data-v-2f555ace]{margin-right:0;margin-left:auto}html[dir=rtl] .finance-data-price[data-v-2f555ace]{margin-right:auto;margin-left:0}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var StockcarFinance = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._l((_vm.financeData.additionalCosts),function({ name, value, index }){return _c('p',{key:index,staticClass:"disclaimer-finance-data tw-text-xs tw-flex tw-mb-100 tw-font-bmw-bold"},[_c('span',{staticClass:"finance-data-label tw-flex"},[_vm._v(" "+_vm._s(name)+" ")]),_vm._v(" "),_c('span',{staticClass:"finance-data-price tw-flex",attrs:{"dir":"ltr"}},[_vm._v(" "+_vm._s(_vm.priceFormat(value))+" ")])])}),_vm._v(" "),_c('p',{staticClass:"disclaimer-finance-data tw-text-xs tw-flex tw-mb-0 tw-font-bmw-bold"},[_c('span',{staticClass:"finance-data-label"},[_vm._v(" "+_vm._s(_vm.priceLabel)+" ")]),_vm._v(" "),_c('span',{staticClass:"finance-data-price",attrs:{"dir":"ltr"}},[_vm._v(" "+_vm._s(_vm.priceFormat(_vm.financeData.priceWithTax))+" ")])]),_vm._v(" "),(_vm.hasDiscountPrice)?_c('p',{staticClass:"disclaimer-finance-data tw-text-xs tw-flex tw-mt-200 tw-mb-0 tw-font-bmw-bold"},[_c('span',{staticClass:"finance-data-label"},[_vm._v(" "+_vm._s(_vm.discountPriceLabel)+" ")]),_vm._v(" "),_c('span',{staticClass:"finance-data-price",attrs:{"dir":"ltr"}},[_vm._v(" "+_vm._s(_vm.priceFormat(_vm.financeData.discountPriceWithTax))+" ")])]):_vm._e()],2)},staticRenderFns: [],_scopeId: 'data-v-2f555ace',
    name: 'StockcarFinance',
    mixins: [PriceFormatMixin],
    props: {
      i18n: {
        type: Object,
        required: true,
      },
      financeData: {
        type: Object,
        default: () => ({}),
      },
    },
    computed: {
      hasDiscountPrice() {
        return this.financeData.discountPriceWithTax !== 0;
      },
      priceLabel() {
        return this.i18n.price;
      },
      discountPriceLabel() {
        return this.i18n.specialOfferLabel;
      },
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();












































  var StockcarWltp = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._v(" wltp "),_c('p',{staticClass:"tw-text-xs tw-flex tw-mb-100"},[_c('span',{staticClass:"tw-text-left tw-mr-auto"},[_vm._v(" Province ")]),_vm._v(" "),_c('span',{staticClass:"tw-text-left tw-ml-auto tw-font-bmw-light"},[_vm._v(" British columbia ")])]),_vm._v(" "),_c('p',{staticClass:"tw-text-xs tw-flex tw-mb-100"},[_c('span',{staticClass:"tw-text-left tw-mr-auto"},[_vm._v(" MSRP ")]),_vm._v(" "),_c('span',{staticClass:"tw-text-left tw-ml-auto"},[_vm._v(" $ 52,750 ")])]),_vm._v(" "),_c('p',{staticClass:"tw-text-xs tw-flex tw-mb-100"},[_c('span',{staticClass:"tw-text-left tw-mr-auto"},[_vm._v(" Total Selling Price ")]),_vm._v(" "),_c('span',{staticClass:"tw-text-left tw-ml-auto tw-font-bmw-light"},[_vm._v(" $ 57,760 ")])]),_vm._v(" "),_c('p',{staticClass:"tw-text-xs tw-mt-400 tw-mb-400"},[_c('span',{staticClass:"tw-text-left"},[_c('span',[_vm._v("co2")]),_vm._v(" 100 g/km ")])]),_vm._v(" "),_c('p',{staticClass:"tw-text-xs"},[_c('span',{staticClass:"tw-text-left"},[_vm._v(" The Build & Price experience is an ongoing development and is for informational purposes only and in no way constitutes an offer to buy or sell BMW vehicles. Any sale, lease or finance of a BMW vehicle shall be subject to the terms and conditions ")])])])}],
    name: 'StockcarWltp',
    props: {
    }
  };

  /*
  base-core
  Version: 0.0.1
  (c) Interone
  */

  class BodyScrollLock {
    constructor() {
      this.scrollPosition = 0;
      this.defaultBodyscrolllockStyle = 'basic';
      this.ds2ScrollLockClass = 'ds2-scrolllock';
    }

    enableBodyScroll(distanceFromTheTop = 0) {
      document.body.style.position = '';
      document.body.style.top = '';
      document.body.style.width = '';

      if (distanceFromTheTop > 0) {
        window.scrollTo(0, distanceFromTheTop);
      } else {
        window.scrollTo(0, this.scrollPosition);
      }
    }

    disableBodyScroll(distanceFromTheTop = 0) {
      this.scrollPosition = window.pageYOffset;
      document.body.style.position = 'fixed';
      document.body.style.top = `-${distanceFromTheTop}px`;
      /* FIX for ds2-slider wihout this slick is losing the track of available width of the items */
      document.body.style.width = '100%';
    }

    apllyDs2Scrolllock(parameter) {
      if(parameter === this.defaultBodyscrolllockStyle) {
        document.body.classList.add(`${this.ds2ScrollLockClass}--${this.defaultBodyscrolllockStyle}`);
      } else if(!parameter) {
        document.body.classList.add(`${this.ds2ScrollLockClass}`);
      } else {
        document.body.classList.add(`${this.ds2ScrollLockClass}--${parameter}`);
      }
    }

    removeDs2Scrolllock() {
      let classes = Array.from(document.body.classList);
      let filteredClasses = classes.filter(className => className.match(this.ds2ScrollLockClass));
      filteredClasses.forEach(ds2Class => document.body.classList.remove(ds2Class));
    }
  }

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".stockcar-disclaimer-generic p{font-family:bmwTypeNextWeb,Arial,Helvetica,Roboto,sans-serif;font-weight:300}.stockcar-disclaimer-generic[data-v-4025bfd7]{overflow:hidden}.stockcar-disclaimer-generic-arrow[data-v-4025bfd7]:before{color:#000}.stockcar-disclaimer-generic-arrow[data-v-4025bfd7]{margin-bottom:-20px;font-size:40px;text-align:center}@media (max-width:992px){.stockcar-disclaimer-generic[data-v-4025bfd7]{height:auto;overflow:visible}.stockcar-disclaimer-container[data-v-4025bfd7]{height:100%;max-height:100%;overflow:auto}}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  const bodyScrollLock = new BodyScrollLock();

  var StockcarDisclaimer = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"stockcar-disclaimer-container"},[(_vm.financeDisclaimer)?_c('StockcarFinance',{attrs:{"finance-data":_vm.financeData,"currency-format":_vm.currencyFormat,"i18n":_vm.i18n}}):_vm._e(),_vm._v(" "),(_vm.wltpDisclaimer)?_c('StockcarWltp'):_vm._e(),_vm._v(" "),_c('div',{staticClass:"tw-mb-400"},[_vm._t("default")],2),_vm._v(" "),(_vm.aemConfig.genericDisclaimerCopy && _vm.aemConfig.genericDisclaimerCopy.length)?_c('div',[_c('div',{ref:"genericDisclaimer",staticClass:"stockcar-disclaimer-generic",style:(_vm.disclaimerGenericStyle),domProps:{"innerHTML":_vm._s(_vm.aemConfig.genericDisclaimerCopy)}}),_vm._v(" "),(_vm.shouldShowArrow)?_c('div',{staticClass:"stockcar-disclaimer-generic-more",on:{"click":_vm.toggleGenericDisclaimer}},[_c('div',{staticClass:"stockcar-disclaimer-generic-arrow",class:_vm.iconGenericArrow})]):_vm._e()]):_vm._e()],1)},staticRenderFns: [],_scopeId: 'data-v-4025bfd7',
    name: 'StockcarDisclaimer',
    components: {
      StockcarFinance,
      StockcarWltp,
    },
    props: {
      i18n: {
        type: Object,
        required: true,
      },
      aemConfig: {
        type: Object,
        required: true,
      },
      financeDisclaimer: {
        type: Boolean,
        default: false,
      },
      wltpDisclaimer: {
        type: Boolean,
        default: false,
      },
      coEmission: {
        type: [String, Number],
        default: '',
      },
      financeData: {
        type: Object,
        default: () => ({}),
      },
      currencyFormat: {
        type: Object,
        default() {
          return {
            separator: '.',
            format: '###,### €',
          };
        },
      },
    },
    data() {
      return {
        shouldShowArrow: false,
        showGenericDisclaimer: false,
      };
    },
    computed: {
      iconGenericArrow() {
        return !this.showGenericDisclaimer ? 'icon-arrow-down' : 'icon-arrow-up';
      },
      disclaimerGenericStyle() {
        return this.showGenericDisclaimer
          ? { height: `${this.$refs.genericDisclaimer.scrollHeight}px` }
          : { maxHeight: '100px' };
      },
      co2EmissionComputed() {
        if (this.coEmission || this.coEmission === 0) {
          return this.i18n.emission.replace('{0}', this.coEmission);
        }
        return '';
      },
    },
    beforeDestroy() {
      const width = Math.max(
        document.documentElement.clientWidth,
        window.innerWidth || 0
      );
      if (width < 992) {
        bodyScrollLock.enableBodyScroll();
      }
    },
    mounted() {
      this.$nextTick(() => {
        const width = Math.max(
          document.documentElement.clientWidth,
          window.innerWidth || 0
        );
        if (width < 992) {
          bodyScrollLock.disableBodyScroll();
        }
        if (this.$refs.genericDisclaimer.scrollHeight > 100 && width >= 992) {
          this.shouldShowArrow = true;
        }
      });
    },
    methods: {
      toggleGenericDisclaimer() {
        this.showGenericDisclaimer = !this.showGenericDisclaimer;
      },
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".scrim[data-v-80b346e8]{background-color:rgba(0,0,0,.7);position:fixed;top:0;left:0;bottom:0;right:0;width:100vw;height:100vh;-webkit-transition:opacity .3s;transition:opacity .3s;z-index:7000}.modal[data-v-80b346e8]{z-index:6050;-webkit-transition:opacity .3s;transition:opacity .3s}.close-button[data-v-80b346e8]{position:absolute;top:0;right:0}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var BackdropModal = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('transition',{attrs:{"name":"fade"}},[(_vm.open && _vm.isDesktop)?_c('div',{staticClass:"scrim",class:_vm.scrimClasses,attrs:{"aria-label":_vm.dialogLabel,"role":"dialog"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"esc",27,$event.key,["Esc","Escape"])){ return null; }return _vm.closeModal.apply(null, arguments)},"click":_vm.handleScrimClick}},[_c('div',{ref:"modalContent",staticClass:"modal tw-relative tw-bg-white",class:_vm.modalClasses,attrs:{"role":"document"}},[_c('div',{staticClass:"tw-block"},[_vm._t("default")],2),_vm._v(" "),_c('button',{staticClass:"reset-button reset-button-hover close-button tw-text-grey-900 tw-text-icon-2xl icon-close-x",class:_vm.buttonClass,attrs:{"aria-label":_vm.closeButtonLabel},on:{"click":_vm.closeModal}})])]):_vm._e(),_vm._v(" "),(_vm.open && !_vm.isDesktop)?_c('div',{staticClass:"modal tw-bg-white tw-h-full tw-w-full tw-pin-l tw-pin-t tw-overflow-auto",class:_vm.modalClasses,attrs:{"role":"dialog"},on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"esc",27,$event.key,["Esc","Escape"])){ return null; }return _vm.closeModal.apply(null, arguments)}}},[_c('div',{staticClass:"tw-h-full tw-w-full",attrs:{"role":"document"}},[_c('div',{staticClass:"tw-block tw-h-full"},[_vm._t("default")],2),_vm._v(" "),_c('button',{staticClass:"reset-button reset-button-hover close-button tw-text-grey-900 tw-text-icon-2xl icon-close-x",class:_vm.buttonClass,attrs:{"aria-label":_vm.closeButtonLabel},on:{"click":_vm.closeModal}})])]):_vm._e()])},staticRenderFns: [],_scopeId: 'data-v-80b346e8',
    name: 'BackdropModal',
    mixins: [stockcarDetecSizeMixin],
    props: {
      open: {
        type: Boolean,
        required: true,
      },
      type: {
        type: String,
        default: 'absolute',
      },
      buttonClass: {
        type: [String, Object, Array],
        default: '',
      },
      closeButtonLabel: {
        type: String,
        default: 'Close Dialog',
      },
      dialogLabel: {
        type: String,
        default: '',
      },
    },
    computed: {
      isDesktop() {
        return this.device === 'desktop';
      },
      hasButtonSlot() {
        return !!this.$slots['close-button'];
      },
      scrimClasses() {
        return {
          'tw-fixed': true,
          'tw-overflow-auto': true,
        };
      },
      modalClasses() {
        return {
          'tw-container': this.isDesktop,
          'tw-my-600': this.isDesktop,
          'tw-fixed': true,
        };
      },
    },
    methods: {
      handleScrimClick(evt) {
        if (
          evt.target === this.$refs.modalContent ||
          this.$refs.modalContent.contains(evt.target)
        ) {
          return;
        }
        this.closeModal();
      },
      closeModal() {
        this.$emit('onCloseModal');
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside OverlayModal component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */

  function __decorate(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
  }

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  /**
   * True if the custom elements polyfill is in use.
   */
  const isCEPolyfill = typeof window !== 'undefined' &&
      window.customElements != null &&
      window.customElements.polyfillWrapFlushCallback !==
          undefined;
  /**
   * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from
   * `container`.
   */
  const removeNodes = (container, start, end = null) => {
      while (start !== end) {
          const n = start.nextSibling;
          container.removeChild(start);
          start = n;
      }
  };

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  /**
   * An expression marker with embedded unique key to avoid collision with
   * possible text in templates.
   */
  const marker = `{{lit-${String(Math.random()).slice(2)}}}`;
  /**
   * An expression marker used text-positions, multi-binding attributes, and
   * attributes with markup-like text values.
   */
  const nodeMarker = `<!--${marker}-->`;
  const markerRegex = new RegExp(`${marker}|${nodeMarker}`);
  /**
   * Suffix appended to all bound attribute names.
   */
  const boundAttributeSuffix = '$lit$';
  /**
   * An updatable Template that tracks the location of dynamic parts.
   */
  class Template {
      constructor(result, element) {
          this.parts = [];
          this.element = element;
          const nodesToRemove = [];
          const stack = [];
          // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null
          const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);
          // Keeps track of the last index associated with a part. We try to delete
          // unnecessary nodes, but we never want to associate two different parts
          // to the same index. They must have a constant node between.
          let lastPartIndex = 0;
          let index = -1;
          let partIndex = 0;
          const { strings, values: { length } } = result;
          while (partIndex < length) {
              const node = walker.nextNode();
              if (node === null) {
                  // We've exhausted the content inside a nested template element.
                  // Because we still have parts (the outer for-loop), we know:
                  // - There is a template in the stack
                  // - The walker will find a nextNode outside the template
                  walker.currentNode = stack.pop();
                  continue;
              }
              index++;
              if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {
                  if (node.hasAttributes()) {
                      const attributes = node.attributes;
                      const { length } = attributes;
                      // Per
                      // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,
                      // attributes are not guaranteed to be returned in document order.
                      // In particular, Edge/IE can return them out of order, so we cannot
                      // assume a correspondence between part index and attribute index.
                      let count = 0;
                      for (let i = 0; i < length; i++) {
                          if (endsWith$1(attributes[i].name, boundAttributeSuffix)) {
                              count++;
                          }
                      }
                      while (count-- > 0) {
                          // Get the template literal section leading up to the first
                          // expression in this attribute
                          const stringForPart = strings[partIndex];
                          // Find the attribute name
                          const name = lastAttributeNameRegex.exec(stringForPart)[2];
                          // Find the corresponding attribute
                          // All bound attributes have had a suffix added in
                          // TemplateResult#getHTML to opt out of special attribute
                          // handling. To look up the attribute value we also need to add
                          // the suffix.
                          const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;
                          const attributeValue = node.getAttribute(attributeLookupName);
                          node.removeAttribute(attributeLookupName);
                          const statics = attributeValue.split(markerRegex);
                          this.parts.push({ type: 'attribute', index, name, strings: statics });
                          partIndex += statics.length - 1;
                      }
                  }
                  if (node.tagName === 'TEMPLATE') {
                      stack.push(node);
                      walker.currentNode = node.content;
                  }
              }
              else if (node.nodeType === 3 /* Node.TEXT_NODE */) {
                  const data = node.data;
                  if (data.indexOf(marker) >= 0) {
                      const parent = node.parentNode;
                      const strings = data.split(markerRegex);
                      const lastIndex = strings.length - 1;
                      // Generate a new text node for each literal section
                      // These nodes are also used as the markers for node parts
                      for (let i = 0; i < lastIndex; i++) {
                          let insert;
                          let s = strings[i];
                          if (s === '') {
                              insert = createMarker();
                          }
                          else {
                              const match = lastAttributeNameRegex.exec(s);
                              if (match !== null && endsWith$1(match[2], boundAttributeSuffix)) {
                                  s = s.slice(0, match.index) + match[1] +
                                      match[2].slice(0, -boundAttributeSuffix.length) + match[3];
                              }
                              insert = document.createTextNode(s);
                          }
                          parent.insertBefore(insert, node);
                          this.parts.push({ type: 'node', index: ++index });
                      }
                      // If there's no text, we must insert a comment to mark our place.
                      // Else, we can trust it will stick around after cloning.
                      if (strings[lastIndex] === '') {
                          parent.insertBefore(createMarker(), node);
                          nodesToRemove.push(node);
                      }
                      else {
                          node.data = strings[lastIndex];
                      }
                      // We have a part for each match found
                      partIndex += lastIndex;
                  }
              }
              else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {
                  if (node.data === marker) {
                      const parent = node.parentNode;
                      // Add a new marker node to be the startNode of the Part if any of
                      // the following are true:
                      //  * We don't have a previousSibling
                      //  * The previousSibling is already the start of a previous part
                      if (node.previousSibling === null || index === lastPartIndex) {
                          index++;
                          parent.insertBefore(createMarker(), node);
                      }
                      lastPartIndex = index;
                      this.parts.push({ type: 'node', index });
                      // If we don't have a nextSibling, keep this node so we have an end.
                      // Else, we can remove it to save future costs.
                      if (node.nextSibling === null) {
                          node.data = '';
                      }
                      else {
                          nodesToRemove.push(node);
                          index--;
                      }
                      partIndex++;
                  }
                  else {
                      let i = -1;
                      while ((i = node.data.indexOf(marker, i + 1)) !== -1) {
                          // Comment node has a binding marker inside, make an inactive part
                          // The binding won't work, but subsequent bindings will
                          // TODO (justinfagnani): consider whether it's even worth it to
                          // make bindings in comments work
                          this.parts.push({ type: 'node', index: -1 });
                          partIndex++;
                      }
                  }
              }
          }
          // Remove text binding nodes after the walk to not disturb the TreeWalker
          for (const n of nodesToRemove) {
              n.parentNode.removeChild(n);
          }
      }
  }
  const endsWith$1 = (str, suffix) => {
      const index = str.length - suffix.length;
      return index >= 0 && str.slice(index) === suffix;
  };
  const isTemplatePartActive = (part) => part.index !== -1;
  // Allows `document.createComment('')` to be renamed for a
  // small manual size-savings.
  const createMarker = () => document.createComment('');
  /**
   * This regex extracts the attribute name preceding an attribute-position
   * expression. It does this by matching the syntax allowed for attributes
   * against the string literal directly preceding the expression, assuming that
   * the expression is in an attribute-value position.
   *
   * See attributes in the HTML spec:
   * https://www.w3.org/TR/html5/syntax.html#elements-attributes
   *
   * " \x09\x0a\x0c\x0d" are HTML space characters:
   * https://www.w3.org/TR/html5/infrastructure.html#space-characters
   *
   * "\0-\x1F\x7F-\x9F" are Unicode control characters, which includes every
   * space character except " ".
   *
   * So an attribute is:
   *  * The name: any character except a control character, space character, ('),
   *    ("), ">", "=", or "/"
   *  * Followed by zero or more space characters
   *  * Followed by "="
   *  * Followed by zero or more space characters
   *  * Followed by:
   *    * Any character except space, ('), ("), "<", ">", "=", (`), or
   *    * (") then any non-("), or
   *    * (') then any non-(')
   */
  const lastAttributeNameRegex = 
  // eslint-disable-next-line no-control-regex
  /([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  const walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;
  /**
   * Removes the list of nodes from a Template safely. In addition to removing
   * nodes from the Template, the Template part indices are updated to match
   * the mutated Template DOM.
   *
   * As the template is walked the removal state is tracked and
   * part indices are adjusted as needed.
   *
   * div
   *   div#1 (remove) <-- start removing (removing node is div#1)
   *     div
   *       div#2 (remove)  <-- continue removing (removing node is still div#1)
   *         div
   * div <-- stop removing since previous sibling is the removing node (div#1,
   * removed 4 nodes)
   */
  function removeNodesFromTemplate(template, nodesToRemove) {
      const { element: { content }, parts } = template;
      const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
      let partIndex = nextActiveIndexInTemplateParts(parts);
      let part = parts[partIndex];
      let nodeIndex = -1;
      let removeCount = 0;
      const nodesToRemoveInTemplate = [];
      let currentRemovingNode = null;
      while (walker.nextNode()) {
          nodeIndex++;
          const node = walker.currentNode;
          // End removal if stepped past the removing node
          if (node.previousSibling === currentRemovingNode) {
              currentRemovingNode = null;
          }
          // A node to remove was found in the template
          if (nodesToRemove.has(node)) {
              nodesToRemoveInTemplate.push(node);
              // Track node we're removing
              if (currentRemovingNode === null) {
                  currentRemovingNode = node;
              }
          }
          // When removing, increment count by which to adjust subsequent part indices
          if (currentRemovingNode !== null) {
              removeCount++;
          }
          while (part !== undefined && part.index === nodeIndex) {
              // If part is in a removed node deactivate it by setting index to -1 or
              // adjust the index as needed.
              part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;
              // go to the next active part.
              partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
              part = parts[partIndex];
          }
      }
      nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));
  }
  const countNodes = (node) => {
      let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;
      const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);
      while (walker.nextNode()) {
          count++;
      }
      return count;
  };
  const nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {
      for (let i = startIndex + 1; i < parts.length; i++) {
          const part = parts[i];
          if (isTemplatePartActive(part)) {
              return i;
          }
      }
      return -1;
  };
  /**
   * Inserts the given node into the Template, optionally before the given
   * refNode. In addition to inserting the node into the Template, the Template
   * part indices are updated to match the mutated Template DOM.
   */
  function insertNodeIntoTemplate(template, node, refNode = null) {
      const { element: { content }, parts } = template;
      // If there's no refNode, then put node at end of template.
      // No part indices need to be shifted in this case.
      if (refNode === null || refNode === undefined) {
          content.appendChild(node);
          return;
      }
      const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
      let partIndex = nextActiveIndexInTemplateParts(parts);
      let insertCount = 0;
      let walkerIndex = -1;
      while (walker.nextNode()) {
          walkerIndex++;
          const walkerNode = walker.currentNode;
          if (walkerNode === refNode) {
              insertCount = countNodes(node);
              refNode.parentNode.insertBefore(node, refNode);
          }
          while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {
              // If we've inserted the node, simply adjust all subsequent parts
              if (insertCount > 0) {
                  while (partIndex !== -1) {
                      parts[partIndex].index += insertCount;
                      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
                  }
                  return;
              }
              partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
          }
      }
  }

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  const directives = new WeakMap();
  /**
   * Brands a function as a directive factory function so that lit-html will call
   * the function during template rendering, rather than passing as a value.
   *
   * A _directive_ is a function that takes a Part as an argument. It has the
   * signature: `(part: Part) => void`.
   *
   * A directive _factory_ is a function that takes arguments for data and
   * configuration and returns a directive. Users of directive usually refer to
   * the directive factory as the directive. For example, "The repeat directive".
   *
   * Usually a template author will invoke a directive factory in their template
   * with relevant arguments, which will then return a directive function.
   *
   * Here's an example of using the `repeat()` directive factory that takes an
   * array and a function to render an item:
   *
   * ```js
   * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`
   * ```
   *
   * When `repeat` is invoked, it returns a directive function that closes over
   * `items` and the template function. When the outer template is rendered, the
   * return directive function is called with the Part for the expression.
   * `repeat` then performs it's custom logic to render multiple items.
   *
   * @param f The directive factory function. Must be a function that returns a
   * function of the signature `(part: Part) => void`. The returned function will
   * be called with the part object.
   *
   * @example
   *
   * import {directive, html} from 'lit-html';
   *
   * const immutable = directive((v) => (part) => {
   *   if (part.value !== v) {
   *     part.setValue(v)
   *   }
   * });
   */
  const directive = (f) => ((...args) => {
      const d = f(...args);
      directives.set(d, true);
      return d;
  });
  const isDirective = (o) => {
      return typeof o === 'function' && directives.has(o);
  };

  /**
   * @license
   * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  /**
   * A sentinel value that signals that a value was handled by a directive and
   * should not be written to the DOM.
   */
  const noChange = {};
  /**
   * A sentinel value that signals a NodePart to fully clear its content.
   */
  const nothing = {};

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  /**
   * An instance of a `Template` that can be attached to the DOM and updated
   * with new values.
   */
  class TemplateInstance {
      constructor(template, processor, options) {
          this.__parts = [];
          this.template = template;
          this.processor = processor;
          this.options = options;
      }
      update(values) {
          let i = 0;
          for (const part of this.__parts) {
              if (part !== undefined) {
                  part.setValue(values[i]);
              }
              i++;
          }
          for (const part of this.__parts) {
              if (part !== undefined) {
                  part.commit();
              }
          }
      }
      _clone() {
          // There are a number of steps in the lifecycle of a template instance's
          // DOM fragment:
          //  1. Clone - create the instance fragment
          //  2. Adopt - adopt into the main document
          //  3. Process - find part markers and create parts
          //  4. Upgrade - upgrade custom elements
          //  5. Update - set node, attribute, property, etc., values
          //  6. Connect - connect to the document. Optional and outside of this
          //     method.
          //
          // We have a few constraints on the ordering of these steps:
          //  * We need to upgrade before updating, so that property values will pass
          //    through any property setters.
          //  * We would like to process before upgrading so that we're sure that the
          //    cloned fragment is inert and not disturbed by self-modifying DOM.
          //  * We want custom elements to upgrade even in disconnected fragments.
          //
          // Given these constraints, with full custom elements support we would
          // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect
          //
          // But Safari does not implement CustomElementRegistry#upgrade, so we
          // can not implement that order and still have upgrade-before-update and
          // upgrade disconnected fragments. So we instead sacrifice the
          // process-before-upgrade constraint, since in Custom Elements v1 elements
          // must not modify their light DOM in the constructor. We still have issues
          // when co-existing with CEv0 elements like Polymer 1, and with polyfills
          // that don't strictly adhere to the no-modification rule because shadow
          // DOM, which may be created in the constructor, is emulated by being placed
          // in the light DOM.
          //
          // The resulting order is on native is: Clone, Adopt, Upgrade, Process,
          // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade
          // in one step.
          //
          // The Custom Elements v1 polyfill supports upgrade(), so the order when
          // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,
          // Connect.
          const fragment = isCEPolyfill ?
              this.template.element.content.cloneNode(true) :
              document.importNode(this.template.element.content, true);
          const stack = [];
          const parts = this.template.parts;
          // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null
          const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);
          let partIndex = 0;
          let nodeIndex = 0;
          let part;
          let node = walker.nextNode();
          // Loop through all the nodes and parts of a template
          while (partIndex < parts.length) {
              part = parts[partIndex];
              if (!isTemplatePartActive(part)) {
                  this.__parts.push(undefined);
                  partIndex++;
                  continue;
              }
              // Progress the tree walker until we find our next part's node.
              // Note that multiple parts may share the same node (attribute parts
              // on a single element), so this loop may not run at all.
              while (nodeIndex < part.index) {
                  nodeIndex++;
                  if (node.nodeName === 'TEMPLATE') {
                      stack.push(node);
                      walker.currentNode = node.content;
                  }
                  if ((node = walker.nextNode()) === null) {
                      // We've exhausted the content inside a nested template element.
                      // Because we still have parts (the outer for-loop), we know:
                      // - There is a template in the stack
                      // - The walker will find a nextNode outside the template
                      walker.currentNode = stack.pop();
                      node = walker.nextNode();
                  }
              }
              // We've arrived at our part's node.
              if (part.type === 'node') {
                  const part = this.processor.handleTextExpression(this.options);
                  part.insertAfterNode(node.previousSibling);
                  this.__parts.push(part);
              }
              else {
                  this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));
              }
              partIndex++;
          }
          if (isCEPolyfill) {
              document.adoptNode(fragment);
              customElements.upgrade(fragment);
          }
          return fragment;
      }
  }

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  /**
   * Our TrustedTypePolicy for HTML which is declared using the html template
   * tag function.
   *
   * That HTML is a developer-authored constant, and is parsed with innerHTML
   * before any untrusted expressions have been mixed in. Therefor it is
   * considered safe by construction.
   */
  const policy = window.trustedTypes &&
      trustedTypes.createPolicy('lit-html', { createHTML: (s) => s });
  const commentMarker = ` ${marker} `;
  /**
   * The return type of `html`, which holds a Template and the values from
   * interpolated expressions.
   */
  class TemplateResult {
      constructor(strings, values, type, processor) {
          this.strings = strings;
          this.values = values;
          this.type = type;
          this.processor = processor;
      }
      /**
       * Returns a string of HTML used to create a `<template>` element.
       */
      getHTML() {
          const l = this.strings.length - 1;
          let html = '';
          let isCommentBinding = false;
          for (let i = 0; i < l; i++) {
              const s = this.strings[i];
              // For each binding we want to determine the kind of marker to insert
              // into the template source before it's parsed by the browser's HTML
              // parser. The marker type is based on whether the expression is in an
              // attribute, text, or comment position.
              //   * For node-position bindings we insert a comment with the marker
              //     sentinel as its text content, like <!--{{lit-guid}}-->.
              //   * For attribute bindings we insert just the marker sentinel for the
              //     first binding, so that we support unquoted attribute bindings.
              //     Subsequent bindings can use a comment marker because multi-binding
              //     attributes must be quoted.
              //   * For comment bindings we insert just the marker sentinel so we don't
              //     close the comment.
              //
              // The following code scans the template source, but is *not* an HTML
              // parser. We don't need to track the tree structure of the HTML, only
              // whether a binding is inside a comment, and if not, if it appears to be
              // the first binding in an attribute.
              const commentOpen = s.lastIndexOf('<!--');
              // We're in comment position if we have a comment open with no following
              // comment close. Because <-- can appear in an attribute value there can
              // be false positives.
              isCommentBinding = (commentOpen > -1 || isCommentBinding) &&
                  s.indexOf('-->', commentOpen + 1) === -1;
              // Check to see if we have an attribute-like sequence preceding the
              // expression. This can match "name=value" like structures in text,
              // comments, and attribute values, so there can be false-positives.
              const attributeMatch = lastAttributeNameRegex.exec(s);
              if (attributeMatch === null) {
                  // We're only in this branch if we don't have a attribute-like
                  // preceding sequence. For comments, this guards against unusual
                  // attribute values like <div foo="<!--${'bar'}">. Cases like
                  // <!-- foo=${'bar'}--> are handled correctly in the attribute branch
                  // below.
                  html += s + (isCommentBinding ? commentMarker : nodeMarker);
              }
              else {
                  // For attributes we use just a marker sentinel, and also append a
                  // $lit$ suffix to the name to opt-out of attribute-specific parsing
                  // that IE and Edge do for style and certain SVG attributes.
                  html += s.substr(0, attributeMatch.index) + attributeMatch[1] +
                      attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +
                      marker;
              }
          }
          html += this.strings[l];
          return html;
      }
      getTemplateElement() {
          const template = document.createElement('template');
          let value = this.getHTML();
          if (policy !== undefined) {
              // this is secure because `this.strings` is a TemplateStringsArray.
              // TODO: validate this when
              // https://github.com/tc39/proposal-array-is-template-object is
              // implemented.
              value = policy.createHTML(value);
          }
          template.innerHTML = value;
          return template;
      }
  }

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  const isPrimitive = (value) => {
      return (value === null ||
          !(typeof value === 'object' || typeof value === 'function'));
  };
  const isIterable = (value) => {
      return Array.isArray(value) ||
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          !!(value && value[Symbol.iterator]);
  };
  /**
   * Writes attribute values to the DOM for a group of AttributeParts bound to a
   * single attribute. The value is only set once even if there are multiple parts
   * for an attribute.
   */
  class AttributeCommitter {
      constructor(element, name, strings) {
          this.dirty = true;
          this.element = element;
          this.name = name;
          this.strings = strings;
          this.parts = [];
          for (let i = 0; i < strings.length - 1; i++) {
              this.parts[i] = this._createPart();
          }
      }
      /**
       * Creates a single part. Override this to create a differnt type of part.
       */
      _createPart() {
          return new AttributePart(this);
      }
      _getValue() {
          const strings = this.strings;
          const l = strings.length - 1;
          const parts = this.parts;
          // If we're assigning an attribute via syntax like:
          //    attr="${foo}"  or  attr=${foo}
          // but not
          //    attr="${foo} ${bar}" or attr="${foo} baz"
          // then we don't want to coerce the attribute value into one long
          // string. Instead we want to just return the value itself directly,
          // so that sanitizeDOMValue can get the actual value rather than
          // String(value)
          // The exception is if v is an array, in which case we do want to smash
          // it together into a string without calling String() on the array.
          //
          // This also allows trusted values (when using TrustedTypes) being
          // assigned to DOM sinks without being stringified in the process.
          if (l === 1 && strings[0] === '' && strings[1] === '') {
              const v = parts[0].value;
              if (typeof v === 'symbol') {
                  return String(v);
              }
              if (typeof v === 'string' || !isIterable(v)) {
                  return v;
              }
          }
          let text = '';
          for (let i = 0; i < l; i++) {
              text += strings[i];
              const part = parts[i];
              if (part !== undefined) {
                  const v = part.value;
                  if (isPrimitive(v) || !isIterable(v)) {
                      text += typeof v === 'string' ? v : String(v);
                  }
                  else {
                      for (const t of v) {
                          text += typeof t === 'string' ? t : String(t);
                      }
                  }
              }
          }
          text += strings[l];
          return text;
      }
      commit() {
          if (this.dirty) {
              this.dirty = false;
              this.element.setAttribute(this.name, this._getValue());
          }
      }
  }
  /**
   * A Part that controls all or part of an attribute value.
   */
  class AttributePart {
      constructor(committer) {
          this.value = undefined;
          this.committer = committer;
      }
      setValue(value) {
          if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {
              this.value = value;
              // If the value is a not a directive, dirty the committer so that it'll
              // call setAttribute. If the value is a directive, it'll dirty the
              // committer if it calls setValue().
              if (!isDirective(value)) {
                  this.committer.dirty = true;
              }
          }
      }
      commit() {
          while (isDirective(this.value)) {
              const directive$$1 = this.value;
              this.value = noChange;
              directive$$1(this);
          }
          if (this.value === noChange) {
              return;
          }
          this.committer.commit();
      }
  }
  /**
   * A Part that controls a location within a Node tree. Like a Range, NodePart
   * has start and end locations and can set and update the Nodes between those
   * locations.
   *
   * NodeParts support several value types: primitives, Nodes, TemplateResults,
   * as well as arrays and iterables of those types.
   */
  class NodePart {
      constructor(options) {
          this.value = undefined;
          this.__pendingValue = undefined;
          this.options = options;
      }
      /**
       * Appends this part into a container.
       *
       * This part must be empty, as its contents are not automatically moved.
       */
      appendInto(container) {
          this.startNode = container.appendChild(createMarker());
          this.endNode = container.appendChild(createMarker());
      }
      /**
       * Inserts this part after the `ref` node (between `ref` and `ref`'s next
       * sibling). Both `ref` and its next sibling must be static, unchanging nodes
       * such as those that appear in a literal section of a template.
       *
       * This part must be empty, as its contents are not automatically moved.
       */
      insertAfterNode(ref) {
          this.startNode = ref;
          this.endNode = ref.nextSibling;
      }
      /**
       * Appends this part into a parent part.
       *
       * This part must be empty, as its contents are not automatically moved.
       */
      appendIntoPart(part) {
          part.__insert(this.startNode = createMarker());
          part.__insert(this.endNode = createMarker());
      }
      /**
       * Inserts this part after the `ref` part.
       *
       * This part must be empty, as its contents are not automatically moved.
       */
      insertAfterPart(ref) {
          ref.__insert(this.startNode = createMarker());
          this.endNode = ref.endNode;
          ref.endNode = this.startNode;
      }
      setValue(value) {
          this.__pendingValue = value;
      }
      commit() {
          if (this.startNode.parentNode === null) {
              return;
          }
          while (isDirective(this.__pendingValue)) {
              const directive$$1 = this.__pendingValue;
              this.__pendingValue = noChange;
              directive$$1(this);
          }
          const value = this.__pendingValue;
          if (value === noChange) {
              return;
          }
          if (isPrimitive(value)) {
              if (value !== this.value) {
                  this.__commitText(value);
              }
          }
          else if (value instanceof TemplateResult) {
              this.__commitTemplateResult(value);
          }
          else if (value instanceof Node) {
              this.__commitNode(value);
          }
          else if (isIterable(value)) {
              this.__commitIterable(value);
          }
          else if (value === nothing) {
              this.value = nothing;
              this.clear();
          }
          else {
              // Fallback, will render the string representation
              this.__commitText(value);
          }
      }
      __insert(node) {
          this.endNode.parentNode.insertBefore(node, this.endNode);
      }
      __commitNode(value) {
          if (this.value === value) {
              return;
          }
          this.clear();
          this.__insert(value);
          this.value = value;
      }
      __commitText(value) {
          const node = this.startNode.nextSibling;
          value = value == null ? '' : value;
          // If `value` isn't already a string, we explicitly convert it here in case
          // it can't be implicitly converted - i.e. it's a symbol.
          const valueAsString = typeof value === 'string' ? value : String(value);
          if (node === this.endNode.previousSibling &&
              node.nodeType === 3 /* Node.TEXT_NODE */) {
              // If we only have a single text node between the markers, we can just
              // set its value, rather than replacing it.
              // TODO(justinfagnani): Can we just check if this.value is primitive?
              node.data = valueAsString;
          }
          else {
              this.__commitNode(document.createTextNode(valueAsString));
          }
          this.value = value;
      }
      __commitTemplateResult(value) {
          const template = this.options.templateFactory(value);
          if (this.value instanceof TemplateInstance &&
              this.value.template === template) {
              this.value.update(value.values);
          }
          else {
              // Make sure we propagate the template processor from the TemplateResult
              // so that we use its syntax extension, etc. The template factory comes
              // from the render function options so that it can control template
              // caching and preprocessing.
              const instance = new TemplateInstance(template, value.processor, this.options);
              const fragment = instance._clone();
              instance.update(value.values);
              this.__commitNode(fragment);
              this.value = instance;
          }
      }
      __commitIterable(value) {
          // For an Iterable, we create a new InstancePart per item, then set its
          // value to the item. This is a little bit of overhead for every item in
          // an Iterable, but it lets us recurse easily and efficiently update Arrays
          // of TemplateResults that will be commonly returned from expressions like:
          // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
          // If _value is an array, then the previous render was of an
          // iterable and _value will contain the NodeParts from the previous
          // render. If _value is not an array, clear this part and make a new
          // array for NodeParts.
          if (!Array.isArray(this.value)) {
              this.value = [];
              this.clear();
          }
          // Lets us keep track of how many items we stamped so we can clear leftover
          // items from a previous render
          const itemParts = this.value;
          let partIndex = 0;
          let itemPart;
          for (const item of value) {
              // Try to reuse an existing part
              itemPart = itemParts[partIndex];
              // If no existing part, create a new one
              if (itemPart === undefined) {
                  itemPart = new NodePart(this.options);
                  itemParts.push(itemPart);
                  if (partIndex === 0) {
                      itemPart.appendIntoPart(this);
                  }
                  else {
                      itemPart.insertAfterPart(itemParts[partIndex - 1]);
                  }
              }
              itemPart.setValue(item);
              itemPart.commit();
              partIndex++;
          }
          if (partIndex < itemParts.length) {
              // Truncate the parts array so _value reflects the current state
              itemParts.length = partIndex;
              this.clear(itemPart && itemPart.endNode);
          }
      }
      clear(startNode = this.startNode) {
          removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);
      }
  }
  /**
   * Implements a boolean attribute, roughly as defined in the HTML
   * specification.
   *
   * If the value is truthy, then the attribute is present with a value of
   * ''. If the value is falsey, the attribute is removed.
   */
  class BooleanAttributePart {
      constructor(element, name, strings) {
          this.value = undefined;
          this.__pendingValue = undefined;
          if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {
              throw new Error('Boolean attributes can only contain a single expression');
          }
          this.element = element;
          this.name = name;
          this.strings = strings;
      }
      setValue(value) {
          this.__pendingValue = value;
      }
      commit() {
          while (isDirective(this.__pendingValue)) {
              const directive$$1 = this.__pendingValue;
              this.__pendingValue = noChange;
              directive$$1(this);
          }
          if (this.__pendingValue === noChange) {
              return;
          }
          const value = !!this.__pendingValue;
          if (this.value !== value) {
              if (value) {
                  this.element.setAttribute(this.name, '');
              }
              else {
                  this.element.removeAttribute(this.name);
              }
              this.value = value;
          }
          this.__pendingValue = noChange;
      }
  }
  /**
   * Sets attribute values for PropertyParts, so that the value is only set once
   * even if there are multiple parts for a property.
   *
   * If an expression controls the whole property value, then the value is simply
   * assigned to the property under control. If there are string literals or
   * multiple expressions, then the strings are expressions are interpolated into
   * a string first.
   */
  class PropertyCommitter extends AttributeCommitter {
      constructor(element, name, strings) {
          super(element, name, strings);
          this.single =
              (strings.length === 2 && strings[0] === '' && strings[1] === '');
      }
      _createPart() {
          return new PropertyPart(this);
      }
      _getValue() {
          if (this.single) {
              return this.parts[0].value;
          }
          return super._getValue();
      }
      commit() {
          if (this.dirty) {
              this.dirty = false;
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              this.element[this.name] = this._getValue();
          }
      }
  }
  class PropertyPart extends AttributePart {
  }
  // Detect event listener options support. If the `capture` property is read
  // from the options object, then options are supported. If not, then the third
  // argument to add/removeEventListener is interpreted as the boolean capture
  // value so we should only pass the `capture` property.
  let eventOptionsSupported = false;
  // Wrap into an IIFE because MS Edge <= v41 does not support having try/catch
  // blocks right into the body of a module
  (() => {
      try {
          const options = {
              get capture() {
                  eventOptionsSupported = true;
                  return false;
              }
          };
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          window.addEventListener('test', options, options);
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          window.removeEventListener('test', options, options);
      }
      catch (_e) {
          // event options not supported
      }
  })();
  class EventPart {
      constructor(element, eventName, eventContext) {
          this.value = undefined;
          this.__pendingValue = undefined;
          this.element = element;
          this.eventName = eventName;
          this.eventContext = eventContext;
          this.__boundHandleEvent = (e) => this.handleEvent(e);
      }
      setValue(value) {
          this.__pendingValue = value;
      }
      commit() {
          while (isDirective(this.__pendingValue)) {
              const directive$$1 = this.__pendingValue;
              this.__pendingValue = noChange;
              directive$$1(this);
          }
          if (this.__pendingValue === noChange) {
              return;
          }
          const newListener = this.__pendingValue;
          const oldListener = this.value;
          const shouldRemoveListener = newListener == null ||
              oldListener != null &&
                  (newListener.capture !== oldListener.capture ||
                      newListener.once !== oldListener.once ||
                      newListener.passive !== oldListener.passive);
          const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);
          if (shouldRemoveListener) {
              this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);
          }
          if (shouldAddListener) {
              this.__options = getOptions(newListener);
              this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);
          }
          this.value = newListener;
          this.__pendingValue = noChange;
      }
      handleEvent(event) {
          if (typeof this.value === 'function') {
              this.value.call(this.eventContext || this.element, event);
          }
          else {
              this.value.handleEvent(event);
          }
      }
  }
  // We copy options because of the inconsistent behavior of browsers when reading
  // the third argument of add/removeEventListener. IE11 doesn't support options
  // at all. Chrome 41 only reads `capture` if the argument is an object.
  const getOptions = (o) => o &&
      (eventOptionsSupported ?
          { capture: o.capture, passive: o.passive, once: o.once } :
          o.capture);

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  /**
   * The default TemplateFactory which caches Templates keyed on
   * result.type and result.strings.
   */
  function templateFactory(result) {
      let templateCache = templateCaches.get(result.type);
      if (templateCache === undefined) {
          templateCache = {
              stringsArray: new WeakMap(),
              keyString: new Map()
          };
          templateCaches.set(result.type, templateCache);
      }
      let template = templateCache.stringsArray.get(result.strings);
      if (template !== undefined) {
          return template;
      }
      // If the TemplateStringsArray is new, generate a key from the strings
      // This key is shared between all templates with identical content
      const key = result.strings.join(marker);
      // Check if we already have a Template for this key
      template = templateCache.keyString.get(key);
      if (template === undefined) {
          // If we have not seen this key before, create a new Template
          template = new Template(result, result.getTemplateElement());
          // Cache the Template for this key
          templateCache.keyString.set(key, template);
      }
      // Cache all future queries for this TemplateStringsArray
      templateCache.stringsArray.set(result.strings, template);
      return template;
  }
  const templateCaches = new Map();

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  const parts = new WeakMap();
  /**
   * Renders a template result or other value to a container.
   *
   * To update a container with new values, reevaluate the template literal and
   * call `render` with the new result.
   *
   * @param result Any value renderable by NodePart - typically a TemplateResult
   *     created by evaluating a template tag like `html` or `svg`.
   * @param container A DOM parent to render to. The entire contents are either
   *     replaced, or efficiently updated if the same result type was previous
   *     rendered there.
   * @param options RenderOptions for the entire render tree rendered to this
   *     container. Render options must *not* change between renders to the same
   *     container, as those changes will not effect previously rendered DOM.
   */
  const render = (result, container, options) => {
      let part = parts.get(container);
      if (part === undefined) {
          removeNodes(container, container.firstChild);
          parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));
          part.appendInto(container);
      }
      part.setValue(result);
      part.commit();
  };

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  /**
   * Creates Parts when a template is instantiated.
   */
  class DefaultTemplateProcessor {
      /**
       * Create parts for an attribute-position binding, given the event, attribute
       * name, and string literals.
       *
       * @param element The element containing the binding
       * @param name  The attribute name
       * @param strings The string literals. There are always at least two strings,
       *   event for fully-controlled bindings with a single expression.
       */
      handleAttributeExpressions(element, name, strings, options) {
          const prefix = name[0];
          if (prefix === '.') {
              const committer = new PropertyCommitter(element, name.slice(1), strings);
              return committer.parts;
          }
          if (prefix === '@') {
              return [new EventPart(element, name.slice(1), options.eventContext)];
          }
          if (prefix === '?') {
              return [new BooleanAttributePart(element, name.slice(1), strings)];
          }
          const committer = new AttributeCommitter(element, name, strings);
          return committer.parts;
      }
      /**
       * Create parts for a text-position binding.
       * @param templateFactory
       */
      handleTextExpression(options) {
          return new NodePart(options);
      }
  }
  const defaultTemplateProcessor = new DefaultTemplateProcessor();

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  // IMPORTANT: do not change the property name or the assignment expression.
  // This line will be used in regexes to search for lit-html usage.
  // TODO(justinfagnani): inject version number at build time
  if (typeof window !== 'undefined') {
      (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.4.1');
  }
  /**
   * Interprets a template literal as an HTML template that can efficiently
   * render to and update a container.
   */
  const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  // Get a key to lookup in `templateCaches`.
  const getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;
  let compatibleShadyCSSVersion = true;
  if (typeof window.ShadyCSS === 'undefined') {
      compatibleShadyCSSVersion = false;
  }
  else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {
      console.warn(`Incompatible ShadyCSS version detected. ` +
          `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +
          `@webcomponents/shadycss@1.3.1.`);
      compatibleShadyCSSVersion = false;
  }
  /**
   * Template factory which scopes template DOM using ShadyCSS.
   * @param scopeName {string}
   */
  const shadyTemplateFactory = (scopeName) => (result) => {
      const cacheKey = getTemplateCacheKey(result.type, scopeName);
      let templateCache = templateCaches.get(cacheKey);
      if (templateCache === undefined) {
          templateCache = {
              stringsArray: new WeakMap(),
              keyString: new Map()
          };
          templateCaches.set(cacheKey, templateCache);
      }
      let template = templateCache.stringsArray.get(result.strings);
      if (template !== undefined) {
          return template;
      }
      const key = result.strings.join(marker);
      template = templateCache.keyString.get(key);
      if (template === undefined) {
          const element = result.getTemplateElement();
          if (compatibleShadyCSSVersion) {
              window.ShadyCSS.prepareTemplateDom(element, scopeName);
          }
          template = new Template(result, element);
          templateCache.keyString.set(key, template);
      }
      templateCache.stringsArray.set(result.strings, template);
      return template;
  };
  const TEMPLATE_TYPES = ['html', 'svg'];
  /**
   * Removes all style elements from Templates for the given scopeName.
   */
  const removeStylesFromLitTemplates = (scopeName) => {
      TEMPLATE_TYPES.forEach((type) => {
          const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));
          if (templates !== undefined) {
              templates.keyString.forEach((template) => {
                  const { element: { content } } = template;
                  // IE 11 doesn't support the iterable param Set constructor
                  const styles = new Set();
                  Array.from(content.querySelectorAll('style')).forEach((s) => {
                      styles.add(s);
                  });
                  removeNodesFromTemplate(template, styles);
              });
          }
      });
  };
  const shadyRenderSet = new Set();
  /**
   * For the given scope name, ensures that ShadyCSS style scoping is performed.
   * This is done just once per scope name so the fragment and template cannot
   * be modified.
   * (1) extracts styles from the rendered fragment and hands them to ShadyCSS
   * to be scoped and appended to the document
   * (2) removes style elements from all lit-html Templates for this scope name.
   *
   * Note, <style> elements can only be placed into templates for the
   * initial rendering of the scope. If <style> elements are included in templates
   * dynamically rendered to the scope (after the first scope render), they will
   * not be scoped and the <style> will be left in the template and rendered
   * output.
   */
  const prepareTemplateStyles = (scopeName, renderedDOM, template) => {
      shadyRenderSet.add(scopeName);
      // If `renderedDOM` is stamped from a Template, then we need to edit that
      // Template's underlying template element. Otherwise, we create one here
      // to give to ShadyCSS, which still requires one while scoping.
      const templateElement = !!template ? template.element : document.createElement('template');
      // Move styles out of rendered DOM and store.
      const styles = renderedDOM.querySelectorAll('style');
      const { length } = styles;
      // If there are no styles, skip unnecessary work
      if (length === 0) {
          // Ensure prepareTemplateStyles is called to support adding
          // styles via `prepareAdoptedCssText` since that requires that
          // `prepareTemplateStyles` is called.
          //
          // ShadyCSS will only update styles containing @apply in the template
          // given to `prepareTemplateStyles`. If no lit Template was given,
          // ShadyCSS will not be able to update uses of @apply in any relevant
          // template. However, this is not a problem because we only create the
          // template for the purpose of supporting `prepareAdoptedCssText`,
          // which doesn't support @apply at all.
          window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
          return;
      }
      const condensedStyle = document.createElement('style');
      // Collect styles into a single style. This helps us make sure ShadyCSS
      // manipulations will not prevent us from being able to fix up template
      // part indices.
      // NOTE: collecting styles is inefficient for browsers but ShadyCSS
      // currently does this anyway. When it does not, this should be changed.
      for (let i = 0; i < length; i++) {
          const style = styles[i];
          style.parentNode.removeChild(style);
          condensedStyle.textContent += style.textContent;
      }
      // Remove styles from nested templates in this scope.
      removeStylesFromLitTemplates(scopeName);
      // And then put the condensed style into the "root" template passed in as
      // `template`.
      const content = templateElement.content;
      if (!!template) {
          insertNodeIntoTemplate(template, condensedStyle, content.firstChild);
      }
      else {
          content.insertBefore(condensedStyle, content.firstChild);
      }
      // Note, it's important that ShadyCSS gets the template that `lit-html`
      // will actually render so that it can update the style inside when
      // needed (e.g. @apply native Shadow DOM case).
      window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
      const style = content.querySelector('style');
      if (window.ShadyCSS.nativeShadow && style !== null) {
          // When in native Shadow DOM, ensure the style created by ShadyCSS is
          // included in initially rendered output (`renderedDOM`).
          renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);
      }
      else if (!!template) {
          // When no style is left in the template, parts will be broken as a
          // result. To fix this, we put back the style node ShadyCSS removed
          // and then tell lit to remove that node from the template.
          // There can be no style in the template in 2 cases (1) when Shady DOM
          // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM
          // is in use ShadyCSS removes the style if it contains no content.
          // NOTE, ShadyCSS creates its own style so we can safely add/remove
          // `condensedStyle` here.
          content.insertBefore(condensedStyle, content.firstChild);
          const removes = new Set();
          removes.add(condensedStyle);
          removeNodesFromTemplate(template, removes);
      }
  };
  /**
   * Extension to the standard `render` method which supports rendering
   * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)
   * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used
   * or when the webcomponentsjs
   * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.
   *
   * Adds a `scopeName` option which is used to scope element DOM and stylesheets
   * when native ShadowDOM is unavailable. The `scopeName` will be added to
   * the class attribute of all rendered DOM. In addition, any style elements will
   * be automatically re-written with this `scopeName` selector and moved out
   * of the rendered DOM and into the document `<head>`.
   *
   * It is common to use this render method in conjunction with a custom element
   * which renders a shadowRoot. When this is done, typically the element's
   * `localName` should be used as the `scopeName`.
   *
   * In addition to DOM scoping, ShadyCSS also supports a basic shim for css
   * custom properties (needed only on older browsers like IE11) and a shim for
   * a deprecated feature called `@apply` that supports applying a set of css
   * custom properties to a given location.
   *
   * Usage considerations:
   *
   * * Part values in `<style>` elements are only applied the first time a given
   * `scopeName` renders. Subsequent changes to parts in style elements will have
   * no effect. Because of this, parts in style elements should only be used for
   * values that will never change, for example parts that set scope-wide theme
   * values or parts which render shared style elements.
   *
   * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a
   * custom element's `constructor` is not supported. Instead rendering should
   * either done asynchronously, for example at microtask timing (for example
   * `Promise.resolve()`), or be deferred until the first time the element's
   * `connectedCallback` runs.
   *
   * Usage considerations when using shimmed custom properties or `@apply`:
   *
   * * Whenever any dynamic changes are made which affect
   * css custom properties, `ShadyCSS.styleElement(element)` must be called
   * to update the element. There are two cases when this is needed:
   * (1) the element is connected to a new parent, (2) a class is added to the
   * element that causes it to match different custom properties.
   * To address the first case when rendering a custom element, `styleElement`
   * should be called in the element's `connectedCallback`.
   *
   * * Shimmed custom properties may only be defined either for an entire
   * shadowRoot (for example, in a `:host` rule) or via a rule that directly
   * matches an element with a shadowRoot. In other words, instead of flowing from
   * parent to child as do native css custom properties, shimmed custom properties
   * flow only from shadowRoots to nested shadowRoots.
   *
   * * When using `@apply` mixing css shorthand property names with
   * non-shorthand names (for example `border` and `border-width`) is not
   * supported.
   */
  const render$1 = (result, container, options) => {
      if (!options || typeof options !== 'object' || !options.scopeName) {
          throw new Error('The `scopeName` option is required.');
      }
      const scopeName = options.scopeName;
      const hasRendered = parts.has(container);
      const needsScoping = compatibleShadyCSSVersion &&
          container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&
          !!container.host;
      // Handle first render to a scope specially...
      const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);
      // On first scope render, render into a fragment; this cannot be a single
      // fragment that is reused since nested renders can occur synchronously.
      const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;
      render(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));
      // When performing first scope render,
      // (1) We've rendered into a fragment so that there's a chance to
      // `prepareTemplateStyles` before sub-elements hit the DOM
      // (which might cause them to render based on a common pattern of
      // rendering in a custom element's `connectedCallback`);
      // (2) Scope the template with ShadyCSS one time only for this scope.
      // (3) Render the fragment into the container and make sure the
      // container knows its `part` is the one we just rendered. This ensures
      // DOM will be re-used on subsequent renders.
      if (firstScopeRender) {
          const part = parts.get(renderContainer);
          parts.delete(renderContainer);
          // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)
          // that should apply to `renderContainer` even if the rendered value is
          // not a TemplateInstance. However, it will only insert scoped styles
          // into the document if `prepareTemplateStyles` has already been called
          // for the given scope name.
          const template = part.value instanceof TemplateInstance ?
              part.value.template :
              undefined;
          prepareTemplateStyles(scopeName, renderContainer, template);
          removeNodes(container, container.firstChild);
          container.appendChild(renderContainer);
          parts.set(container, part);
      }
      // After elements have hit the DOM, update styling if this is the
      // initial render to this container.
      // This is needed whenever dynamic changes are made so it would be
      // safest to do every render; however, this would regress performance
      // so we leave it up to the user to call `ShadyCSS.styleElement`
      // for dynamic changes.
      if (!hasRendered && needsScoping) {
          window.ShadyCSS.styleElement(container.host);
      }
  };

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  var _a;
  /**
   * Use this module if you want to create your own base class extending
   * [[UpdatingElement]].
   * @packageDocumentation
   */
  /*
   * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
   * replaced at compile time by the munged name for object[property]. We cannot
   * alias this function, so we have to use a small shim that has the same
   * behavior when not compiling.
   */
  window.JSCompiler_renameProperty =
      (prop, _obj) => prop;
  const defaultConverter = {
      toAttribute(value, type) {
          switch (type) {
              case Boolean:
                  return value ? '' : null;
              case Object:
              case Array:
                  // if the value is `null` or `undefined` pass this through
                  // to allow removing/no change behavior.
                  return value == null ? value : JSON.stringify(value);
          }
          return value;
      },
      fromAttribute(value, type) {
          switch (type) {
              case Boolean:
                  return value !== null;
              case Number:
                  return value === null ? null : Number(value);
              case Object:
              case Array:
                  return JSON.parse(value);
          }
          return value;
      }
  };
  /**
   * Change function that returns true if `value` is different from `oldValue`.
   * This method is used as the default for a property's `hasChanged` function.
   */
  const notEqual = (value, old) => {
      // This ensures (old==NaN, value==NaN) always returns false
      return old !== value && (old === old || value === value);
  };
  const defaultPropertyDeclaration = {
      attribute: true,
      type: String,
      converter: defaultConverter,
      reflect: false,
      hasChanged: notEqual
  };
  const STATE_HAS_UPDATED = 1;
  const STATE_UPDATE_REQUESTED = 1 << 2;
  const STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;
  const STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;
  /**
   * The Closure JS Compiler doesn't currently have good support for static
   * property semantics where "this" is dynamic (e.g.
   * https://github.com/google/closure-compiler/issues/3177 and others) so we use
   * this hack to bypass any rewriting by the compiler.
   */
  const finalized = 'finalized';
  /**
   * Base element class which manages element properties and attributes. When
   * properties change, the `update` method is asynchronously called. This method
   * should be supplied by subclassers to render updates as desired.
   * @noInheritDoc
   */
  class UpdatingElement extends HTMLElement {
      constructor() {
          super();
          this.initialize();
      }
      /**
       * Returns a list of attributes corresponding to the registered properties.
       * @nocollapse
       */
      static get observedAttributes() {
          // note: piggy backing on this to ensure we're finalized.
          this.finalize();
          const attributes = [];
          // Use forEach so this works even if for/of loops are compiled to for loops
          // expecting arrays
          this._classProperties.forEach((v, p) => {
              const attr = this._attributeNameForProperty(p, v);
              if (attr !== undefined) {
                  this._attributeToPropertyMap.set(attr, p);
                  attributes.push(attr);
              }
          });
          return attributes;
      }
      /**
       * Ensures the private `_classProperties` property metadata is created.
       * In addition to `finalize` this is also called in `createProperty` to
       * ensure the `@property` decorator can add property metadata.
       */
      /** @nocollapse */
      static _ensureClassProperties() {
          // ensure private storage for property declarations.
          if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {
              this._classProperties = new Map();
              // NOTE: Workaround IE11 not supporting Map constructor argument.
              const superProperties = Object.getPrototypeOf(this)._classProperties;
              if (superProperties !== undefined) {
                  superProperties.forEach((v, k) => this._classProperties.set(k, v));
              }
          }
      }
      /**
       * Creates a property accessor on the element prototype if one does not exist
       * and stores a PropertyDeclaration for the property with the given options.
       * The property setter calls the property's `hasChanged` property option
       * or uses a strict identity check to determine whether or not to request
       * an update.
       *
       * This method may be overridden to customize properties; however,
       * when doing so, it's important to call `super.createProperty` to ensure
       * the property is setup correctly. This method calls
       * `getPropertyDescriptor` internally to get a descriptor to install.
       * To customize what properties do when they are get or set, override
       * `getPropertyDescriptor`. To customize the options for a property,
       * implement `createProperty` like this:
       *
       * static createProperty(name, options) {
       *   options = Object.assign(options, {myOption: true});
       *   super.createProperty(name, options);
       * }
       *
       * @nocollapse
       */
      static createProperty(name, options = defaultPropertyDeclaration) {
          // Note, since this can be called by the `@property` decorator which
          // is called before `finalize`, we ensure storage exists for property
          // metadata.
          this._ensureClassProperties();
          this._classProperties.set(name, options);
          // Do not generate an accessor if the prototype already has one, since
          // it would be lost otherwise and that would never be the user's intention;
          // Instead, we expect users to call `requestUpdate` themselves from
          // user-defined accessors. Note that if the super has an accessor we will
          // still overwrite it
          if (options.noAccessor || this.prototype.hasOwnProperty(name)) {
              return;
          }
          const key = typeof name === 'symbol' ? Symbol() : `__${name}`;
          const descriptor = this.getPropertyDescriptor(name, key, options);
          if (descriptor !== undefined) {
              Object.defineProperty(this.prototype, name, descriptor);
          }
      }
      /**
       * Returns a property descriptor to be defined on the given named property.
       * If no descriptor is returned, the property will not become an accessor.
       * For example,
       *
       *   class MyElement extends LitElement {
       *     static getPropertyDescriptor(name, key, options) {
       *       const defaultDescriptor =
       *           super.getPropertyDescriptor(name, key, options);
       *       const setter = defaultDescriptor.set;
       *       return {
       *         get: defaultDescriptor.get,
       *         set(value) {
       *           setter.call(this, value);
       *           // custom action.
       *         },
       *         configurable: true,
       *         enumerable: true
       *       }
       *     }
       *   }
       *
       * @nocollapse
       */
      static getPropertyDescriptor(name, key, options) {
          return {
              // tslint:disable-next-line:no-any no symbol in index
              get() {
                  return this[key];
              },
              set(value) {
                  const oldValue = this[name];
                  this[key] = value;
                  this
                      .requestUpdateInternal(name, oldValue, options);
              },
              configurable: true,
              enumerable: true
          };
      }
      /**
       * Returns the property options associated with the given property.
       * These options are defined with a PropertyDeclaration via the `properties`
       * object or the `@property` decorator and are registered in
       * `createProperty(...)`.
       *
       * Note, this method should be considered "final" and not overridden. To
       * customize the options for a given property, override `createProperty`.
       *
       * @nocollapse
       * @final
       */
      static getPropertyOptions(name) {
          return this._classProperties && this._classProperties.get(name) ||
              defaultPropertyDeclaration;
      }
      /**
       * Creates property accessors for registered properties and ensures
       * any superclasses are also finalized.
       * @nocollapse
       */
      static finalize() {
          // finalize any superclasses
          const superCtor = Object.getPrototypeOf(this);
          if (!superCtor.hasOwnProperty(finalized)) {
              superCtor.finalize();
          }
          this[finalized] = true;
          this._ensureClassProperties();
          // initialize Map populated in observedAttributes
          this._attributeToPropertyMap = new Map();
          // make any properties
          // Note, only process "own" properties since this element will inherit
          // any properties defined on the superClass, and finalization ensures
          // the entire prototype chain is finalized.
          if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {
              const props = this.properties;
              // support symbols in properties (IE11 does not support this)
              const propKeys = [
                  ...Object.getOwnPropertyNames(props),
                  ...(typeof Object.getOwnPropertySymbols === 'function') ?
                      Object.getOwnPropertySymbols(props) :
                      []
              ];
              // This for/of is ok because propKeys is an array
              for (const p of propKeys) {
                  // note, use of `any` is due to TypeSript lack of support for symbol in
                  // index types
                  // tslint:disable-next-line:no-any no symbol in index
                  this.createProperty(p, props[p]);
              }
          }
      }
      /**
       * Returns the property name for the given attribute `name`.
       * @nocollapse
       */
      static _attributeNameForProperty(name, options) {
          const attribute = options.attribute;
          return attribute === false ?
              undefined :
              (typeof attribute === 'string' ?
                  attribute :
                  (typeof name === 'string' ? name.toLowerCase() : undefined));
      }
      /**
       * Returns true if a property should request an update.
       * Called when a property value is set and uses the `hasChanged`
       * option for the property if present or a strict identity check.
       * @nocollapse
       */
      static _valueHasChanged(value, old, hasChanged = notEqual) {
          return hasChanged(value, old);
      }
      /**
       * Returns the property value for the given attribute value.
       * Called via the `attributeChangedCallback` and uses the property's
       * `converter` or `converter.fromAttribute` property option.
       * @nocollapse
       */
      static _propertyValueFromAttribute(value, options) {
          const type = options.type;
          const converter = options.converter || defaultConverter;
          const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);
          return fromAttribute ? fromAttribute(value, type) : value;
      }
      /**
       * Returns the attribute value for the given property value. If this
       * returns undefined, the property will *not* be reflected to an attribute.
       * If this returns null, the attribute will be removed, otherwise the
       * attribute will be set to the value.
       * This uses the property's `reflect` and `type.toAttribute` property options.
       * @nocollapse
       */
      static _propertyValueToAttribute(value, options) {
          if (options.reflect === undefined) {
              return;
          }
          const type = options.type;
          const converter = options.converter;
          const toAttribute = converter && converter.toAttribute ||
              defaultConverter.toAttribute;
          return toAttribute(value, type);
      }
      /**
       * Performs element initialization. By default captures any pre-set values for
       * registered properties.
       */
      initialize() {
          this._updateState = 0;
          this._updatePromise =
              new Promise((res) => this._enableUpdatingResolver = res);
          this._changedProperties = new Map();
          this._saveInstanceProperties();
          // ensures first update will be caught by an early access of
          // `updateComplete`
          this.requestUpdateInternal();
      }
      /**
       * Fixes any properties set on the instance before upgrade time.
       * Otherwise these would shadow the accessor and break these properties.
       * The properties are stored in a Map which is played back after the
       * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
       * (<=41), properties created for native platform properties like (`id` or
       * `name`) may not have default values set in the element constructor. On
       * these browsers native properties appear on instances and therefore their
       * default value will overwrite any element default (e.g. if the element sets
       * this.id = 'id' in the constructor, the 'id' will become '' since this is
       * the native platform default).
       */
      _saveInstanceProperties() {
          // Use forEach so this works even if for/of loops are compiled to for loops
          // expecting arrays
          this.constructor
              ._classProperties.forEach((_v, p) => {
              if (this.hasOwnProperty(p)) {
                  const value = this[p];
                  delete this[p];
                  if (!this._instanceProperties) {
                      this._instanceProperties = new Map();
                  }
                  this._instanceProperties.set(p, value);
              }
          });
      }
      /**
       * Applies previously saved instance properties.
       */
      _applyInstanceProperties() {
          // Use forEach so this works even if for/of loops are compiled to for loops
          // expecting arrays
          // tslint:disable-next-line:no-any
          this._instanceProperties.forEach((v, p) => this[p] = v);
          this._instanceProperties = undefined;
      }
      connectedCallback() {
          // Ensure first connection completes an update. Updates cannot complete
          // before connection.
          this.enableUpdating();
      }
      enableUpdating() {
          if (this._enableUpdatingResolver !== undefined) {
              this._enableUpdatingResolver();
              this._enableUpdatingResolver = undefined;
          }
      }
      /**
       * Allows for `super.disconnectedCallback()` in extensions while
       * reserving the possibility of making non-breaking feature additions
       * when disconnecting at some point in the future.
       */
      disconnectedCallback() {
      }
      /**
       * Synchronizes property values when attributes change.
       */
      attributeChangedCallback(name, old, value) {
          if (old !== value) {
              this._attributeToProperty(name, value);
          }
      }
      _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {
          const ctor = this.constructor;
          const attr = ctor._attributeNameForProperty(name, options);
          if (attr !== undefined) {
              const attrValue = ctor._propertyValueToAttribute(value, options);
              // an undefined value does not change the attribute.
              if (attrValue === undefined) {
                  return;
              }
              // Track if the property is being reflected to avoid
              // setting the property again via `attributeChangedCallback`. Note:
              // 1. this takes advantage of the fact that the callback is synchronous.
              // 2. will behave incorrectly if multiple attributes are in the reaction
              // stack at time of calling. However, since we process attributes
              // in `update` this should not be possible (or an extreme corner case
              // that we'd like to discover).
              // mark state reflecting
              this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;
              if (attrValue == null) {
                  this.removeAttribute(attr);
              }
              else {
                  this.setAttribute(attr, attrValue);
              }
              // mark state not reflecting
              this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;
          }
      }
      _attributeToProperty(name, value) {
          // Use tracking info to avoid deserializing attribute value if it was
          // just set from a property setter.
          if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {
              return;
          }
          const ctor = this.constructor;
          // Note, hint this as an `AttributeMap` so closure clearly understands
          // the type; it has issues with tracking types through statics
          // tslint:disable-next-line:no-unnecessary-type-assertion
          const propName = ctor._attributeToPropertyMap.get(name);
          if (propName !== undefined) {
              const options = ctor.getPropertyOptions(propName);
              // mark state reflecting
              this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;
              this[propName] =
                  // tslint:disable-next-line:no-any
                  ctor._propertyValueFromAttribute(value, options);
              // mark state not reflecting
              this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;
          }
      }
      /**
       * This protected version of `requestUpdate` does not access or return the
       * `updateComplete` promise. This promise can be overridden and is therefore
       * not free to access.
       */
      requestUpdateInternal(name, oldValue, options) {
          let shouldRequestUpdate = true;
          // If we have a property key, perform property update steps.
          if (name !== undefined) {
              const ctor = this.constructor;
              options = options || ctor.getPropertyOptions(name);
              if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {
                  if (!this._changedProperties.has(name)) {
                      this._changedProperties.set(name, oldValue);
                  }
                  // Add to reflecting properties set.
                  // Note, it's important that every change has a chance to add the
                  // property to `_reflectingProperties`. This ensures setting
                  // attribute + property reflects correctly.
                  if (options.reflect === true &&
                      !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {
                      if (this._reflectingProperties === undefined) {
                          this._reflectingProperties = new Map();
                      }
                      this._reflectingProperties.set(name, options);
                  }
              }
              else {
                  // Abort the request if the property should not be considered changed.
                  shouldRequestUpdate = false;
              }
          }
          if (!this._hasRequestedUpdate && shouldRequestUpdate) {
              this._updatePromise = this._enqueueUpdate();
          }
      }
      /**
       * Requests an update which is processed asynchronously. This should
       * be called when an element should update based on some state not triggered
       * by setting a property. In this case, pass no arguments. It should also be
       * called when manually implementing a property setter. In this case, pass the
       * property `name` and `oldValue` to ensure that any configured property
       * options are honored. Returns the `updateComplete` Promise which is resolved
       * when the update completes.
       *
       * @param name {PropertyKey} (optional) name of requesting property
       * @param oldValue {any} (optional) old value of requesting property
       * @returns {Promise} A Promise that is resolved when the update completes.
       */
      requestUpdate(name, oldValue) {
          this.requestUpdateInternal(name, oldValue);
          return this.updateComplete;
      }
      /**
       * Sets up the element to asynchronously update.
       */
      async _enqueueUpdate() {
          this._updateState = this._updateState | STATE_UPDATE_REQUESTED;
          try {
              // Ensure any previous update has resolved before updating.
              // This `await` also ensures that property changes are batched.
              await this._updatePromise;
          }
          catch (e) {
              // Ignore any previous errors. We only care that the previous cycle is
              // done. Any error should have been handled in the previous update.
          }
          const result = this.performUpdate();
          // If `performUpdate` returns a Promise, we await it. This is done to
          // enable coordinating updates with a scheduler. Note, the result is
          // checked to avoid delaying an additional microtask unless we need to.
          if (result != null) {
              await result;
          }
          return !this._hasRequestedUpdate;
      }
      get _hasRequestedUpdate() {
          return (this._updateState & STATE_UPDATE_REQUESTED);
      }
      get hasUpdated() {
          return (this._updateState & STATE_HAS_UPDATED);
      }
      /**
       * Performs an element update. Note, if an exception is thrown during the
       * update, `firstUpdated` and `updated` will not be called.
       *
       * You can override this method to change the timing of updates. If this
       * method is overridden, `super.performUpdate()` must be called.
       *
       * For instance, to schedule updates to occur just before the next frame:
       *
       * ```
       * protected async performUpdate(): Promise<unknown> {
       *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
       *   super.performUpdate();
       * }
       * ```
       */
      performUpdate() {
          // Abort any update if one is not pending when this is called.
          // This can happen if `performUpdate` is called early to "flush"
          // the update.
          if (!this._hasRequestedUpdate) {
              return;
          }
          // Mixin instance properties once, if they exist.
          if (this._instanceProperties) {
              this._applyInstanceProperties();
          }
          let shouldUpdate = false;
          const changedProperties = this._changedProperties;
          try {
              shouldUpdate = this.shouldUpdate(changedProperties);
              if (shouldUpdate) {
                  this.update(changedProperties);
              }
              else {
                  this._markUpdated();
              }
          }
          catch (e) {
              // Prevent `firstUpdated` and `updated` from running when there's an
              // update exception.
              shouldUpdate = false;
              // Ensure element can accept additional updates after an exception.
              this._markUpdated();
              throw e;
          }
          if (shouldUpdate) {
              if (!(this._updateState & STATE_HAS_UPDATED)) {
                  this._updateState = this._updateState | STATE_HAS_UPDATED;
                  this.firstUpdated(changedProperties);
              }
              this.updated(changedProperties);
          }
      }
      _markUpdated() {
          this._changedProperties = new Map();
          this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;
      }
      /**
       * Returns a Promise that resolves when the element has completed updating.
       * The Promise value is a boolean that is `true` if the element completed the
       * update without triggering another update. The Promise result is `false` if
       * a property was set inside `updated()`. If the Promise is rejected, an
       * exception was thrown during the update.
       *
       * To await additional asynchronous work, override the `_getUpdateComplete`
       * method. For example, it is sometimes useful to await a rendered element
       * before fulfilling this Promise. To do this, first await
       * `super._getUpdateComplete()`, then any subsequent state.
       *
       * @returns {Promise} The Promise returns a boolean that indicates if the
       * update resolved without triggering another update.
       */
      get updateComplete() {
          return this._getUpdateComplete();
      }
      /**
       * Override point for the `updateComplete` promise.
       *
       * It is not safe to override the `updateComplete` getter directly due to a
       * limitation in TypeScript which means it is not possible to call a
       * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
       * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
       * This method should be overridden instead. For example:
       *
       *   class MyElement extends LitElement {
       *     async _getUpdateComplete() {
       *       await super._getUpdateComplete();
       *       await this._myChild.updateComplete;
       *     }
       *   }
       */
      _getUpdateComplete() {
          return this._updatePromise;
      }
      /**
       * Controls whether or not `update` should be called when the element requests
       * an update. By default, this method always returns `true`, but this can be
       * customized to control when to update.
       *
       * @param _changedProperties Map of changed properties with old values
       */
      shouldUpdate(_changedProperties) {
          return true;
      }
      /**
       * Updates the element. This method reflects property values to attributes.
       * It can be overridden to render and keep updated element DOM.
       * Setting properties inside this method will *not* trigger
       * another update.
       *
       * @param _changedProperties Map of changed properties with old values
       */
      update(_changedProperties) {
          if (this._reflectingProperties !== undefined &&
              this._reflectingProperties.size > 0) {
              // Use forEach so this works even if for/of loops are compiled to for
              // loops expecting arrays
              this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));
              this._reflectingProperties = undefined;
          }
          this._markUpdated();
      }
      /**
       * Invoked whenever the element is updated. Implement to perform
       * post-updating tasks via DOM APIs, for example, focusing an element.
       *
       * Setting properties inside this method will trigger the element to update
       * again after this update cycle completes.
       *
       * @param _changedProperties Map of changed properties with old values
       */
      updated(_changedProperties) {
      }
      /**
       * Invoked when the element is first updated. Implement to perform one time
       * work on the element after update.
       *
       * Setting properties inside this method will trigger the element to update
       * again after this update cycle completes.
       *
       * @param _changedProperties Map of changed properties with old values
       */
      firstUpdated(_changedProperties) {
      }
  }
  _a = finalized;
  /**
   * Marks class as having finished creating properties.
   */
  UpdatingElement[_a] = true;

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  const standardProperty = (options, element) => {
      // When decorating an accessor, pass it through and add property metadata.
      // Note, the `hasOwnProperty` check in `createProperty` ensures we don't
      // stomp over the user's accessor.
      if (element.kind === 'method' && element.descriptor &&
          !('value' in element.descriptor)) {
          return Object.assign(Object.assign({}, element), { finisher(clazz) {
                  clazz.createProperty(element.key, options);
              } });
      }
      else {
          // createProperty() takes care of defining the property, but we still
          // must return some kind of descriptor, so return a descriptor for an
          // unused prototype field. The finisher calls createProperty().
          return {
              kind: 'field',
              key: Symbol(),
              placement: 'own',
              descriptor: {},
              // When @babel/plugin-proposal-decorators implements initializers,
              // do this instead of the initializer below. See:
              // https://github.com/babel/babel/issues/9260 extras: [
              //   {
              //     kind: 'initializer',
              //     placement: 'own',
              //     initializer: descriptor.initializer,
              //   }
              // ],
              initializer() {
                  if (typeof element.initializer === 'function') {
                      this[element.key] = element.initializer.call(this);
                  }
              },
              finisher(clazz) {
                  clazz.createProperty(element.key, options);
              }
          };
      }
  };
  const legacyProperty = (options, proto, name) => {
      proto.constructor
          .createProperty(name, options);
  };
  /**
   * A property decorator which creates a LitElement property which reflects a
   * corresponding attribute value. A [[`PropertyDeclaration`]] may optionally be
   * supplied to configure property features.
   *
   * This decorator should only be used for public fields. Private or protected
   * fields should use the [[`internalProperty`]] decorator.
   *
   * @example
   * ```ts
   * class MyElement {
   *   @property({ type: Boolean })
   *   clicked = false;
   * }
   * ```
   * @category Decorator
   * @ExportDecoratedItems
   */
  function property$1(options) {
      // tslint:disable-next-line:no-any decorator
      return (protoOrDescriptor, name) => (name !== undefined) ?
          legacyProperty(options, protoOrDescriptor, name) :
          standardProperty(options, protoOrDescriptor);
  }
  // x-browser support for matches
  // tslint:disable-next-line:no-any
  const ElementProto = Element.prototype;
  const legacyMatches = ElementProto.msMatchesSelector || ElementProto.webkitMatchesSelector;

  /**
  @license
  Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at
  http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
  http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
  found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
  part of the polymer project is also subject to an additional IP rights grant
  found at http://polymer.github.io/PATENTS.txt
  */
  /**
   * Whether the current browser supports `adoptedStyleSheets`.
   */
  const supportsAdoptingStyleSheets = (window.ShadowRoot) &&
      (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) &&
      ('adoptedStyleSheets' in Document.prototype) &&
      ('replace' in CSSStyleSheet.prototype);
  const constructionToken = Symbol();
  class CSSResult {
      constructor(cssText, safeToken) {
          if (safeToken !== constructionToken) {
              throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');
          }
          this.cssText = cssText;
      }
      // Note, this is a getter so that it's lazy. In practice, this means
      // stylesheets are not created until the first element instance is made.
      get styleSheet() {
          if (this._styleSheet === undefined) {
              // Note, if `supportsAdoptingStyleSheets` is true then we assume
              // CSSStyleSheet is constructable.
              if (supportsAdoptingStyleSheets) {
                  this._styleSheet = new CSSStyleSheet();
                  this._styleSheet.replaceSync(this.cssText);
              }
              else {
                  this._styleSheet = null;
              }
          }
          return this._styleSheet;
      }
      toString() {
          return this.cssText;
      }
  }
  /**
   * Wrap a value for interpolation in a [[`css`]] tagged template literal.
   *
   * This is unsafe because untrusted CSS text can be used to phone home
   * or exfiltrate data to an attacker controlled site. Take care to only use
   * this with trusted input.
   */
  const unsafeCSS = (value) => {
      return new CSSResult(String(value), constructionToken);
  };
  const textFromCSSResult = (value) => {
      if (value instanceof CSSResult) {
          return value.cssText;
      }
      else if (typeof value === 'number') {
          return value;
      }
      else {
          throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but
            take care to ensure page security.`);
      }
  };
  /**
   * Template tag which which can be used with LitElement's [[LitElement.styles |
   * `styles`]] property to set element styles. For security reasons, only literal
   * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]
   * may be used inside a template string part.
   */
  const css = (strings, ...values) => {
      const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);
      return new CSSResult(cssText, constructionToken);
  };

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  // IMPORTANT: do not change the property name or the assignment expression.
  // This line will be used in regexes to search for LitElement usage.
  // TODO(justinfagnani): inject version number at build time
  (window['litElementVersions'] || (window['litElementVersions'] = []))
      .push('2.4.0');
  /**
   * Sentinal value used to avoid calling lit-html's render function when
   * subclasses do not implement `render`
   */
  const renderNotImplemented = {};
  /**
   * Base element class that manages element properties and attributes, and
   * renders a lit-html template.
   *
   * To define a component, subclass `LitElement` and implement a
   * `render` method to provide the component's template. Define properties
   * using the [[`properties`]] property or the [[`property`]] decorator.
   */
  class LitElement extends UpdatingElement {
      /**
       * Return the array of styles to apply to the element.
       * Override this method to integrate into a style management system.
       *
       * @nocollapse
       */
      static getStyles() {
          return this.styles;
      }
      /** @nocollapse */
      static _getUniqueStyles() {
          // Only gather styles once per class
          if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {
              return;
          }
          // Take care not to call `this.getStyles()` multiple times since this
          // generates new CSSResults each time.
          // TODO(sorvell): Since we do not cache CSSResults by input, any
          // shared styles will generate new stylesheet objects, which is wasteful.
          // This should be addressed when a browser ships constructable
          // stylesheets.
          const userStyles = this.getStyles();
          if (Array.isArray(userStyles)) {
              // De-duplicate styles preserving the _last_ instance in the set.
              // This is a performance optimization to avoid duplicated styles that can
              // occur especially when composing via subclassing.
              // The last item is kept to try to preserve the cascade order with the
              // assumption that it's most important that last added styles override
              // previous styles.
              const addStyles = (styles, set) => styles.reduceRight((set, s) => 
              // Note: On IE set.add() does not return the set
              Array.isArray(s) ? addStyles(s, set) : (set.add(s), set), set);
              // Array.from does not work on Set in IE, otherwise return
              // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()
              const set = addStyles(userStyles, new Set());
              const styles = [];
              set.forEach((v) => styles.unshift(v));
              this._styles = styles;
          }
          else {
              this._styles = userStyles === undefined ? [] : [userStyles];
          }
          // Ensure that there are no invalid CSSStyleSheet instances here. They are
          // invalid in two conditions.
          // (1) the sheet is non-constructible (`sheet` of a HTMLStyleElement), but
          //     this is impossible to check except via .replaceSync or use
          // (2) the ShadyCSS polyfill is enabled (:. supportsAdoptingStyleSheets is
          //     false)
          this._styles = this._styles.map((s) => {
              if (s instanceof CSSStyleSheet && !supportsAdoptingStyleSheets) {
                  // Flatten the cssText from the passed constructible stylesheet (or
                  // undetectable non-constructible stylesheet). The user might have
                  // expected to update their stylesheets over time, but the alternative
                  // is a crash.
                  const cssText = Array.prototype.slice.call(s.cssRules)
                      .reduce((css$$1, rule) => css$$1 + rule.cssText, '');
                  return unsafeCSS(cssText);
              }
              return s;
          });
      }
      /**
       * Performs element initialization. By default this calls
       * [[`createRenderRoot`]] to create the element [[`renderRoot`]] node and
       * captures any pre-set values for registered properties.
       */
      initialize() {
          super.initialize();
          this.constructor._getUniqueStyles();
          this.renderRoot = this.createRenderRoot();
          // Note, if renderRoot is not a shadowRoot, styles would/could apply to the
          // element's getRootNode(). While this could be done, we're choosing not to
          // support this now since it would require different logic around de-duping.
          if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {
              this.adoptStyles();
          }
      }
      /**
       * Returns the node into which the element should render and by default
       * creates and returns an open shadowRoot. Implement to customize where the
       * element's DOM is rendered. For example, to render into the element's
       * childNodes, return `this`.
       * @returns {Element|DocumentFragment} Returns a node into which to render.
       */
      createRenderRoot() {
          return this.attachShadow({ mode: 'open' });
      }
      /**
       * Applies styling to the element shadowRoot using the [[`styles`]]
       * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where
       * available and will fallback otherwise. When Shadow DOM is polyfilled,
       * ShadyCSS scopes styles and adds them to the document. When Shadow DOM
       * is available but `adoptedStyleSheets` is not, styles are appended to the
       * end of the `shadowRoot` to [mimic spec
       * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
       */
      adoptStyles() {
          const styles = this.constructor._styles;
          if (styles.length === 0) {
              return;
          }
          // There are three separate cases here based on Shadow DOM support.
          // (1) shadowRoot polyfilled: use ShadyCSS
          // (2) shadowRoot.adoptedStyleSheets available: use it
          // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after
          // rendering
          if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {
              window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);
          }
          else if (supportsAdoptingStyleSheets) {
              this.renderRoot.adoptedStyleSheets =
                  styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet);
          }
          else {
              // This must be done after rendering so the actual style insertion is done
              // in `update`.
              this._needsShimAdoptedStyleSheets = true;
          }
      }
      connectedCallback() {
          super.connectedCallback();
          // Note, first update/render handles styleElement so we only call this if
          // connected after first update.
          if (this.hasUpdated && window.ShadyCSS !== undefined) {
              window.ShadyCSS.styleElement(this);
          }
      }
      /**
       * Updates the element. This method reflects property values to attributes
       * and calls `render` to render DOM via lit-html. Setting properties inside
       * this method will *not* trigger another update.
       * @param _changedProperties Map of changed properties with old values
       */
      update(changedProperties) {
          // Setting properties in `render` should not trigger an update. Since
          // updates are allowed after super.update, it's important to call `render`
          // before that.
          const templateResult = this.render();
          super.update(changedProperties);
          // If render is not implemented by the component, don't call lit-html render
          if (templateResult !== renderNotImplemented) {
              this.constructor
                  .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });
          }
          // When native Shadow DOM is used but adoptedStyles are not supported,
          // insert styling after rendering to ensure adoptedStyles have highest
          // priority.
          if (this._needsShimAdoptedStyleSheets) {
              this._needsShimAdoptedStyleSheets = false;
              this.constructor._styles.forEach((s) => {
                  const style = document.createElement('style');
                  style.textContent = s.cssText;
                  this.renderRoot.appendChild(style);
              });
          }
      }
      /**
       * Invoked on each update to perform rendering tasks. This method may return
       * any value renderable by lit-html's `NodePart` - typically a
       * `TemplateResult`. Setting properties inside this method will *not* trigger
       * the element to update.
       */
      render() {
          return renderNotImplemented;
      }
  }
  /**
   * Ensure this class is marked as `finalized` as an optimization ensuring
   * it will not needlessly try to `finalize`.
   *
   * Note this property name is a string to prevent breaking Closure JS Compiler
   * optimizations. See updating-element.ts for more information.
   */
  LitElement['finalized'] = true;
  /**
   * Reference to the underlying library method used to render the element's
   * DOM. By default, points to the `render` method from lit-html's shady-render
   * module.
   *
   * **Most users will never need to touch this property.**
   *
   * This  property should not be confused with the `render` instance method,
   * which should be overridden to define a template for the element.
   *
   * Advanced users creating a new base class based on LitElement can override
   * this property to point to a custom render method with a signature that
   * matches [shady-render's `render`
   * method](https://lit-html.polymer-project.org/api/modules/shady_render.html#render).
   *
   * @nocollapse
   */
  LitElement.render = render$1;

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  // For each part, remember the value that was last rendered to the part by the
  // unsafeHTML directive, and the DocumentFragment that was last set as a value.
  // The DocumentFragment is used as a unique key to check if the last value
  // rendered to the part was with unsafeHTML. If not, we'll always re-render the
  // value passed to unsafeHTML.
  const previousValues = new WeakMap();
  /**
   * Renders the result as HTML, rather than text.
   *
   * Note, this is unsafe to use with any user-provided input that hasn't been
   * sanitized or escaped, as it may lead to cross-site-scripting
   * vulnerabilities.
   */
  const unsafeHTML = directive((value) => (part) => {
      if (!(part instanceof NodePart)) {
          throw new Error('unsafeHTML can only be used in text bindings');
      }
      const previousValue = previousValues.get(part);
      if (previousValue !== undefined && isPrimitive(value) &&
          value === previousValue.value && part.value === previousValue.fragment) {
          return;
      }
      const template = document.createElement('template');
      template.innerHTML = value; // innerHTML casts to string internally
      const fragment = document.importNode(template.content, true);
      part.setValue(fragment);
      previousValues.set(part, { value, fragment });
  });

  /**
   * format replaces placeholders in a string with content from varargs
   *
   * @param formatString
   * @param args
   * @returns
   */
  function format(formatString, ...args) {
      return formatString.replace(/{(\d+)}/g, (match, number) => typeof args[number - 1] !== 'undefined' ? args[number - 1] : match);
  }

  const MEDIUM = 600;
  const LARGE = 1024;
  const XLARGE = 1760;

  var BreakpointsImport = /*#__PURE__*/Object.freeze({
    MEDIUM: MEDIUM,
    LARGE: LARGE,
    XLARGE: XLARGE
  });

  /* eslint-disable no-prototype-builtins */

  var typography = css `
  .text-font-thin {
    font-family: var(--font-family-bmw-thin, inherit);
    font-weight: var(--font-weight-thin, 300);
  }
  .text-font-normal {
    font-family: var(--font-family-bmw-normal, inherit);
    font-weight: var(--font-weight-normal, 400);
  }
  .text-font-bold {
    font-family: var(--font-family-bmw-bold, inherit);
    font-weight: var(--font-weight-bold, 700);
  }
  .text-size-xxxxl {
    font-size: var(--font-size-xxxxl, 4rem);
    line-height: var(--line-height-xxxxl, 5rem);
  }
  .text-size-xxxl {
    font-size: var(--font-size-xxxl, 3rem);
    line-height: var(--line-height-xxxl, 4rem);
  }
  .text-size-xxl {
    font-size: var(--font-size-xxl, 2rem);
    line-height: var(--line-height-xxl, 2.5rem);
  }
  .text-size-xl {
    font-size: var(--font-size-xl, 1.5rem);
    line-height: var(--line-height-xl, 2rem);
  }
  .text-size-l {
    font-size: var(--font-size-l, 1.25rem);
    line-height: var(--line-height-l, 1.75rem);
  }
  .text-size-m {
    font-size: var(--font-size-m, 1rem);
    line-height: var(--line-height-m, 1.5rem);
  }
  .text-size-s {
    font-size: var(--font-size-s, 0.875rem);
    line-height: var(--line-height-s, 1.25rem);
  }
  .text-size-xs {
    font-size: var(--font-size-xs, 0.75rem);
    line-height: var(--line-height-xs, 1rem);
  }
  .text-size-xs {
    font-size: var(--font-size-xs, 0.75rem);
    line-height: var(--line-height-xs, 1rem);
  }
  .text-size-xxs {
    font-size: var(--font-size-xxs, 0.625rem);
    line-height: var(--line-height-xxs, 0.875rem);
  }

  .headline-0,
  .headline-1 {
    font-family: var(--font-family-bmw-thin, inherit);
    font-size: var(--font-size-xxl, 2rem);
    line-height: var(--line-height-xxl, 2.5rem);
    font-weight: var(--font-weight-thin, 300);
  }

  .headline-2,
  .headline-3 {
    font-family: var(--font-family-bmw-thin, inherit);
    font-size: var(--font-size-xl, 1.5rem);
    line-height: var(--line-height-xl, 2rem);
    font-weight: var(--font-weight-thin, 300);
  }

  .headline-4 {
    font-family: var(--font-family-bmw-thin, inherit);
    font-size: var(--font-size-l, 1.25rem);
    line-height: var(--line-height-l, 1.75rem);
    font-weight: var(--font-weight-thin, 300);
  }

  .headline-5 {
    font-family: var(--font-family-bmw-thin, inherit);
    font-size: var(--font-size-m, 1rem);
    line-height: var(--line-height-m, 1.5rem);
    font-weight: var(--font-weight-thin, 300);
  }

  .headline-6 {
    font-family: var(--font-family-bmw-thin, inherit);
    font-size: var(--font-size-l, 1.25rem);
    line-height: var(--line-height-l, 1.75rem);
    font-weight: var(--font-weight-thin, 300);
  }

  .headline-7 {
    font-family: var(--font-family-bmw-normal, inherit);
    font-size: var(--font-size-m, 1rem);
    line-height: var(--line-height-m, 1.5rem);
    font-weight: var(--font-weight-normal, 400);
  }

  .body-1 {
    font-family: var(--font-family-bmw-thin, inherit);
    font-size: var(--font-size-m, 1rem);
    line-height: var(--line-height-m, 1.5rem);
    font-weight: var(--font-weight-thin, 300);
  }

  .body-2 {
    font-family: var(--font-family-bmw-thin, inherit);
    font-size: var(--font-size-s, 0.875rem);
    line-height: var(--line-height-s, 1.25rem);
    font-weight: var(--font-weight-thin, 300);
  }

  .subtitle-1 {
    font-family: var(--font-family-bmw-thin, inherit);
    font-size: var(--font-size-m, 1rem);
    line-height: var(--line-height-m, 1.5rem);
    font-weight: var(--font-weight-thin, 300);
  }

  .subtitle-2 {
    font-family: var(--font-family-bmw-thin, inherit);
    font-size: var(--font-size-s, 0.875rem);
    line-height: var(--line-height-s, 1.25rem);
    font-weight: var(--font-weight-thin, 300);
  }

  .link-1 {
    font-family: var(--font-family-bmw-bold, inherit);
    font-size: var(--font-size-m, 1rem);
    line-height: var(--line-height-m, 1.5rem);
    text-decoration: underline;
    font-weight: var(--font-weight-bold, 700);
  }

  .link-2 {
    font-family: var(--font-family-bmw-bold, inherit);
    font-size: var(--font-size-s, 0.875rem);
    line-height: var(--line-height-s, 1.25rem);
    text-decoration: underline;
    font-weight: var(--font-weight-bold, 700);
  }

  .caption {
    font-family: var(--font-family-bmw-thin, inherit);
    font-size: var(--font-size-xs, 0.75rem);
    line-height: var(--line-height-xs, 1rem);
    font-weight: var(--font-weight-thin, 300);
  }

  .label-1 {
    font-family: var(--font-family-bmw-bold, inherit);
    font-size: var(--font-size-xs, 0.75rem);
    line-height: var(--line-height-xs, 1rem);
    font-weight: var(--font-weight-bold, 700);
  }

  .label-2 {
    font-family: var(--font-family-bmw-bold, inherit);
    font-size: var(--font-size-xxs, 0.625rem);
    line-height: var(--line-height-xxs, 0.875rem);
    font-weight: var(--font-weight-bold, 700);
  }

  .button {
    font-family: var(--font-family-bmw-bold, inherit);
    font-size: var(--font-size-xxs, 1rem);
    line-height: var(--line-height-xxs, 1.25rem);
    font-weight: var(--font-weight-bold, 700);
  }

  @media screen and (min-width: ${MEDIUM}px) {
    .md--text-font-thin {
      font-family: var(--font-family-bmw-thin, inherit);
      font-weight: var(--font-weight-thin, 300);
    }
    .md--text-font-normal {
      font-family: var(--font-family-bmw-normal, inherit);
      font-weight: var(--font-weight-normal, 400);
    }
    .md--text-font-bold {
      font-family: var(--font-family-bmw-bold, inherit);
      font-weight: var(--font-weight-bold, 700);
    }
    .md--text-size-xxxxl {
      font-size: var(--font-size-xxxxl, 4rem);
      line-height: var(--line-height-xxxxl, 5rem);
    }
    .md--text-size-xxxl {
      font-size: var(--font-size-xxxl, 3rem);
      line-height: var(--line-height-xxxl, 4rem);
    }
    .md--text-size-xxl {
      font-size: var(--font-size-xxl, 2rem);
      line-height: var(--line-height-xxl, 2.5rem);
    }
    .md--text-size-xl {
      font-size: var(--font-size-xl, 1.5rem);
      line-height: var(--line-height-xl, 2rem);
    }
    .md--text-size-l {
      font-size: var(--font-size-l, 1.25rem);
      line-height: var(--line-height-l, 1.75rem);
    }
    .md--text-size-m {
      font-size: var(--font-size-m, 1rem);
      line-height: var(--line-height-m, 1.5rem);
    }
    .md--text-thin-s {
      font-size: var(--font-size-s, 0.875rem);
      line-height: var(--line-height-s, 1.25rem);
    }
    .md--text-size-xs {
      font-size: var(--font-size-xs, 0.75rem);
      line-height: var(--line-height-xs, 1rem);
    }
    .md--text-size-xs {
      font-size: var(--font-size-xs, 0.75rem);
      line-height: var(--line-height-xs, 1rem);
    }
    .md--text-size-xxs {
      font-size: var(--font-size-xxs, 0.625rem);
      line-height: var(--line-height-xxs, 0.875rem);
    }
  }

  @media screen and (min-width: ${LARGE}px) {
    .headline-0 {
      font-size: var(--font-size-xxxxl, 4rem);
      line-height: var(--line-height-xxxxl, 5rem);
      font-weight: var(--font-weight-thin, 300);
    }

    .headline-1 {
      font-size: var(--font-size-xxxl, 3rem);
      line-height: var(--line-height-xxxl, 4rem);
      font-weight: var(--font-weight-thin, 300);
    }

    .headline-2 {
      font-size: var(--font-size-xxl, 2rem);
      line-height: var(--line-height-xxl, 2.5rem);
      font-weight: var(--font-weight-thin, 300);
    }

    .headline-3 {
      font-size: var(--font-size-xl, 1.5rem);
      line-height: var(--line-height-xl, 2rem);
      font-weight: var(--font-weight-thin, 300);
    }

    .lg--text-font-thin {
      font-family: var(--font-family-bmw-thin, inherit);
      font-weight: var(--font-weight-thin, 300);
    }
    .lg--text-font-normal {
      font-family: var(--font-family-bmw-normal, inherit);
      font-weight: var(--font-weight-normal, 400);
    }
    .lg--text-font-bold {
      font-family: var(--font-family-bmw-bold, inherit);
      font-weight: var(--font-weight-bold, 700);
    }
    .lg--text-size-xxxxl {
      font-size: var(--font-size-xxxxl, 4rem);
      line-height: var(--line-height-xxxxl, 5rem);
    }
    .lg--text-size-xxxl {
      font-size: var(--font-size-xxxl, 3rem);
      line-height: var(--line-height-xxxl, 4rem);
    }
    .lg--text-size-xxl {
      font-size: var(--font-size-xxl, 2rem);
      line-height: var(--line-height-xxl, 2.5rem);
    }
    .lg--text-size-xl {
      font-size: var(--font-size-xl, 1.5rem);
      line-height: var(--line-height-xl, 2rem);
    }
    .lg--text-size-l {
      font-size: var(--font-size-l, 1.25rem);
      line-height: var(--line-height-l, 1.75rem);
    }
    .lg--text-size-m {
      font-size: var(--font-size-m, 1rem);
      line-height: var(--line-height-m, 1.5rem);
    }
    .lg--text-size-s {
      font-size: var(--font-size-s, 0.875rem);
      line-height: var(--line-height-s, 1.25rem);
    }
    .lg--text-size-xs {
      font-size: var(--font-size-xs, 0.75rem);
      line-height: var(--line-height-xs, 1rem);
    }
    .lg--text-size-xs {
      font-size: var(--font-size-xs, 0.75rem);
      line-height: var(--line-height-xs, 1rem);
    }
    .lg--text-size-xxs {
      font-size: var(--font-size-xxs, 0.625rem);
      line-height: var(--line-height-xxs, 0.875rem);
    }
  }
`;

  var colors$1 = css `
  :host {
    --stl-color-gray-200: #f2f2f2;
    --stl-color-gray-300: #e6e6e6;
    --stl-color-gray-400: #bbbbbb;
    --stl-color-gray-500: #8e8e8e;
    --stl-color-gray-600: #666666;
    --stl-color-gray-800: #4d4d4d;
    --stl-color-gray-900: #262626;

    --stl-color-blue-500: #1c69d4;
    --stl-color-blue-900: #0653b6;

    --stl-color-white: #ffffff;

    --stl-color-gs-10: #ffffff;
    --stl-color-gs-20: #f2f2f2;
    --stl-color-gs-30: #e6e6e6;
    --stl-color-gs-40: #bbbbbb;
    --stl-color-gs-50: #8e8e8e;
    --stl-color-gs-60: #666666;
    --stl-color-gs-70: #4d4d4d;
    --stl-color-gs-80: #262626;

    --stl-color-pb-10: #bbd2f3;
    --stl-color-pb-20: #1c69d4;
    --stl-color-pb-30: #0653b6;

    --stl-color-eb-10: #0066b1;
    --stl-color-db-10: #dde8f9;

    --stl-color-er-10: #f7e7e9;
    --stl-color-er-20: #d20000;
    --stl-color-er-30: #af1523;

    --stl-color-sg-10: #e8f2eb;
    --stl-color-sg-20: #3db014;
    --stl-color-sg-30: #1b7b3a;
  }
`;

  var spacings = css `
  :host {
    --stl-spacing-004: 0.25rem;
    --stl-spacing-008: 0.5rem;
    --stl-spacing-012: 0.75rem;
    --stl-spacing-016: 1rem;
    --stl-spacing-020: 1.25rem;
    --stl-spacing-024: 1.5rem;
    --stl-spacing-032: 2rem;
    --stl-spacing-040: 2.5rem;
    --stl-spacing-048: 3rem;
    --stl-spacing-064: 4rem;
    --stl-spacing-080: 5rem;
    --stl-spacing-096: 6rem;
    --stl-spacing-128: 8rem;
  }
`;

  class EventBus$2 {
      constructor(name) {
          this.eventTarget = document.appendChild(document.createComment(name));
      }
      on(type, listener) {
          this.eventTarget.addEventListener(type, listener);
      }
      once(type, listener) {
          this.eventTarget.addEventListener(type, listener, {
              once: true,
          });
      }
      off(type, listener) {
          this.eventTarget.removeEventListener(type, listener);
      }
      emit(type, detail) {
          return this.eventTarget.dispatchEvent(new CustomEvent(type, { detail }));
      }
  }

  class BreakpointObserver extends EventBus$2 {
      constructor() {
          super('breakpoint-change');
          this._smallBreakpoint = window.matchMedia(`(max-width: ${MEDIUM - 1}px)`);
          this._mediumBreakpoint = window.matchMedia(`(max-width: ${LARGE - 1}px)`);
          this._largeBreakpoint = window.matchMedia(`(max-width: ${XLARGE - 1}px)`);
          // On iOS < 14 MediaQueryList does not extend EventTarget, so we have to use the deprecated addListener method
          this._smallBreakpoint.addListener(this.handleBreakpointChange.bind(this));
          this._mediumBreakpoint.addListener(this.handleBreakpointChange.bind(this));
          this._largeBreakpoint.addListener(this.handleBreakpointChange.bind(this));
          this.updateCurrentBreakpoint();
      }
      handleBreakpointChange() {
          this.updateCurrentBreakpoint();
          this.notifyListeners();
      }
      updateCurrentBreakpoint() {
          if (this._smallBreakpoint.matches) {
              this._currentBreakpoint = 'small';
          }
          else if (this._mediumBreakpoint.matches) {
              this._currentBreakpoint = 'medium';
          }
          else if (this._largeBreakpoint.matches) {
              this._currentBreakpoint = 'large';
          }
          else {
              this._currentBreakpoint = 'xlarge';
          }
      }
      notifyListeners() {
          this.emit('breakpoint-change', this._currentBreakpoint);
      }
      addEventListener(listener) {
          this.on('breakpoint-change', listener);
      }
      removeEventListener(listener) {
          this.off('breakpoint-change', listener);
      }
      get breakpoint() {
          return this._currentBreakpoint;
      }
  }
  new BreakpointObserver();

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray$1 = Array.isArray;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal$1 = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root$1 = freeGlobal$1 || freeSelf$1 || Function('return this')();

  /** Built-in value references. */
  var Symbol$2 = root$1.Symbol;

  /** Used for built-in method references. */
  var objectProto$t = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$p = objectProto$t.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$4 = objectProto$t.toString;

  /** Built-in value references. */
  var symToStringTag$2 = Symbol$2 ? Symbol$2.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag$1(value) {
    var isOwn = hasOwnProperty$p.call(value, symToStringTag$2),
        tag = value[symToStringTag$2];

    try {
      value[symToStringTag$2] = undefined;
    } catch (e) {}

    var result = nativeObjectToString$4.call(value);
    {
      if (isOwn) {
        value[symToStringTag$2] = tag;
      } else {
        delete value[symToStringTag$2];
      }
    }
    return result;
  }

  /** Used for built-in method references. */
  var objectProto$u = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$5 = objectProto$u.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString$1(value) {
    return nativeObjectToString$5.call(value);
  }

  /** `Object#toString` result references. */
  var nullTag$1 = '[object Null]',
      undefinedTag$1 = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag$3 = Symbol$2 ? Symbol$2.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag$1(value) {
    if (value == null) {
      return value === undefined ? undefinedTag$1 : nullTag$1;
    }
    return (symToStringTag$3 && symToStringTag$3 in Object(value))
      ? getRawTag$1(value)
      : objectToString$1(value);
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike$1(value) {
    return value != null && typeof value == 'object';
  }

  /** `Object#toString` result references. */
  var symbolTag$4 = '[object Symbol]';

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol$1(value) {
    return typeof value == 'symbol' ||
      (isObjectLike$1(value) && baseGetTag$1(value) == symbolTag$4);
  }

  /** Used to match property names within property paths. */
  var reIsDeepProp$1 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp$1 = /^\w*$/;

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey$1(value, object) {
    if (isArray$1(value)) {
      return false;
    }
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' ||
        value == null || isSymbol$1(value)) {
      return true;
    }
    return reIsPlainProp$1.test(value) || !reIsDeepProp$1.test(value) ||
      (object != null && value in Object(object));
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject$1(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  /** `Object#toString` result references. */
  var asyncTag$1 = '[object AsyncFunction]',
      funcTag$3 = '[object Function]',
      genTag$2 = '[object GeneratorFunction]',
      proxyTag$1 = '[object Proxy]';

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction$1(value) {
    if (!isObject$1(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag$1(value);
    return tag == funcTag$3 || tag == genTag$2 || tag == asyncTag$1 || tag == proxyTag$1;
  }

  /** Used to detect overreaching core-js shims. */
  var coreJsData$1 = root$1['__core-js_shared__'];

  /** Used to detect methods masquerading as native. */
  var maskSrcKey$1 = (function() {
    var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked$1(func) {
    return !!maskSrcKey$1 && (maskSrcKey$1 in func);
  }

  /** Used for built-in method references. */
  var funcProto$3 = Function.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$3 = funcProto$3.toString;

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource$1(func) {
    if (func != null) {
      try {
        return funcToString$3.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar$2 = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor$1 = /^\[object .+?Constructor\]$/;

  /** Used for built-in method references. */
  var funcProto$4 = Function.prototype,
      objectProto$v = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$4 = funcProto$4.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$q = objectProto$v.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative$1 = RegExp('^' +
    funcToString$4.call(hasOwnProperty$q).replace(reRegExpChar$2, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative$1(value) {
    if (!isObject$1(value) || isMasked$1(value)) {
      return false;
    }
    var pattern = isFunction$1(value) ? reIsNative$1 : reIsHostCtor$1;
    return pattern.test(toSource$1(value));
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue$1(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative$1(object, key) {
    var value = getValue$1(object, key);
    return baseIsNative$1(value) ? value : undefined;
  }

  /* Built-in method references that are verified to be native. */
  var nativeCreate$1 = getNative$1(Object, 'create');

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear$1() {
    this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete$1(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$3 = '__lodash_hash_undefined__';

  /** Used for built-in method references. */
  var objectProto$w = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$r = objectProto$w.hasOwnProperty;

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet$1(key) {
    var data = this.__data__;
    if (nativeCreate$1) {
      var result = data[key];
      return result === HASH_UNDEFINED$3 ? undefined : result;
    }
    return hasOwnProperty$r.call(data, key) ? data[key] : undefined;
  }

  /** Used for built-in method references. */
  var objectProto$x = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$s = objectProto$x.hasOwnProperty;

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas$1(key) {
    var data = this.__data__;
    return nativeCreate$1 ? (data[key] !== undefined) : hasOwnProperty$s.call(data, key);
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$4 = '__lodash_hash_undefined__';

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet$1(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = (nativeCreate$1 && value === undefined) ? HASH_UNDEFINED$4 : value;
    return this;
  }

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash$1(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `Hash`.
  Hash$1.prototype.clear = hashClear$1;
  Hash$1.prototype['delete'] = hashDelete$1;
  Hash$1.prototype.get = hashGet$1;
  Hash$1.prototype.has = hashHas$1;
  Hash$1.prototype.set = hashSet$1;

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear$1() {
    this.__data__ = [];
    this.size = 0;
  }

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq$1(value, other) {
    return value === other || (value !== value && other !== other);
  }

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf$1(array, key) {
    var length = array.length;
    while (length--) {
      if (eq$1(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  /** Used for built-in method references. */
  var arrayProto$6 = Array.prototype;

  /** Built-in value references. */
  var splice$3 = arrayProto$6.splice;

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete$1(key) {
    var data = this.__data__,
        index = assocIndexOf$1(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice$3.call(data, index, 1);
    }
    --this.size;
    return true;
  }

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet$1(key) {
    var data = this.__data__,
        index = assocIndexOf$1(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas$1(key) {
    return assocIndexOf$1(this.__data__, key) > -1;
  }

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet$1(key, value) {
    var data = this.__data__,
        index = assocIndexOf$1(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache$1(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `ListCache`.
  ListCache$1.prototype.clear = listCacheClear$1;
  ListCache$1.prototype['delete'] = listCacheDelete$1;
  ListCache$1.prototype.get = listCacheGet$1;
  ListCache$1.prototype.has = listCacheHas$1;
  ListCache$1.prototype.set = listCacheSet$1;

  /* Built-in method references that are verified to be native. */
  var Map$2 = getNative$1(root$1, 'Map');

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear$1() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash$1,
      'map': new (Map$2 || ListCache$1),
      'string': new Hash$1
    };
  }

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable$1(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData$1(map, key) {
    var data = map.__data__;
    return isKeyable$1(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete$1(key) {
    var result = getMapData$1(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet$1(key) {
    return getMapData$1(this, key).get(key);
  }

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas$1(key) {
    return getMapData$1(this, key).has(key);
  }

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet$1(key, value) {
    var data = getMapData$1(this, key),
        size = data.size;

    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache$1(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `MapCache`.
  MapCache$1.prototype.clear = mapCacheClear$1;
  MapCache$1.prototype['delete'] = mapCacheDelete$1;
  MapCache$1.prototype.get = mapCacheGet$1;
  MapCache$1.prototype.has = mapCacheHas$1;
  MapCache$1.prototype.set = mapCacheSet$1;

  /** Error message constants. */
  var FUNC_ERROR_TEXT$c = 'Expected a function';

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize$1(func, resolver) {
    if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
      throw new TypeError(FUNC_ERROR_TEXT$c);
    }
    var memoized = function() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    memoized.cache = new (memoize$1.Cache || MapCache$1);
    return memoized;
  }

  // Expose `MapCache`.
  memoize$1.Cache = MapCache$1;

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE$1 = 500;

  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */
  function memoizeCapped$1(func) {
    var result = memoize$1(func, function(key) {
      if (cache.size === MAX_MEMOIZE_SIZE$1) {
        cache.clear();
      }
      return key;
    });

    var cache = result.cache;
    return result;
  }

  /** Used to match property names within property paths. */
  var rePropName$1 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar$1 = /\\(\\)?/g;

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath$1 = memoizeCapped$1(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */) {
      result.push('');
    }
    string.replace(rePropName$1, function(match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar$1, '$1') : (number || match));
    });
    return result;
  });

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap$1(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /** Used as references for various `Number` constants. */
  var INFINITY$6 = 1 / 0;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$3 = Symbol$2 ? Symbol$2.prototype : undefined,
      symbolToString$1 = symbolProto$3 ? symbolProto$3.toString : undefined;

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString$1(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isArray$1(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return arrayMap$1(value, baseToString$1) + '';
    }
    if (isSymbol$1(value)) {
      return symbolToString$1 ? symbolToString$1.call(value) : '';
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY$6) ? '-0' : result;
  }

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString$1(value) {
    return value == null ? '' : baseToString$1(value);
  }

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath$1(value, object) {
    if (isArray$1(value)) {
      return value;
    }
    return isKey$1(value, object) ? [value] : stringToPath$1(toString$1(value));
  }

  /** Used as references for various `Number` constants. */
  var INFINITY$7 = 1 / 0;

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey$1(value) {
    if (typeof value == 'string' || isSymbol$1(value)) {
      return value;
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY$7) ? '-0' : result;
  }

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet$1(object, path) {
    path = castPath$1(path, object);

    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey$1(path[index++])];
    }
    return (index && index == length) ? object : undefined;
  }

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get$1(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet$1(object, path);
    return result === undefined ? defaultValue : result;
  }

  // VSMS Request Types
  // eslint-disable-next-line no-shadow
  var Paths;
  (function (Paths) {
      Paths["GENERIC_SEARCH_PATH"] = "generic/v2/search";
      Paths["PREFETCH_AGGREGATION_PATH"] = "prefetch/v2/prefetchAggregation";
  })(Paths || (Paths = {}));

  var defineProperty$1 = (function() {
    try {
      var func = getNative$1(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }());

  /** Used as references for various `Number` constants. */

  // eslint-disable-next-line no-shadow
  var StockLocatorFilterType;
  (function (StockLocatorFilterType) {
      // ALL = 'ALL',
      // ALL_SUBTYPE = 'ALL_SUBTYPE',
      StockLocatorFilterType["BODY_TYPE"] = "BODY_TYPE";
      StockLocatorFilterType["COLOR"] = "COLOR";
      StockLocatorFilterType["DEALER"] = "DEALER";
      StockLocatorFilterType["DOE_FUEL_TYPE"] = "DOE_FUEL_TYPE";
      StockLocatorFilterType["DRIVE_TYPE"] = "DRIVE_TYPE";
      StockLocatorFilterType["ELECTRIFIED"] = "ELECTRIFIED";
      StockLocatorFilterType["ENGINE"] = "ENGINE";
      StockLocatorFilterType["ENGINE_TYPE"] = "ENGINE_TYPE";
      StockLocatorFilterType["ENGINE_VARIANT"] = "ENGINE_VARIANT";
      StockLocatorFilterType["ENVIRONMENT_CATEGORY"] = "ENVIRONMENT_CATEGORY";
      StockLocatorFilterType["EMISSIONS_AND_RANGE"] = "EMISSIONS_AND_RANGE";
      StockLocatorFilterType["EQUIPMENT_GROUPS"] = "EQUIPMENT_GROUPS";
      StockLocatorFilterType["FUEL"] = "FUEL";
      StockLocatorFilterType["LEGAL_ENTITY"] = "LEGAL_ENTITY";
      StockLocatorFilterType["LINE"] = "LINE";
      StockLocatorFilterType["LINE_MODEL_VARIANTS"] = "LINE_MODEL_VARIANTS";
      StockLocatorFilterType["LOCATION"] = "LOCATION";
      StockLocatorFilterType["MMR"] = "MMR";
      StockLocatorFilterType["MODEL_VARIANT"] = "MODEL_VARIANT";
      StockLocatorFilterType["PAINT_TYPE"] = "PAINT_TYPE";
      StockLocatorFilterType["PERFORMANCE"] = "PERFORMANCE";
      StockLocatorFilterType["PRICE"] = "PRICE";
      StockLocatorFilterType["PURCHASE_ONLINE"] = "PURCHASE_ONLINE";
      StockLocatorFilterType["RANGE"] = "RANGE";
      StockLocatorFilterType["SERIES"] = "SERIES";
      StockLocatorFilterType["TRANSMISSION"] = "TRANSMISSION";
      StockLocatorFilterType["UPHOLSTERY"] = "UPHOLSTERY";
      StockLocatorFilterType["UPHOLSTERY_COLOR"] = "UPHOLSTERY_COLOR";
      StockLocatorFilterType["UPHOLSTERY_TYPE"] = "UPHOLSTERY_TYPE";
      StockLocatorFilterType["USED_CAR_MILEAGE"] = "USED_CAR_MILEAGE";
      StockLocatorFilterType["PREMIUM_SELECTION"] = "PREMIUM_SELECTION";
  })(StockLocatorFilterType || (StockLocatorFilterType = {}));

  function getNavigatorLanguage() {
      if (navigator.languages && navigator.languages.length) {
          return navigator.languages[0];
      }
      return (navigator.userLanguage ||
          navigator.language ||
          navigator.browserLanguage ||
          'en');
  }

  function createNumberFormatter(options, locale = getNavigatorLanguage()) {
      return new Intl.NumberFormat(locale, options);
  }

  const NUMBER_FORMAT = createNumberFormatter({ minimumFractionDigits: 1 });

  /**
   *
   * @param dictionary
   * @returns
   */

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */

  /** `Object#toString` result references. */
  var argsTag$4 = '[object Arguments]';

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments$1(value) {
    return isObjectLike$1(value) && baseGetTag$1(value) == argsTag$4;
  }

  /** Used for built-in method references. */
  var objectProto$z = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$u = objectProto$z.hasOwnProperty;

  /** Built-in value references. */
  var propertyIsEnumerable$2 = objectProto$z.propertyIsEnumerable;

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments$1 = baseIsArguments$1(function() { return arguments; }()) ? baseIsArguments$1 : function(value) {
    return isObjectLike$1(value) && hasOwnProperty$u.call(value, 'callee') &&
      !propertyIsEnumerable$2.call(value, 'callee');
  };

  /** Built-in value references. */
  var spreadableSymbol$1 = Symbol$2 ? Symbol$2.isConcatSpreadable : undefined;

  const Breakpoints = BreakpointsImport;

  function extractValuesFromFormat$1(format) {
      if (!format) {
          return { format: '', values: [] };
      }
      const values = [];
      const valueIndices = {};
      let matchedPlaceholders = 0;
      const newFormat = format.replace(/{(\w+)}/g, (match, value) => {
          if (typeof valueIndices[value] === 'undefined') {
              matchedPlaceholders += 1;
              valueIndices[value] = matchedPlaceholders;
              values.push(value);
          }
          return `{${valueIndices[value]}}`;
      });
      return { format: newFormat, values };
  }

  /**
   * @customElement
   */
  class Copytext extends LitElement {
      formattedText() {
          var _a;
          const { format: formatString, values: valueKeys } = extractValuesFromFormat$1((_a = this.text) !== null && _a !== void 0 ? _a : '');
          const data = valueKeys.map(path => get$1(this.context, path));
          return format(formatString, ...data);
      }
      render() {
          return html `<p class="body-1">${unsafeHTML(this.formattedText())}</p>`;
      }
  }
  Copytext.styles = [
      colors$1,
      typography,
      css `
      :host {
        display: block;
      }

      :host * {
        color: var(--stl-color-gs-80, #262626);
      }

      :host a {
        font-family: var(--font-family-bmw-bold, inherit);
        font-weight: var(--font-weight-bold, 700);
      }
    `,
  ];
  __decorate([
      property$1({ type: Object })
  ], Copytext.prototype, "context", void 0);
  __decorate([
      property$1({})
  ], Copytext.prototype, "text", void 0);

  customElements.define('stl-copytext', Copytext);

  /**
   * @customElement
   */
  class Headline extends LitElement {
      static get styles() {
          // Write styles in standard CSS
          return [
              typography,
              css `
        :host {
          display: block;
        }

        :host([hidden]) {
          display: none;
        }

        h1,
        h2,
        h3,
        h4,
        h5 {
          margin: 0;
        }
      `,
          ];
      }
      render() {
          if (this.size === 'xxl') {
              return html `<h1 class="headline-1"><slot></slot></h1>`;
          }
          if (this.size === 'xl') {
              return html `<h2 class="headline-2"><slot></slot></h2>`;
          }
          if (this.size === 'l') {
              return html `<h3 class="headline-3"><slot></slot></h3>`;
          }
          if (this.size === 'm') {
              return html `<h4 class="headline-4"><slot></slot></h4>`;
          }
          if (this.size === 's') {
              return html `<h5 class="headline-5"><slot></slot></h5>`;
          }
          return '';
      }
  }
  __decorate([
      property$1({})
  ], Headline.prototype, "size", void 0);

  customElements.define('stl-headline', Headline);

  /**
   * @customElement
   */
  class ColumnControl extends LitElement {
      render() {
          return html `<slot></slot>`;
      }
  }
  ColumnControl.styles = [
      spacings,
      css `
      :host {
        display: grid;
        grid-column-gap: 15px;
        grid-template-columns: 1fr;
        grid-column-gap: var(--stl-spacing-016, 1rem);
        margin-bottom: var(--stl-spacing-032, 2rem);
      }

      @media screen and (min-width: ${Breakpoints.MEDIUM}px) {
        :host {
          grid-column-gap: var(--stl-spacing-024, 1.5rem);
        }

        :host([columns='1x1x1x1']) {
          grid-template-columns: 1fr 1fr;
        }
      }

      @media screen and (min-width: ${Breakpoints.LARGE}px) {
        :host {
          grid-column-gap: var(--stl-spacing-032, 2rem);
        }

        :host([columns='2x2']) {
          grid-template-columns: 1fr 1fr;
        }
        :host([columns='2x1x1']) {
          grid-template-columns: 2fr 1fr 1fr;
        }
        :host([columns='1x2x1']) {
          grid-template-columns: 1fr 2fr 1fr;
        }
        :host([columns='1x1x2']) {
          grid-template-columns: 1fr 1fr 2fr;
        }
        :host([columns='1x1x1x1']) {
          grid-template-columns: 1fr 1fr 1fr 1fr;
        }
      }
    `,
  ];

  customElements.define('stl-column-control', ColumnControl);

  /**
   * @customElement
   */
  class VehicleData extends LitElement {
      render() {
          if (!this.label || !this.value) {
              return nothing;
          }
          return html `
      <div class="vehicle-property">
        <span class="property-label">${this.label}</span>
        <br />
        <span class="property-value">${this.value}</span>
        ${!this.footnote
            ? ''
            : html `
              <sup>
                <span class="footnote-indicator">${this.footnote}</span>
              </sup>
            `}
      </div>
    `;
      }
  }
  VehicleData.styles = [
      colors$1,
      typography,
      css `
      :host {
        display: block;
      }

      .vehicle-property {
        font-family: var(--font-family-bmw-thin, inherit);
        font-weight: var(--font-weight-thin, 300);
        margin-bottom: 30px;
        padding-bottom: 30px;
        border-bottom: 1px solid #e6e6e6;
      }

      .property-label {
        font-size: 15px;
        color: var(--stl-color-gs-60, #666);
      }

      .property-value {
        font-size: 20px;
        color: var(--stl-color-gs-80, #262626);
      }

      .footnote-indicator {
        font-size: 9px;
      }
    `,
  ];
  __decorate([
      property$1({})
  ], VehicleData.prototype, "label", void 0);
  __decorate([
      property$1({})
  ], VehicleData.prototype, "value", void 0);
  __decorate([
      property$1({})
  ], VehicleData.prototype, "footnote", void 0);

  customElements.define('stl-vehicle-data', VehicleData);

  /**
   * @license
   * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  // IE11 doesn't support classList on SVG elements, so we emulate it with a Set
  class ClassList {
      constructor(element) {
          this.classes = new Set();
          this.changed = false;
          this.element = element;
          const classList = (element.getAttribute('class') || '').split(/\s+/);
          for (const cls of classList) {
              this.classes.add(cls);
          }
      }
      add(cls) {
          this.classes.add(cls);
          this.changed = true;
      }
      remove(cls) {
          this.classes.delete(cls);
          this.changed = true;
      }
      commit() {
          if (this.changed) {
              let classString = '';
              this.classes.forEach((cls) => classString += cls + ' ');
              this.element.setAttribute('class', classString);
          }
      }
  }
  /**
   * Stores the ClassInfo object applied to a given AttributePart.
   * Used to unset existing values when a new ClassInfo object is applied.
   */
  const previousClassesCache = new WeakMap();
  /**
   * A directive that applies CSS classes. This must be used in the `class`
   * attribute and must be the only part used in the attribute. It takes each
   * property in the `classInfo` argument and adds the property name to the
   * element's `class` if the property value is truthy; if the property value is
   * falsey, the property name is removed from the element's `class`. For example
   * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.
   * @param classInfo {ClassInfo}
   */
  const classMap = directive((classInfo) => (part) => {
      if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||
          part.committer.name !== 'class' || part.committer.parts.length > 1) {
          throw new Error('The `classMap` directive must be used in the `class` attribute ' +
              'and must be the only part in the attribute.');
      }
      const { committer } = part;
      const { element } = committer;
      let previousClasses = previousClassesCache.get(part);
      if (previousClasses === undefined) {
          // Write static classes once
          // Use setAttribute() because className isn't a string on SVG elements
          element.setAttribute('class', committer.strings.join(' '));
          previousClassesCache.set(part, previousClasses = new Set());
      }
      const classList = (element.classList || new ClassList(element));
      // Remove old classes that no longer apply
      // We use forEach() instead of for-of so that re don't require down-level
      // iteration.
      previousClasses.forEach((name) => {
          if (!(name in classInfo)) {
              classList.remove(name);
              previousClasses.delete(name);
          }
      });
      // Add or remove classes based on their classMap value
      for (const name in classInfo) {
          const value = classInfo[name];
          if (value != previousClasses.has(name)) {
              // We explicitly want a loose truthy check of `value` because it seems
              // more convenient that '' and 0 are skipped.
              if (value) {
                  classList.add(name);
                  previousClasses.add(name);
              }
              else {
                  classList.remove(name);
                  previousClasses.delete(name);
              }
          }
      }
      if (typeof classList.commit === 'function') {
          classList.commit();
      }
  });

  function getCellClasses(isBottomLine) {
      return {
          'body-1': true,
          'bottom-line': isBottomLine,
          standard: !isBottomLine,
      };
  }
  /**
   * @customElement
   */
  class PriceInformation extends LitElement {
      // eslint-disable-next-line class-methods-use-this
      renderTableRow(data, classes) {
          return html `
      <tr class="${classMap(classes)}">
        <td class="label ${classMap(classes)}">${data.label}</td>
        <td class="value ${classMap(classes)}">${data.value}</td>
      </tr>
    `;
      }
      renderPriceRows() {
          const priceRows = get$1(this.price, 'details', []);
          // we need the filter here because in this version of stl-core there is a defect that returns undefined rows
          return priceRows
              .filter(row => !!row)
              .map((price, index) => {
              const classes = getCellClasses(index === priceRows.length - 1);
              return this.renderTableRow({ label: price.label, value: price.text }, classes);
          });
      }
      renderAdditionalVehicleData() {
          const additionalData = get$1(this.price, 'additionalData', []);
          if (additionalData.length === 0) {
              return nothing;
          }
          const rows = additionalData
              .filter(row => !!row)
              .map(entry => {
              const classes = { standard: true };
              return this.renderTableRow(entry, classes);
          });
          return html `
      <table class="additional-price-information">
        <tbody>
          ${rows}
        </tbody>
      </table>
    `;
      }
      render() {
          const priceInformationText = this.textDisclaimer
              ? html `<p class="body-1">${this.textDisclaimer}</p>`
              : nothing;
          const additionalDataTable = this.renderAdditionalVehicleData();
          return html `
      <div>
        <table class="price-information">
          <tbody>
            ${this.renderPriceRows()}
          </tbody>
        </table>
        ${additionalDataTable} ${priceInformationText}
      </div>
    `;
      }
  }
  PriceInformation.styles = [
      typography,
      colors$1,
      css `
      :host {
        display: block;
      }

      table {
        width: 100%;
        margin-top: 15px;
        border-collapse: collapse;
      }

      tr.standard td {
        padding-bottom: 15px;
      }

      tr.bottom-line {
        border-top: 1px solid var(--stl-color-gs-30, #e6e6e6);
      }

      tr.bottom-line td {
        padding-top: 15px;
      }

      td.value {
        text-align: right;
      }

      .price-row {
        padding: 0 0 10px 0;
        font-size: 15px;
      }

      .standard {
        color: var(--stl-color-gs-60, #666666);
      }

      .bottom-line {
        color: var(--stl-color-gs-80, #262626);
        font-weight: var(--font-weight-bold, 700);
      }

      .additional-price-information {
        margin-top: 12px;
      }
    `,
  ];
  __decorate([
      property$1({ type: Object, reflect: false })
  ], PriceInformation.prototype, "price", void 0);
  __decorate([
      property$1({ attribute: 'text-disclaimer' })
  ], PriceInformation.prototype, "textDisclaimer", void 0);

  customElements.define('stl-price-information', PriceInformation);

  const BASE_SVG_CONFIG = {
      containerPos: { x: 0, y: 0 },
      width: 800,
      adjustHeight: 0,
      barWidthDifference: 50,
      verticalMargin: 15,
      minBarWidth: 100,
      barHeight: 52,
      markerHeight: 72,
      markerWidth: 120,
      markerXOffset: 0,
      barTextYOffset: 15,
      markerTextYOffset: 27,
      markerTextXOffset: 80,
      addWidthMap: {
          'A+++': 50,
          'A++': 25,
          'A+': 10,
      },
  };
  const MARKET_SVG_OVERRIDES = {
      ch: {
          containerPos: { x: 20, y: 180 },
          barWidthDifference: 60,
          adjustHeight: 30,
          barHeight: 92,
          markerHeight: 112,
          markerXOffset: 40,
          barTextYOffset: 20,
          markerTextYOffset: 40,
          markerTextXOffset: 100,
      },
  };
  const ENERGY_CLASSES = [
      'A+++',
      'A++',
      'A+',
      'A',
      'B',
      'C',
      'D',
      'E',
      'F',
      'G',
      'H',
      'I',
  ];
  const ENERGY_CLASS_LABELS = {
      Aplusplusplus: 'A+++',
      Aplusplus: 'A++',
      Aplus: 'A+',
      'A+++': 'A+++',
      'A++': 'A++',
      'A+': 'A+',
      A: 'A',
      B: 'B',
      C: 'C',
      D: 'D',
      E: 'E',
      F: 'F',
      G: 'G',
      H: 'H',
      I: 'I',
  };
  /**
   * @customElement
   */
  class EnergyLabel extends LitElement {
      constructor() {
          super(...arguments);
          this.country = '';
          this.headline = '';
          this.minEfficiencyClass = 'A+';
          this.maxEfficiencyClass = 'G';
      }
      static get styles() {
          return css `
      :host {
        display: block;
      }

      .energy-efficiency-label {
        width: 100%;
      }

      .ch-energie-etikette {
        font-size: 60px;
        font-weight: bold;
        fill: black;
      }

      .ee-label {
        font-size: 40px;
        font-weight: bold;
        fill: white;
      }

      .market-ch .ee-label {
        font-size: 60px;
      }

      .eel-marker {
        font-size: 50px;
        font-weight: bold;
        fill: white;
      }
      .market-ch .eel-marker {
        font-size: 90px;
      }

      .ch-border {
        fill: none;
        stroke: #000000;
        stroke-width: 1.564;
      }

      path[efficiency-class='A+++'] {
        fill: #00a651;
      }
      path[efficiency-class='A++'] {
        fill: #00a651;
      }
      path[efficiency-class='A+'] {
        fill: #00a651;
      }
      path[efficiency-class='A'] {
        fill: #00a651;
      }
      path[efficiency-class='B'] {
        fill: #50b848;
      }
      path[efficiency-class='C'] {
        fill: #bfd730;
      }
      path[efficiency-class='D'] {
        fill: #fff200;
      }
      path[efficiency-class='E'] {
        fill: #fdb913;
      }
      path[efficiency-class='F'] {
        fill: #f37021;
      }
      path[efficiency-class='G'],
      path[efficiency-class='H'],
      path[efficiency-class='I'] {
        fill: #ed1c24;
      }
      :host([min-efficiency-class='A++']) path[efficiency-class='A'],
      :host([min-efficiency-class='A+++']) path[efficiency-class='A+'] {
        fill: #50b848;
      }
      :host([min-efficiency-class='A++']) path[efficiency-class='B'],
      :host([min-efficiency-class='A+++']) path[efficiency-class='A'] {
        fill: #bfd730;
      }
      :host([min-efficiency-class='A++']) path[efficiency-class='C'],
      :host([min-efficiency-class='A+++']) path[efficiency-class='B'] {
        fill: #bfd730;
      }
      :host([min-efficiency-class='A+++']) path[efficiency-class='C'] {
        fill: #fff200;
      }
      :host([min-efficiency-class='A++']) path[efficiency-class='E'],
      :host([min-efficiency-class='A+++']) path[efficiency-class='D'] {
        fill: #f37021;
      }
      :host([min-efficiency-class='A+++']) path[efficiency-class='E'] {
        fill: #ed1c24;
      }
      :host([min-efficiency-class='A++']) path[efficiency-class='F'],
      :host([min-efficiency-class='A+++']) path[efficiency-class='F'] {
        fill: #ed1c24;
      }
    `;
      }
      get _efficiencyClass() {
          return this.efficiencyClass || '';
      }
      get hasValidEnergyClass() {
          return typeof ENERGY_CLASS_LABELS[this._efficiencyClass] !== 'undefined';
      }
      get svgConfig() {
          const country = this.country || '';
          const overrides = MARKET_SVG_OVERRIDES[country.toLowerCase()] || {};
          return {
              ...BASE_SVG_CONFIG,
              ...overrides,
          };
      }
      get totalHeight() {
          return (this.energyClasses.length *
              (this.svgConfig.barHeight + this.svgConfig.verticalMargin) +
              this.svgConfig.containerPos.y +
              Math.abs(this.activeMarkerNegativeOffsetAdjustment) +
              this.svgConfig.adjustHeight);
      }
      get activeMarkerNegativeOffsetAdjustment() {
          return this.activeCategoryMarkerYPos < 0
              ? -this.activeCategoryMarkerYPos
              : 0;
      }
      get activeCategoryMarkerYPos() {
          return (this.selectedCategoryIndex *
              (this.svgConfig.verticalMargin + this.svgConfig.barHeight) -
              this.svgConfig.markerHeight / 2 +
              this.svgConfig.barHeight / 2);
      }
      get activeCategoryMarkerXPos() {
          return (this.svgConfig.width -
              (this.adjustedMarkerWidth +
                  this.svgConfig.markerHeight / 2 +
                  this.svgConfig.markerXOffset));
      }
      get adjustedMarkerWidth() {
          const efficiencyClass = this._efficiencyClass;
          switch (efficiencyClass.length) {
              case 4:
                  return this.svgConfig.markerWidth + 35;
              case 3:
              case 2:
                  return this.svgConfig.markerWidth + 20;
              default:
                  return this.svgConfig.markerWidth;
          }
      }
      get selectedCategoryIndex() {
          const label = ENERGY_CLASS_LABELS[this._efficiencyClass];
          return this.energyClasses.indexOf(label);
      }
      get energyClasses() {
          const startIndex = ENERGY_CLASSES.indexOf(this.minEfficiencyClass);
          const endIndex = ENERGY_CLASSES.indexOf(this.maxEfficiencyClass);
          return ENERGY_CLASSES.slice(startIndex, endIndex + 1);
      }
      get minBarWidth() {
          const addWidth = this.svgConfig.addWidthMap[this.minEfficiencyClass]
              ? this.svgConfig.addWidthMap[this.minEfficiencyClass]
              : 0;
          return this.svgConfig.minBarWidth + addWidth;
      }
      get barTextYOffset() {
          return this.svgConfig.barHeight / 2 + this.svgConfig.barTextYOffset;
      }
      get markerTextYOffset() {
          return this.svgConfig.barHeight / 2 + this.svgConfig.markerTextYOffset;
      }
      get markerTextXOffset() {
          return this.adjustedMarkerWidth + this.svgConfig.markerHeight / 2 - 15;
      }
      render() {
          if (!this.hasValidEnergyClass) {
              return nothing;
          }
          const header = this.renderHeader();
          const label = this.renderEnergyLabel();
          return html `
      <svg
        class="energy-efficiency-label market-${this.country}"
        viewBox="0 0 ${this.svgConfig.width} ${this.totalHeight}"
        preserveAspectRatio="xMidYMid meet"
      >
        ${header} ${label}
      </svg>
    `;
      }
      renderEnergyLabel() {
          const bands = this.renderBands();
          const label = ENERGY_CLASS_LABELS[this._efficiencyClass];
          return html `
      <svg
        x="${this.svgConfig.containerPos.x}"
        y="${this.svgConfig.containerPos.y}"
      >
        <svg y="${this.activeMarkerNegativeOffsetAdjustment}">${bands}</svg>
        <svg
          x="${this.activeCategoryMarkerXPos}"
          y="${this.activeCategoryMarkerYPos < 0
            ? 0
            : this.activeCategoryMarkerYPos}"
        >
          <g>
            <path d="${this.getMarkerPoints()}" />
            <text
              id="eel-marker-text"
              text-anchor="end"
              class="eel-marker"
              x="${this.markerTextXOffset}"
              y="${this.markerTextYOffset}"
            >
              ${label}
            </text>
          </g>
        </svg>
      </svg>
    `;
      }
      renderBands() {
          return this.energyClasses.map((energyClass, index) => html `
        <svg
          y="${index *
            (this.svgConfig.barHeight + this.svgConfig.verticalMargin)}"
        >
          <g>
            <path
              efficiency-class="${energyClass}"
              d="${this.getPoints(index)}"
            />
            <text
              text-anchor="end"
              class="ee-label"
              x="${this.calculateLabelXPos(index)}"
              y="${this.barTextYOffset}"
            >
              ${energyClass}
            </text>
          </g>
        </svg>
      `);
      }
      getMarkerPoints() {
          const w = this.adjustedMarkerWidth;
          const h = this.svgConfig.markerHeight;
          return `m0 ${h / 2} L${h / 2} 0 L${w + h / 2} 0 L${w + h / 2} ${h} L${h / 2} ${h} L0 ${h / 2}`;
      }
      getPoints(index) {
          const w = this.calculateBarWidth(index);
          const h = this.svgConfig.barHeight;
          return `m0 0 L${w} 0 L${w + h / 2} ${h / 2} L${w} ${h} L0 ${h} L0 0`;
      }
      calculateBarWidth(index) {
          return index * this.svgConfig.barWidthDifference + this.minBarWidth;
      }
      calculateLabelXPos(index) {
          return index * this.svgConfig.barWidthDifference + this.minBarWidth - 10;
      }
      renderHeader() {
          if (this.country !== 'ch') {
              return nothing;
          }
          return html `
      <svg>
        <g id="ch-border">
          <rect
            x="1"
            y="1"
            class="ch-border"
            width="${this.svgConfig.width - 1}"
            height="${this.totalHeight - 2}"
          />
        </g>
        <svg x="20" y="20" id="ch-flag">
          <rect fill="#E30613" x="0" y="0" width="80" height="80" />
          <rect fill="#FFFFFF" x="32" y="16" width="16" height="48" />
          <rect fill="#FFFFFF" x="16" y="32" width="48" height="18" />
        </svg>
        <text class="ch-energie-etikette" font-weight="900" x="120" y="80">
          ${this.headline}
        </text>
        <line
          x1="20"
          y1="120"
          x2="${this.svgConfig.width - 20}"
          y2="120"
          stroke="black"
        />
      </svg>
    `;
      }
  }
  __decorate([
      property$1({})
  ], EnergyLabel.prototype, "country", void 0);
  __decorate([
      property$1({})
  ], EnergyLabel.prototype, "headline", void 0);
  __decorate([
      property$1({ attribute: 'min-efficiency-class' })
  ], EnergyLabel.prototype, "minEfficiencyClass", void 0);
  __decorate([
      property$1({ attribute: 'max-efficiency-class' })
  ], EnergyLabel.prototype, "maxEfficiencyClass", void 0);
  __decorate([
      property$1({ attribute: 'efficiency-class' })
  ], EnergyLabel.prototype, "efficiencyClass", void 0);

  customElements.define('stl-energy-label', EnergyLabel);

  /**
   * @customElement
   */
  class Disclaimer extends LitElement {
      render() {
          if (!this.disclaimerConfig ||
              !Array.isArray(this.disclaimerConfig.children)) {
              return html ``;
          }
          const header = this.renderHeader();
          return html `${header} ${this.renderDisclaimerContent()}`;
      }
      renderHeader() {
          if (!this.headline && !this.subheadline) {
              return nothing;
          }
          const headline = this.headline
              ? html `<stl-headline size="xl">${this.headline}</stl-headline>`
              : nothing;
          const subheadline = this.subheadline
              ? html `<stl-headline size="m">${this.subheadline}</stl-headline>`
              : nothing;
          return html `<div class="header">${headline} ${subheadline}</div>`;
      }
      renderDisclaimerContent() {
          return this.disclaimerConfig.children.map(child => this.renderDisclaimerNode(child));
      }
      renderDisclaimerNode(node) {
          const children = node.children || [];
          const childElements = children.map(child => this.renderDisclaimerNode(child));
          const properties = node.properties || {};
          // dynamic tag names are not yet possible with lit-html
          // https://github.com/Polymer/lit-html/issues/78
          switch (node.component) {
              case 'Section':
                  return html `
          <section class="disclaimer-section">${childElements}</section>
        `;
              case 'Column':
                  return html ` <div class="column">${childElements}</div> `;
              case 'ColumnControl':
                  return html `
          <stl-column-control
            columns="${properties.columnSpec}"
          >
            ${childElements}
          </stl-column-control>
        `;
              case 'Headline':
                  return html `
          <stl-headline .size="${properties.size}">
            ${properties.text}
          </stl-headline>
        `;
              case 'Copytext':
                  return html `
          <stl-copytext
            .text="${properties.text}"
            .context="${this.context}"
          >
            ${childElements}
          </stl-copytext>
        `;
              case 'VehicleData':
                  return html `
          <stl-vehicle-data
            .label="${properties.label}"
            .value="${properties.value}"
            .footnote="${properties.footnote}"
          >
          </stl-vehicle-data>
        `;
              case 'EnergyEfficiencyLabel':
                  return html `
          <stl-energy-label
            efficiency-class="${properties
                    .efficiencyClass}"
            min-efficiency-class="${properties
                    .minEfficiencyClass}"
            max-efficiency-class="${properties
                    .maxEfficiencyClass}"
            headline="${properties.headline}"
            country="${properties.country}"
          ></stl-energy-label>
        `;
              case 'PriceInformation':
                  return html `
          <stl-price-information
            .price="${properties.price}"
            .textDisclaimer="${properties.textDisclaimer}"
          >
            ${childElements}
          </stl-price-information>
        `;
              default:
                  return nothing;
          }
      }
  }
  Disclaimer.styles = [
      spacings,
      css `
      :host {
        display: block;
        padding: 50px 0;
      }

      .header {
        margin-bottom: var(--stl-spacing-048, 3rem);
      }

      .column > * + * {
        margin-top: var(--stl-spacing-032, 2rem);
      }

      .column > stl-headline + stl-headline {
        margin-top: var(--stl-spacing-012, 0.75rem);
      }
    `,
  ];
  __decorate([
      property$1({})
  ], Disclaimer.prototype, "context", void 0);
  __decorate([
      property$1({})
  ], Disclaimer.prototype, "headline", void 0);
  __decorate([
      property$1({})
  ], Disclaimer.prototype, "subheadline", void 0);
  __decorate([
      property$1({})
  ], Disclaimer.prototype, "disclaimerConfig", void 0);

  customElements.define('stl-disclaimer', Disclaimer);

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=" /*# sourceMappingURL=StockcarDisclaimerLayer.vue.map */"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  const bodyScrollLock$1 = new BodyScrollLock();

  function updateValues(el, binding) {
    Object.keys(binding.value).forEach((key) => {
      el[key] = binding.value[key];
    });
  }

  var StockcarDisclaimerLayer = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('BackdropModal',{attrs:{"open":true},on:{"onCloseModal":_vm.handleOnCloseModal}},[_c('div',{staticClass:"tw-py-600 larger:tw-py-700 tw-w-full tw-h-full"},[_c('div',{staticClass:"tw-mt-ng-400 tw-px-ng-600 medium:tw-px-ng-900"},[_c('TextBlock',{attrs:{"element":"p","typo":"headline-4"}},[_vm._v(_vm._s(_vm.name))])],1),_vm._v(" "),_c('stl-disclaimer',{directives:[{name:"properties",rawName:"v-properties",value:(_vm.disclaimerProperties),expression:"disclaimerProperties"}],staticClass:"tw-container tw-mt-ng-400 tw-px-ng-600 medium:tw-px-ng-900"})],1)])],1)},staticRenderFns: [],_scopeId: 'data-v-63fa01ee',
    name: 'StockcarDisclaimerLayer',
    directives: {
      properties: {
        bind(el, binding) {
          updateValues(el, binding);
        },
        update(el, binding) {
          if (binding.value !== binding.oldValue) {
            updateValues(el, binding);
          }
        },
      },
    },
    components: {
      BackdropModal,
      TextBlock,
    },
    props: {
      name: {
        type: String,
      },
      vehicle: {
        type: Object,
        default: () => ({}),
      },
      config: {
        type: Object,
        default: () => ({}),
      },
      disclaimerReference: {
        type: String,
      },
    },
    methods: {
      handleOnCloseModal() {
        this.$emit('close');
      },
    },
    computed: {
      disclaimerProperties() {
        return {
          config: this.config,
          context: this.vehicle,
          disclaimerConfig: this.config.disclaimerConfigurations[
            this.disclaimerReference
          ],
        };
      },
    },
    mounted() {
      bodyScrollLock$1.disableBodyScroll();
    },
    destroyed() {
      bodyScrollLock$1.enableBodyScroll();
    },
  };

  var PriceMixin = {
    props: {
      aemConfig: {
        type: Object,
        default() {
          return {};
        },
      },
    },
    methods: {
      getVehiclePrice(vehicle) {
        if (this.aemConfig.useLocalCurrency) {
          return get(vehicle, 'priceInformation.localCurrency.priceWithTax');
        }
        return get(vehicle, 'priceInformation.priceWithTax');
      },
      getPriceInformation(vehicle) {
        if (this.aemConfig.useLocalCurrency) {
          return get(vehicle, 'priceInformation.localCurrency');
        }
        return vehicle.priceInformation;
      },
      getVehicleDicountedPrice(vehicle) {
        if (this.aemConfig.useLocalCurrency) {
          return get(
            vehicle,
            'priceInformation.localCurrency.discountPriceWithTax'
          );
        }
        return get(vehicle, 'priceInformation.discountPriceWithTax');
      },
    },
  };

  const TYPES = {
    consumption: 'consumption',
    electricConsumption: 'electricityConsumption',
    emission: 'emission',
    electricRange: 'electricRange',
    meanCustomerRange: 'meanCustomerRange',
    meanCustomerElRange: 'meanCustomerElRange',
    pollutionLevel: 'pollutionLevel',
    safetyLevel: 'safetyLevel',
  };

  const LABELS = {
    consumption: 'consumption',
    electricConsumption: 'electricConsumption',
    emission: 'emission',
    electricRange: 'electricRange',
    meanCustomerRange: 'meanCustomerRange',
    meanCustomerElRange: 'meanCustomerElRange',
    pollutionLevel: 'pollutionLevel',
    safetyLevel: 'safetyLevel',
  };

  var configInfoLayer = {
    rangeTypes: [
      TYPES.electricRange,
      TYPES.meanCustomerRange,
      TYPES.meanCustomerElRange,
    ],
    consumptionTypes: [TYPES.consumption, TYPES.electricConsumption],
    emissionTypes: [TYPES.emission],
    wltp: {
      NOHY: [
        {
          name: TYPES.consumption,
          label: LABELS.consumption,
          path: {
            wltp: 'wltp.wfcapComb',
            nefzCorr: 'nedcCorrelated.nfcComb',
          },
        },
        {
          name: TYPES.emission,
          label: LABELS.emission,
          path: {
            wltp: 'wltp.wCo2ApComb',
            nefzCorr: 'nedcCorrelated.nCo2Comb',
          },
        },
        {
          name: TYPES.pollutionLevel,
          label: LABELS.pollutionLevel,
          path: {
            wltp: 'pollutionLevel',
            nefzCorr: 'pollutionLevel',
          },
        },
        {
          name: TYPES.safetyLevel,
          label: LABELS.safetyLevel,
          path: {
            wltp: 'safetyEquipmentLevel',
            nefzCorr: 'safetyEquipmentLevel',
          },
        },
      ],
      MHEV: [
        {
          name: TYPES.consumption,
          label: LABELS.consumption,
          path: {
            wltp: 'wltp.wfcapComb',
            nefzCorr: 'nedcCorrelated.nfcComb',
          },
        },
        {
          name: TYPES.emission,
          label: LABELS.emission,
          path: {
            wltp: 'wltp.wCo2ApComb',
            nefzCorr: 'nedcCorrelated.nCo2Comb',
          },
        },
        {
          name: TYPES.pollutionLevel,
          label: LABELS.pollutionLevel,
          path: {
            wltp: 'pollutionLevel',
            nefzCorr: 'pollutionLevel',
          },
        },
        {
          name: TYPES.safetyLevel,
          label: LABELS.safetyLevel,
          path: {
            wltp: 'safetyEquipmentLevel',
            nefzCorr: 'safetyEquipmentLevel',
          },
        },
      ],
      PHEV: [
        {
          name: TYPES.electricConsumption,
          label: LABELS.electricConsumption,
          path: {
            wltp: 'wltp.wecCdcs',
            nefzCorr: 'nedcCorrelated.electricConsumption',
          },
        },
        {
          name: TYPES.electricRange,
          label: LABELS.electricRange,
          path: {
            wltp: 'wltp.weroapComb',
            nefzCorr: 'nedcCorrelated.ner',
          },
        },
        {
          name: TYPES.consumption,
          label: LABELS.consumption,
          path: {
            wltp: 'wltp.wfcwComb',
            nefzCorr: 'nedcCorrelated.nfcwComb',
          },
        },
        {
          name: TYPES.emission,
          label: LABELS.emission,
          path: {
            wltp: 'wltp.wCo2WComb',
            nefzCorr: 'nedcCorrelated.nCo2WComb',
          },
        },
        {
          name: TYPES.pollutionLevel,
          label: LABELS.pollutionLevel,
          path: {
            wltp: 'pollutionLevel',
            nefzCorr: 'pollutionLevel',
          },
        },
        {
          name: TYPES.safetyLevel,
          label: LABELS.safetyLevel,
          path: {
            wltp: 'safetyEquipmentLevel',
            nefzCorr: 'safetyEquipmentLevel',
          },
        },
      ],
      BEV: [
        {
          name: TYPES.electricConsumption,
          label: LABELS.electricConsumption,
          path: {
            wltp: 'wltp.wecComb',
            nefzCorr: 'nedcCorrelated.nec',
          },
        },
        {
          name: TYPES.electricRange,
          label: LABELS.electricRange,
          path: {
            wltp: 'wltp.weroap',
            nefzCorr: 'nedcCorrelated.ner',
          },
        },
        {
          name: TYPES.emission,
          label: LABELS.emission,
          path: {
            wltp: 'wltp.wCo2ApComb',
            nefzCorr: 'nedcCorrelated.nCo2Comb',
          },
        },
        {
          name: TYPES.meanCustomerElRange,
          label: LABELS.meanCustomerElRange,
          path: {
            wltp: 'electricRangeMeanCustomer',
            nefzCorr: 'electricRangeMeanCustomer',
          },
        },
        {
          name: TYPES.pollutionLevel,
          label: LABELS.pollutionLevel,
          path: {
            wltp: 'pollutionLevel',
            nefzCorr: 'pollutionLevel',
          },
        },
        {
          name: TYPES.safetyLevel,
          label: LABELS.safetyLevel,
          path: {
            wltp: 'safetyEquipmentLevel',
            nefzCorr: 'safetyEquipmentLevel',
          },
        },
      ],
      REX: [
        {
          name: TYPES.electricConsumption,
          label: LABELS.electricConsumption,
          path: {
            wltp: 'wltp.wecCdcs',
            nefzCorr: 'nedcCorrelated.ner',
          },
        },
        {
          name: TYPES.electricRange,
          label: LABELS.electricRange,
          path: {
            wltp: 'wltp.weroapComb',
            nefzCorr: 'nedcCorrelated.nec',
          },
        },
        {
          name: TYPES.consumption,
          label: LABELS.consumption,
          path: {
            wltp: 'wltp.wfcwComb',
            nefzCorr: 'nedcCorrelated.nfcwComb',
          },
        },
        {
          name: TYPES.emission,
          label: LABELS.emission,
          path: {
            wltp: 'wltp.wCo2WComb',
            nefzCorr: 'nedcCorrelated.nCo2WComb',
          },
        },
        {
          name: TYPES.meanCustomerRange,
          label: LABELS.meanCustomerRange,
          path: {
            wltp: 'totalRangeMeanCustomer',
            nefzCorr: 'totalRangeMeanCustomer',
          },
        },
        {
          name: TYPES.meanCustomerElRange,
          label: LABELS.meanCustomerElRange,
          path: {
            wltp: 'electricRangeMeanCustomer',
            nefzCorr: 'electricRangeMeanCustomer',
          },
        },
        {
          name: TYPES.pollutionLevel,
          label: LABELS.pollutionLevel,
          path: {
            wltp: 'pollutionLevel',
            nefzCorr: 'pollutionLevel',
          },
        },
        {
          name: TYPES.safetyLevel,
          label: LABELS.safetyLevel,
          path: {
            wltp: 'safetyEquipmentLevel',
            nefzCorr: 'safetyEquipmentLevel',
          },
        },
      ],
    },
    noWltp: {
      NOHY: [
        {
          name: TYPES.consumption,
          label: LABELS.consumption,
          path: 'nedc.consumption',
        },
        {
          name: TYPES.emission,
          label: LABELS.emission,
          path: 'nedc.co2Comb',
        },
        {
          name: TYPES.pollutionLevel,
          label: LABELS.pollutionLevel,
          path: 'pollutionLevel',
        },
        {
          name: TYPES.safetyLevel,
          label: LABELS.safetyLevel,
          path: 'safetyEquipmentLevel',
        },
      ],
      MHEV: [
        {
          name: TYPES.consumption,
          label: LABELS.consumption,
          path: 'nedc.consumption',
        },
        {
          name: TYPES.emission,
          label: LABELS.emission,
          path: 'nedc.co2Comb',
        },
        {
          name: TYPES.pollutionLevel,
          label: LABELS.pollutionLevel,
          path: 'pollutionLevel',
        },
        {
          name: TYPES.safetyLevel,
          label: LABELS.safetyLevel,
          path: 'safetyEquipmentLevel',
        },
      ],
      PHEV: [
        {
          name: TYPES.electricConsumption,
          label: LABELS.electricConsumption,
          path: 'nedc.electricConsumption',
        },
        {
          name: TYPES.electricRange,
          label: LABELS.electricRange,
          path: 'nedc.electricRange',
        },
        {
          name: TYPES.consumption,
          label: LABELS.consumption,
          path: 'nedc.consumption',
        },
        {
          name: TYPES.emission,
          label: LABELS.emission,
          path: 'nedc.co2Comb',
        },
        {
          name: TYPES.pollutionLevel,
          label: LABELS.pollutionLevel,
          path: 'pollutionLevel',
        },
        {
          name: TYPES.safetyLevel,
          label: LABELS.safetyLevel,
          path: 'safetyEquipmentLevel',
        },
      ],
      BEV: [
        {
          name: TYPES.electricConsumption,
          label: LABELS.electricConsumption,
          path: 'nedc.electricConsumption',
        },
        {
          name: TYPES.electricRange,
          label: LABELS.electricRange,
          path: 'nedc.electricRange',
        },
        {
          name: TYPES.emission,
          label: LABELS.emission,
          path: 'nedc.co2Comb',
        },
        {
          name: TYPES.meanCustomerElRange,
          label: LABELS.meanCustomerElRange,
          path: 'electricRangeMeanCustomer',
        },
        {
          name: TYPES.pollutionLevel,
          label: LABELS.pollutionLevel,
          path: 'pollutionLevel',
        },
        {
          name: TYPES.safetyLevel,
          label: LABELS.safetyLevel,
          path: 'safetyEquipmentLevel',
        },
      ],
      REX: [
        {
          name: TYPES.electricConsumption,
          label: LABELS.electricConsumption,
          path: 'nedc.electricConsumption',
        },
        {
          name: TYPES.electricRange,
          label: LABELS.electricRange,
          path: 'nedc.electricRange',
        },
        {
          name: TYPES.consumption,
          label: LABELS.consumption,
          path: 'nedc.consumption',
        },
        {
          name: TYPES.emission,
          label: LABELS.emission,
          path: 'nedc.co2Comb',
        },
        {
          name: TYPES.meanCustomerRange,
          label: LABELS.meanCustomerRange,
          path: 'totalRangeMeanCustomer',
        },
        {
          name: TYPES.meanCustomerElRange,
          label: LABELS.meanCustomerElRange,
          path: 'electricRangeMeanCustomer',
        },
        {
          name: TYPES.pollutionLevel,
          label: LABELS.pollutionLevel,
          path: 'pollutionLevel',
        },
        {
          name: TYPES.safetyLevel,
          label: LABELS.safetyLevel,
          path: 'safetyEquipmentLevel',
        },
      ],
    },
  };

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  /**
   * lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT$d = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$5 = '__lodash_hash_undefined__';

  /** Used as references for various `Number` constants. */
  var INFINITY$8 = 1 / 0;

  /** `Object#toString` result references. */
  var funcTag$4 = '[object Function]',
      genTag$3 = '[object GeneratorFunction]',
      symbolTag$5 = '[object Symbol]';

  /** Used to match property names within property paths. */
  var reIsDeepProp$2 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp$2 = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName$2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar$3 = /[\\^$.*+?()[\]{}|]/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar$2 = /\\(\\)?/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor$2 = /^\[object .+?Constructor\]$/;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal$2 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  /** Detect free variable `self`. */
  var freeSelf$2 = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root$2 = freeGlobal$2 || freeSelf$2 || Function('return this')();

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue$2(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `value` is a host object in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
   */
  function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }

  /** Used for built-in method references. */
  var arrayProto$7 = Array.prototype,
      funcProto$5 = Function.prototype,
      objectProto$A = Object.prototype;

  /** Used to detect overreaching core-js shims. */
  var coreJsData$2 = root$2['__core-js_shared__'];

  /** Used to detect methods masquerading as native. */
  var maskSrcKey$2 = (function() {
    var uid = /[^.]+$/.exec(coreJsData$2 && coreJsData$2.keys && coreJsData$2.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /** Used to resolve the decompiled source of functions. */
  var funcToString$5 = funcProto$5.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$v = objectProto$A.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString$2 = objectProto$A.toString;

  /** Used to detect if a method is native. */
  var reIsNative$2 = RegExp('^' +
    funcToString$5.call(hasOwnProperty$v).replace(reRegExpChar$3, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /** Built-in value references. */
  var Symbol$3 = root$2.Symbol,
      splice$4 = arrayProto$7.splice;

  /* Built-in method references that are verified to be native. */
  var Map$3 = getNative$2(root$2, 'Map'),
      nativeCreate$2 = getNative$2(Object, 'create');

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$4 = Symbol$3 ? Symbol$3.prototype : undefined,
      symbolToString$2 = symbolProto$4 ? symbolProto$4.toString : undefined;

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash$2(entries) {
    var index = -1,
        length = entries ? entries.length : 0;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear$2() {
    this.__data__ = nativeCreate$2 ? nativeCreate$2(null) : {};
  }

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete$2(key) {
    return this.has(key) && delete this.__data__[key];
  }

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet$2(key) {
    var data = this.__data__;
    if (nativeCreate$2) {
      var result = data[key];
      return result === HASH_UNDEFINED$5 ? undefined : result;
    }
    return hasOwnProperty$v.call(data, key) ? data[key] : undefined;
  }

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas$2(key) {
    var data = this.__data__;
    return nativeCreate$2 ? data[key] !== undefined : hasOwnProperty$v.call(data, key);
  }

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet$2(key, value) {
    var data = this.__data__;
    data[key] = (nativeCreate$2 && value === undefined) ? HASH_UNDEFINED$5 : value;
    return this;
  }

  // Add methods to `Hash`.
  Hash$2.prototype.clear = hashClear$2;
  Hash$2.prototype['delete'] = hashDelete$2;
  Hash$2.prototype.get = hashGet$2;
  Hash$2.prototype.has = hashHas$2;
  Hash$2.prototype.set = hashSet$2;

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache$2(entries) {
    var index = -1,
        length = entries ? entries.length : 0;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear$2() {
    this.__data__ = [];
  }

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete$2(key) {
    var data = this.__data__,
        index = assocIndexOf$2(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice$4.call(data, index, 1);
    }
    return true;
  }

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet$2(key) {
    var data = this.__data__,
        index = assocIndexOf$2(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas$2(key) {
    return assocIndexOf$2(this.__data__, key) > -1;
  }

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet$2(key, value) {
    var data = this.__data__,
        index = assocIndexOf$2(data, key);

    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  // Add methods to `ListCache`.
  ListCache$2.prototype.clear = listCacheClear$2;
  ListCache$2.prototype['delete'] = listCacheDelete$2;
  ListCache$2.prototype.get = listCacheGet$2;
  ListCache$2.prototype.has = listCacheHas$2;
  ListCache$2.prototype.set = listCacheSet$2;

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache$2(entries) {
    var index = -1,
        length = entries ? entries.length : 0;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear$2() {
    this.__data__ = {
      'hash': new Hash$2,
      'map': new (Map$3 || ListCache$2),
      'string': new Hash$2
    };
  }

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete$2(key) {
    return getMapData$2(this, key)['delete'](key);
  }

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet$2(key) {
    return getMapData$2(this, key).get(key);
  }

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas$2(key) {
    return getMapData$2(this, key).has(key);
  }

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet$2(key, value) {
    getMapData$2(this, key).set(key, value);
    return this;
  }

  // Add methods to `MapCache`.
  MapCache$2.prototype.clear = mapCacheClear$2;
  MapCache$2.prototype['delete'] = mapCacheDelete$2;
  MapCache$2.prototype.get = mapCacheGet$2;
  MapCache$2.prototype.has = mapCacheHas$2;
  MapCache$2.prototype.set = mapCacheSet$2;

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf$2(array, key) {
    var length = array.length;
    while (length--) {
      if (eq$2(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet$2(object, path) {
    path = isKey$2(path, object) ? [path] : castPath$2(path);

    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey$2(path[index++])];
    }
    return (index && index == length) ? object : undefined;
  }

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative$2(value) {
    if (!isObject$2(value) || isMasked$2(value)) {
      return false;
    }
    var pattern = (isFunction$2(value) || isHostObject(value)) ? reIsNative$2 : reIsHostCtor$2;
    return pattern.test(toSource$2(value));
  }

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString$2(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isSymbol$2(value)) {
      return symbolToString$2 ? symbolToString$2.call(value) : '';
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY$8) ? '-0' : result;
  }

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath$2(value) {
    return isArray$2(value) ? value : stringToPath$2(value);
  }

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData$2(map, key) {
    var data = map.__data__;
    return isKeyable$2(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative$2(object, key) {
    var value = getValue$2(object, key);
    return baseIsNative$2(value) ? value : undefined;
  }

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey$2(value, object) {
    if (isArray$2(value)) {
      return false;
    }
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' ||
        value == null || isSymbol$2(value)) {
      return true;
    }
    return reIsPlainProp$2.test(value) || !reIsDeepProp$2.test(value) ||
      (object != null && value in Object(object));
  }

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable$2(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked$2(func) {
    return !!maskSrcKey$2 && (maskSrcKey$2 in func);
  }

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath$2 = memoize$2(function(string) {
    string = toString$2(string);

    var result = [];
    if (reLeadingDot.test(string)) {
      result.push('');
    }
    string.replace(rePropName$2, function(match, number, quote, string) {
      result.push(quote ? string.replace(reEscapeChar$2, '$1') : (number || match));
    });
    return result;
  });

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey$2(value) {
    if (typeof value == 'string' || isSymbol$2(value)) {
      return value;
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY$8) ? '-0' : result;
  }

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to process.
   * @returns {string} Returns the source code.
   */
  function toSource$2(func) {
    if (func != null) {
      try {
        return funcToString$5.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize$2(func, resolver) {
    if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
      throw new TypeError(FUNC_ERROR_TEXT$d);
    }
    var memoized = function() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result);
      return result;
    };
    memoized.cache = new (memoize$2.Cache || MapCache$2);
    return memoized;
  }

  // Assign cache to `_.memoize`.
  memoize$2.Cache = MapCache$2;

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq$2(value, other) {
    return value === other || (value !== value && other !== other);
  }

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray$2 = Array.isArray;

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction$2(value) {
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 8-9 which returns 'object' for typed array and other constructors.
    var tag = isObject$2(value) ? objectToString$2.call(value) : '';
    return tag == funcTag$4 || tag == genTag$3;
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject$2(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike$2(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol$2(value) {
    return typeof value == 'symbol' ||
      (isObjectLike$2(value) && objectToString$2.call(value) == symbolTag$5);
  }

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString$2(value) {
    return value == null ? '' : baseToString$2(value);
  }

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get$2(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet$2(object, path);
    return result === undefined ? defaultValue : result;
  }

  var lodash_get = get$2;

  function getValue$3(vehicle, mappings, type) {
    const mapping = mappings[type];

    if (!mapping) {
      return;
    }

    if (vehicle.isWltp) {
      return lodash_get(vehicle, mapping.path.wltp, null);
    }
    return lodash_get(vehicle, mapping.path, null);
  }

  const getEngineFunctions = vehicle => {
    const vehicleType = !vehicle.type || vehicle.type === 'none' ? 'NOHY' : vehicle.type;
    let mappings = vehicle.isWltp ? configInfoLayer.wltp[vehicleType] : configInfoLayer.noWltp[vehicleType];
    mappings = mappings.reduce((acc, entry) => {
      acc[entry.name] = entry;
      return acc;
    }, {});

    const cc = getValue$3(vehicle, mappings, TYPES.consumption);
    const acceleration = vehicle.acceleration;
    const co2 = getValue$3(vehicle, mappings, TYPES.emission);
    const consumption = getValue$3(vehicle, mappings, TYPES.consumption);
    const electricRange = getValue$3(vehicle, mappings, TYPES.electricRange);
    const electricConsumption = getValue$3(vehicle, mappings, TYPES.electricConsumption);

    return {
      cc,
      acceleration,
      co2,
      consumption,
      electricRange,
      electricConsumption,
      powerKw: vehicle.powerKw,
      powerHp: vehicle.powerHp,
      powerPs: vehicle.powerPs
    };
  };

  const getEngineData = (object, config, i18n) => {
    const engineFunction = getEngineFunctions(object);
    config = config || {};

    return {
      enginePower: {
        name: i18n.enginePower,
        text: translateLabel(i18n.power, [engineFunction.powerKw, engineFunction.powerHp]),
        isDisabled: !config.power,
      },
      acceleration: {
        name: i18n.acceleration,
        text: engineFunction.acceleration,
        isDisabled: !config.acceleration,
      },
      transmission: {
        name: i18n.transmission,
        text: object.transmission === 'AUT' ?
          i18n.transmissionAut :
          i18n.transmissionMan,
        isDisabled: !config.transmission,
      },
      driveType: {
        name: i18n.driveType,
        text: object.driveType,
        isDisabled: !config.driveTrain,
      },
      capacity: {
        name: i18n.capacity,
        text: translateLabel(i18n.engineCapacity, object.engineCapacity),
        isDisabled: !config.capacity,
      },
      consumptionCombine: {
        name: i18n.consumptionCombined,
        text: translateLabel(
          i18n.engineConsumptionComb,
          getMinMaxValue(engineFunction.consumption, '')
        ),
        isDisabled: !config.energyConsumption,
      },
      co2Emission: {
        name: i18n.coEmisson,
        value: engineFunction.co2,
        text: translateLabel(
          i18n.engineCo2Emission,
          getMinMaxValue(engineFunction.co2, '')
        ),
        isDisabled: !config.co2,
      },
      emissionLabel: {
        name: i18n.emissionLabel,
        text: 'Test value',
        isDisabled: true,
      },
    };
  };

  const sortedLabelTransformed = {
    relevance: {
      key: 'relevance',
      name: 'relevance',
      direction: 'asc',
    },
    lowestPrice: {
      key: 'lowestPrice',
      name: 'price',
      direction: 'asc',
    },
    highestPrice: {
      key: 'highestPrice',
      name: 'price',
      direction: 'desc',
    },
    az: {
      key: 'az',
      name: 'model',
      direction: 'asc',
    },
    za: {
      key: 'za',
      name: 'model',
      direction: 'desc',
    },
    distanceNearest: {
      key: 'distanceNearest',
      name: 'location',
      direction: 'asc',
    },
  };

  const defaultSorting = {
    perPage: ['limit', 10],
    sortingField: ['sortby', sortedLabelTransformed.relevance.name, 'relevance'],
    offset: ['offset', 0],
    sortingDirection: [
      'sortdirection',
      sortedLabelTransformed.relevance.direction,
    ],
  };

  const CLIENTLIBS_RESOURCES_PATH =
    '/etc.clientlibs/digitals2/stocklocator/clientlibs/resources/';
  const EQUIPMENT_IMAGE_FALLBACK_FILENAME = 'equipment-fallback.png';
  const PREPRODUCTION_FLAG = 'preproduction';

  const hasDiscountedPrice = (priceInformation, aemConfig) => {
    const discountPriceWithTax = get(priceInformation, 'discountPriceWithTax', 0);
    const discountPriceWithoutTax = get(
      priceInformation,
      'discountPriceWithoutTax',
      0
    );

    const localCurrencyDiscountPriceWithTax = get(
      priceInformation,
      'localCurrency.discountPriceWithTax',
      0
    );

    const localCurrencyDiscountPriceWithoutTax = get(
      priceInformation,
      'localCurrency.discountPriceWithoutTax',
      0
    );

    if (aemConfig.useLocalCurrency) {
      return (
        localCurrencyDiscountPriceWithTax > 0 &&
        localCurrencyDiscountPriceWithoutTax > 0
      );
    }

    return discountPriceWithTax > 0 && discountPriceWithoutTax > 0;
  };

  const isPreproductionVehicle = (vehicle) => {
    return (
      vehicle.attributes.stockStatus === PREPRODUCTION_FLAG ||
      vehicle.attributes.vehicles[0].stockStatus === PREPRODUCTION_FLAG
    );
  };

  const setDiscountPricesInPriceInformation = (
    priceInformation,
    model
  ) => {
    return {
      ...priceInformation,
      discountPriceWithTax: get(
        model,
        'attributes.priceInformation.discountPriceWithTax.min',
        0
      ),

      discountPriceWithoutTax: get(
        model,
        'attributes.priceInformation.discountPriceWithoutTax.min',
        0
      ),
      localCurrency: {
        ...priceInformation.localCurrency,
        discountPriceWithTax: get(
          model,
          'attributes.priceInformation.localCurrency.discountPriceWithTax.min',
          0
        ),
        discountPriceWithoutTax: get(
          model,
          'attributes.priceInformation.localCurrency.discountPriceWithoutTax.min',
          0
        ),
      },
    };
  };

  const createDescription = (engine, isGroup) => {
    return Object.assign(
      {},
      {
        co2: getMinMaxValue(engine.co2),
        consumption: getMinMaxValue(engine.consumption),
        electricConsumption: getMinMaxValue(engine.electricConsumption),
        electricRange: getMinMaxValue(engine.electricRange),
        kW: engine.powerKw,
        HP: engine.powerHp,
        isGroup,
      }
    );
  };

  const singleModelParser = (object, aemConfig) => {
    return {
      id: object.groupReference,
      fullCardTitle: `${object.model || ''}`,
      description: createDescription(
        getEngineFunctions(object),
        object.vehicles.length > 1
      ),
      brand: object.brand,
      vehicle: object.modelValue,
      wltp: object.wltp,
      nedc: object.nedc,
      nedcCorrelated: object.nedcCorrelated,
      priceInformation: object.priceInformation,
      interior: object.interior,
      exterior: object.exterior,
      options: object.options,
      modvar: object.modvar,
      packages: object.packages,
      line: object.lines,
      paint: object.colorCode,
      type: object.vehicleType,
      isWltp: object.isWltp,
      powerHp: object.powerHp,
      powerKw: object.powerKw,
      powerPs: object.powerPs,
      pollutionLevel: object.pollutionLevel,
      safetyEquipmentLevel: object.safetyEquipmentLevel,
      totalRangeMeanCustomer: object.totalRangeMeanCustomer,
      electricRangeMeanCustomer: object.electricRangeMeanCustomer,
      isPreproduction: object.stockStatus === PREPRODUCTION_FLAG,
      hasDiscountedPrice: hasDiscountedPrice(object.priceInformation, aemConfig),
      preprodImages: object.preprodImages || [],
      promotionalSettings: object.promotionalSettings || {},
      isPromotional: object.isPromotional || false,
    };
  };

  const singleModelList = (list, aemConfig) => ({
    data:
      list && Array.isArray(list)
        ? list.map((model) => {
            let predefinedData = {};
            if (model.attributes.vehicles.length === 1) {
              predefinedData = model.attributes.vehicles[0];
            }
            const data = Object.assign({}, model.attributes, predefinedData);
            data.priceInformation = setDiscountPricesInPriceInformation(
              data.priceInformation,
              model
            );

            return singleModelParser(data, aemConfig);
          })
        : [],
  });

  const getDisclaimerType = (name, defaultType) => {
    if (name === 'pollutionLevel' || name === 'safetyLevel') {
      return 'emissionIcon';
    }
    return defaultType;
  };

  const parseNoWltp = (vehicle, vehicleConfig) => {
    const config = vehicleConfig.reduce((acc, curr) => {
      const value = get(vehicle, curr.path);
      let returnValue = '';
      if (isObject(value)) {
        if (value.min === value.max) {
          returnValue = value.min;
        } else {
          returnValue = `${value.min} - ${value.max}`;
        }
      } else {
        returnValue = value;
      }
      acc[curr.name] = {};
      acc[curr.name].disclaimer = getDisclaimerType(curr.name, 'nefz');
      acc[curr.name].value = returnValue;
      acc[curr.name].label = curr.label;
      return acc;
    }, {});

    return config;
  };

  const parseWltp = (vehicle, vehicleConfig, aemConfig, types) => {
    const config = vehicleConfig.reduce((acc, curr) => {
      acc[curr.name] = {};
      acc[curr.name].label = curr.label;
      acc[curr.name].disclaimer = getDisclaimerType(curr.name, 'nefzCorelated');
      let value = '';
      let returnValue = '';

      if (types.rangeTypes.includes(curr.name)) {
        value = get(vehicle, curr.path[aemConfig.rangeDefaultDisplayType]);
        if (aemConfig.rangeDefaultDisplayType === 'wltp') {
          acc[curr.name].disclaimer = getDisclaimerType(curr.name, 'wltp');
        }
      }
      if (types.emissionTypes.includes(curr.name)) {
        value = get(vehicle, curr.path[aemConfig.co2DefaultDisplayType]);
        if (aemConfig.co2DefaultDisplayType === 'wltp') {
          acc[curr.name].disclaimer = getDisclaimerType(curr.name, 'wltp');
        }
      }
      if (types.consumptionTypes.includes(curr.name)) {
        value = get(
          vehicle,
          curr.path[aemConfig.fuelConsumptionDefaultDisplayType]
        );
        if (aemConfig.fuelConsumptionDefaultDisplayType === 'wltp') {
          acc[curr.name].disclaimer = getDisclaimerType(curr.name, 'wltp');
        }
      }

      if (isObject(value)) {
        if (value.min === value.max) {
          returnValue = value.min;
        } else {
          returnValue = `${value.min} - ${value.max}`;
        }
      } else {
        returnValue = value;
      }

      acc[curr.name].value = returnValue;

      return acc;
    }, {});

    return config;
  };

  const vehicleInfoLayer = (vehicle, config, aemConfig) => {
    if (vehicle.type === undefined) {
      return [];
    }
    let infoLayerObject = {};

    if (vehicle.type === 'none') {
      vehicle.type = 'NOHY';
    }

    if (vehicle.isWltp) {
      infoLayerObject = parseWltp(
        vehicle,
        config.wltp[vehicle.type],
        aemConfig,
        config
      );
    } else {
      infoLayerObject = parseNoWltp(vehicle, config.noWltp[vehicle.type]);
    }

    const order = [
      'consumption',
      'electricRange',
      'meanCustomerElRange',
      'meanCustomerRange',
      'emission',
      'electricityConsumption',
      'pollutionLevel',
      'safetyLevel',
    ];
    const orderedData = order
      .map((key) => {
        return {
          ...infoLayerObject[key],
          key,
        };
      })
      .filter((item) => item.label);
    return orderedData;
  };

  (function(){ if(typeof document !== 'undefined'){ var head$$1=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".model-card-list-item[data-v-03198faa]{min-height:335px}.model-card-list-item.preprod[data-v-03198faa]{min-height:auto}.model-card-list[data-v-03198faa]:hover{z-index:100}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head$$1.appendChild(style); } })();

  var StockcarListModelCardsList = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.modalOpened)?_c('div',{staticClass:"model-card-overlay"},[_c('div',{staticClass:"tw-flex tw-mb-200"},[_c('p',{staticClass:"model-card-title tw-text-grey-900 tw-text-m tw-w-3/5 tw-font-bold"},[_vm._v(" "+_vm._s(_vm.modelCardConfig.fullCardTitle)+" ")]),_vm._v(" "),_c('button',{staticClass:"model-card-overlay-close-button tw-absolute tw-m-200 tw-pin-t reset-button reset-button-hover tw-text-grey-800 icon-close-x",on:{"click":_vm.closeModal}})]),_vm._v(" "),_c('StockcarDisclaimer',{attrs:{"finance-disclaimer":true,"finance-data":_vm.getPriceInformation(_vm.modelCardConfig),"currency-format":_vm.aemConfig.currencyConfiguration,"co-emission":_vm.safeGet(_vm.modelCardConfig, 'nedc.co2Comb'),"i18n":_vm.i18n,"aem-config":_vm.aemConfig}})],1):_vm._e(),_vm._v(" "),_c('ul',{staticClass:"tw-flex tw-flex-wrap list-reset"},_vm._l((_vm.config),function(model,index){return _c('li',{key:index,staticClass:"model-card-list-item tw-flex tw-relative",class:[ _vm.getClasses(_vm.getCardVariant(index + 1, _vm.teaserPreprodImage(model))), _vm.isDisclaimerLayerOpen ? '' : 'model-card-list', ]},[_c('div',{staticClass:"model-card-container tw-w-full"},[_c('ModelCard',{attrs:{"url":'details/' + model.id,"find-out-more-i18n":"findOutMore","card-variant":_vm.getCardVariant(index + 1),"full-card-title":model.fullCardTitle,"short-card-title":model.shortCardTitle,"card-description":model.description,"car-price":model.hasDiscountedPrice
                ? _vm.getVehicleDicountedPrice(model)
                : _vm.getVehiclePrice(model),"brand":model.brand === 'bmwi' ? 'WBBI' : 'WBBM',"vehicle":model.vehicle,"url-i18n":_vm.aemConfig.buttonLabel,"shown-info":_vm.aemConfig.shownInfo,"currency-format":_vm.aemConfig.currencyConfiguration,"i18n":_vm.i18n,"disclaimers":_vm.aemDisclaimerConfig,"info-layer":_vm.vehicleInfoLayer(model, _vm.configInfoLayer, _vm.aemInfoLayer),"power":[model.powerKw, model.powerPs],"paint":model.paint,"preprodImages":_vm.teaserPreprodImage(model),"sa":_vm.prepareSa(model.interior, model.exterior, model.options, model.packages, model.line, model.modvar),"cosy-url":_vm.aemConfig.cosyUrl,"cosy-prefix":_vm.aemConfig.cosyPrefix,"cosy-token":_vm.aemConfig.cosyToken,"query":_vm.filtersQuery,"is-preproduction":model.isPreproduction,"has-discounted-price":model.hasDiscountedPrice,"dataConfig":model,"aem-config":_vm.aemConfig,"tracking-satelite-name":"stock_locator_results"},on:{"openDisclaimer":function($event){return _vm.openDisclaimer(model)},"openDisclaimerLayer":_vm.handleOpenCloseModal}},[_c('template',{slot:"model-card-wltp"},[_c('StockcarDisclaimer',{attrs:{"wltp-disclaimer":true,"aem-config":_vm.aemConfig,"i18n":_vm.i18n}})],1),_vm._v(" "),_c('template',{slot:"model-card-finance"},[_c('StockcarDisclaimer',{attrs:{"finance-disclaimer":true,"finance-data":_vm.getPriceInformation(model),"aem-config":_vm.aemConfig,"currency-format":_vm.aemConfig.currencyConfiguration,"co-emission":_vm.safeGet(model, 'nedc.co2Comb'),"i18n":_vm.i18n}})],1)],2)],1),_vm._v(" "),(_vm.isDisclaimerLayerOpen)?_c('StockcarDisclaimerLayer',{attrs:{"name":model.fullCardTitle,"config":_vm.aemConfig,"vehicle":model,"disclaimer-reference":_vm.getDisclaimerReference(model)},on:{"close":_vm.handleOpenCloseModal}}):_vm._e()],1)}),0)])},staticRenderFns: [],_scopeId: 'data-v-03198faa',
    name: 'StockcarListModelCardsList',
    components: {
      ModelCard,
      StockcarDisclaimer,
      StockcarDisclaimerLayer,
    },
    mixins: [
      stockcarDetecSizeMixin,
      stockcarContentMixin,
      stockcarListComponentMixin,
      stockcarTranslationComponent,
      PriceMixin,
      preprodImagesMixin,
      preprodImagesPropsMixin,
    ],
    props: {
      filtersParams: {
        type: Object,
        default() {
          return {};
        },
      },
    },
    data() {
      return {
        modelCardConfig: null,
        modalOpened: false,
        configInfoLayer,
        vehicleInfoLayer,
        aemInfoLayer: {
          co2DefaultDisplayType: this.aemConfig.co2DefaultDisplayType,
          fuelConsumptionDefaultDisplayType: this.aemConfig
            .fuelConsumptionDefaultDisplayType,
          rangeDefaultDisplayType: this.aemConfig.rangeDefaultDisplayType,
        },
        aemDisclaimerConfig: {
          nefzDisclaimerEnable: this.aemConfig.nefzDisclaimerEnable,
          nefzCorrelatedDisclaimerEnable: this.aemConfig
            .nefzCorrelatedDisclaimerEnable,
          wltpDisclaimerEnable: this.aemConfig.wltpDisclaimerEnable,
          emissionIconDisclaimerEnable: this.aemConfig
            .emissionIconDisclaimerEnable,
        },
        isDisclaimerLayerOpen: false,
      };
    },
    computed: {
      filtersQuery() {
        return {
          filters: JSON.stringify(this.filtersParams.filters),
          sorting: JSON.stringify(this.filtersParams.sorting),
        };
      },
    },
    methods: {
      closeModal() {
        this.modalOpened = false;
      },
      openDisclaimer(modelCardConfig) {
        this.modalOpened = true;
        this.modelCardConfig = modelCardConfig;
      },
      safeGet(object, path) {
        return get(object, path);
      },
      prepareSa(interior, exterior, options, packages = [], line = [], modvar = []) {
        let sa = [];
        return sa.concat(interior, exterior, options, packages, line, modvar).join();
      },
      getClasses(cardVariant) {
        return {
          'tw-w-full preprod': cardVariant === 'full',
          'lg:tw-w-1/3 sm:tw-w-1/2 tw-w-full': cardVariant === 'default',
          'lg:tw-w-2/3 tw-w-full':
            cardVariant === 'large' || cardVariant === 'duo',
        };
      },
      getCardVariant(index, preprodImages) {
        if(preprodImages && preprodImages.length > 0) {
          return 'full';
        }
        if (this.breakpoint === 'lg' || this.breakpoint === 'xl') {
          const loop = index % 10;

          return loop === 4 || (loop === 0 && index >= 10) ? 'large' : 'default';
        }
        if (this.breakpoint === 'xs') {
          return 'default';
        }
        return index % 5 === 0 ? 'large' : 'default';
      },
      getDisclaimerReference(vehicle) {
        switch (vehicle.type) {
          case 'PHEV':
            return this.aemConfig.shownInfo.phevDisclaimer;
            break;
          case 'MHEV':
            return this.aemConfig.shownInfo.mhevDisclaimer;
            break;
          default:
            return;
        }
      },
      handleOpenCloseModal() {
        return (this.isDisclaimerLayerOpen = !this.isDisclaimerLayerOpen);
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside ModelCardList component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".progress-bar[data-v-cb935b80]{width:100%;background-color:#e6e6e6}.progress-bar__track--blue[data-v-cb935b80]{height:4px;background-color:#1c69d4}.progress-bar__track--grey[data-v-cb935b80]{height:4px;background-color:#4d4d4d}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

















  var ProgressBar = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"progress-bar",attrs:{"data-component":"progress-bar","data-comparison-value":_vm.value}},[_c('div',{class:_vm.trackColor ? 'progress-bar__track--' + _vm.trackColor : 'progress-bar__track--blue',style:('width:' + _vm.value + '%')})])},staticRenderFns: [],_scopeId: 'data-v-cb935b80',
    name: 'ProgressBar',
    props: {
      value: {
        default: 0,
        type: Number,
      },
      trackColor: {
        default: '',
        type: String,
      },
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css="a.tw-font-bmw-bold[data-v-7065d04e]{font-family:bmwTypeNextBold,Arial,Helvetica,Roboto,sans-serif}.icon-arrow-left[data-v-7065d04e]:before,.icon-arrow-right[data-v-7065d04e]:before{color:#666}.active-page[data-v-7065d04e]:before{position:absolute;bottom:-7px;left:0;width:100%;height:4px;content:\"\";background:#1c69d4}.inactive-arrow[data-v-7065d04e]{pointer-events:none;opacity:0}.vehicle-count-wrapper[data-v-7065d04e]{width:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.progress-bar[data-v-7065d04e]{max-width:128px}@media (min-width:600px){max-width:144px}@media (min-width:1024px){max-width:176px}.btn-show-more i[data-v-7065d04e]{font-size:35px}.btn-goto-results[data-v-7065d04e]{max-width:100%;height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;min-height:50px;padding:4px;word-break:break-word}button.alt-grey[data-v-7065d04e]{color:#262626;background-color:transparent;border:1px solid #262626}button.alt-grey[data-v-7065d04e]:active,button.alt-grey[data-v-7065d04e]:focus,button.alt-grey[data-v-7065d04e]:hover{color:#262626;background-color:transparent;border:1px solid #262626;outline:1px solid #262626}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();
  var PageNavigation = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-w-full"},[_c('div',{staticClass:"tw-flex tw-flex-col tw-justify-center tw-font-bold"},[_c('div',{staticClass:"vehicle-count-wrapper tw-print-hidden"},[_c('TextBlock',{attrs:{"element":"p","role":"status"}},[_vm._v(_vm._s(_vm.progressBarLabel))]),_vm._v(" "),_c('ProgressBar',{attrs:{"value":_vm.vehiclesLoadedPercentage,"track-color":"grey"}})],1),_vm._v(" "),(_vm.vehiclesLoadedPercentage < 100 && _vm.canLoadMore)?_c('div',{staticClass:"btn-show-more tw-my-ng-600 tw-justify-center tw-items-center tw-flex",on:{"click":function($event){return _vm.changePage(_vm.currentPage + 1)}}},[_c('button',{staticClass:"button tw-focusable alt-grey btn-goto-results tw-font-bmw-bold tw-w-full md:tw-w-1/3 tw-m-0 tw-font-bmw-bold tw-text-button tw-inline-block"},[_vm._v(" "+_vm._s(_vm.buttonLabelShowMore)+" ")])]):_vm._e()])])},staticRenderFns: [],_scopeId: 'data-v-7065d04e',
    components: { ProgressBar, TextBlock },
    name: 'PageNavigation',
    props: {
      count: {
        type: Number,
        default: 10,
      },
      perPage: {
        type: Number,
        default: 10,
      },
      currentPage: {
        type: Number,
        default: 1,
      },
      buttonLabelShowMore: {
        type: String,
        default: '',
      },
      progressBarLabel: {
        type: String,
        default: '',
      },
      loadedItemsCount: {
        type: Number,
        default: 0,
      },
    },
    data() {
      return {
        lastPage: 1,
        allBlocksCount: 6,
        pages: [],
        calculatedPaths: {},
        classes:
          'tw-flex tw-h-500 tw-font-bmw-bold tw-justify-center tw-items-center tw-px-300 tw-page-block tw-text-xs tw-cursor-pointer tw-content-box',
      };
    },
    watch: {
      currentPage() {
        this.calculatePaginationValues();
      },
      perPage() {
        this.renderAll();
      },
      count() {
        this.renderAll();
      },
    },
    mounted() {
      this.renderAll();
    },
    computed: {
      canLoadMore() {
        return this.currentPage < this.lastPage;
      },
      totalShownVehicles() {
        if (this.currentPage * this.perPage > this.count) {
          return this.count;
        }
        return this.currentPage * this.perPage;
      },
      vehiclesLoadedPercentage() {
        return (this.loadedItemsCount / this.count) * 100;
      },
    },
    methods: {
      changePage(value) {
        this.$emit('change', value);
      },
      renderAll() {
        this.calculatePageNumber();
        this.calculatePaginationValues();
      },
      calculatePageNumber() {
        this.lastPage = Number.parseInt((this.count - 1) / this.perPage) + 1;
      },
      calculatePaginationValues() {
        const objectOnLeft = 2;
        let index = this.currentPage;
        if (
          this.currentPage + this.allBlocksCount - objectOnLeft >=
          this.lastPage
        ) {
          index = this.lastPage - this.allBlocksCount + objectOnLeft;
        } else if (this.currentPage === objectOnLeft) {
          index = 1;
        }

        if (this.calculatedPaths[index]) {
          this.pages = this.calculatedPaths[index];
        } else {
          const indexOfChangeStart = objectOnLeft - 1;
          const pageIndex = index - indexOfChangeStart;
          const start = pageIndex < 1 ? 1 : pageIndex;
          let stop =
            index +
            this.allBlocksCount -
            (pageIndex > indexOfChangeStart ? indexOfChangeStart : 0);
          if (this.allBlocksCount >= this.lastPage) {
            stop = this.lastPage + 1;
          }
          this.pages = [];
          for (let i = start; i < stop; i++) {
            let value = i;
            let title = i;
            const dots = '...';

            if (stop - 1 === i) {
              title = this.lastPage;
              value = this.lastPage;
            } else if (
              stop - 2 === i &&
              i !== this.lastPage - 1 &&
              this.lastPage > this.allBlocksCount
            ) {
              title = dots;
            }
            if (value < 10 && title !== dots) {
              title = `0${value}`;
            }
            this.pages.push({
              value,
              title,
              isDots: title === dots,
            });
          }
        }
      },
    },
  };

  /*
  @bmwkit/base-dropdown
  Version: 0.0.1
  (c) Interone
  */
  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".fade-enter-active[data-v-47fc717b],.fade-leave-active[data-v-47fc717b]{-webkit-transition:opacity .2s ease-in-out;transition:opacity .2s ease-in-out}.fade-enter[data-v-47fc717b],.fade-leave-to[data-v-47fc717b]{opacity:0}.title-container[data-v-47fc717b]{width:calc(100% - 65px)}.drop-content[data-v-47fc717b]{width:calc(100% + 4px);margin-left:-2px}.elipsis-title[data-v-47fc717b]{width:100%;text-overflow:ellipsis;white-space:nowrap}.dropdown-addon[data-v-47fc717b]{float:left}html[dir=rtl] .dropdown-addon[data-v-47fc717b]{float:right}@media (max-width:440px){max-width:250px}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();
















































  var BaseDropdown = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-w-full tw-bg-white tw-border-grey-500 tw-no-outline",attrs:{"tabindex":"-1"},on:{"blur":function($event){return _vm.close()},"click":function($event){return _vm.clickOpen()}}},[_c('div',{class:_vm.currentWrapperClasses},[_c('div',{staticClass:"dropdown-addon tw-w-auto tw-relative tw-h-full tw-bg-white",class:{ 'title-container': _vm.$slots.addon, 'tw-w-full': !_vm.$slots.addon }},[_c('div',{staticClass:"tw-p-100 tw-px-400 tw-cursor-pointer tw-relative tw-w-full tw-items-center tw-h-full"},[_c('div',{staticClass:"tw-flex tw-items-center tw-h-full"},[_c('span',{class:_vm.titleClasses},[_vm._v(" "+_vm._s(_vm.title)+" ")])])])]),_vm._v(" "),(_vm.$slots.addon)?_c('div',{staticClass:"tw-flex tw-justify-center tw-w-700 tw-h-full"},[_vm._t("addon")],2):_vm._e()]),_vm._v(" "),_c('div',{staticClass:"tw-w-full tw-relative"},[_c('transition',{attrs:{"name":"fade"}},[_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.showList),expression:"showList"}],staticClass:"tw-min-h-500 drop-content tw-absolute tw-z-100 tw-border-grey-500 tw-border-solid tw-bg-white"},[_vm._t("default")],2)])],1)])},staticRenderFns: [],_scopeId: 'data-v-47fc717b',
    name: 'BaseDropdown',
    props: {
      isOpen: {
        type: Boolean,
        default: false,
      },
      hasShadow: {
        type: Boolean,
        default: false,
      },
      title: {
        type: String,
        default: '',
      },
      dropdownId: {
        type: String,
        default: '0',
      },
      border: {
        type: Boolean,
        default: true,
      },
      titleClasses: {
        type: Array,
        default: () => [
          'tw-font-bmw-light',
          'tw-text-s',
          'elipsis-title',
          'tw-overflow-hidden',
        ],
      },
      wrapperClasses: {
        type: Array,
        default: () => ['tw-w-full', 'tw-h-600', 'tw-bg-white'],
      },
      device: {
        type: String,
        default: '',
      },
    },
    data() {
      return {
        showList: false,
        currentWrapperClasses: [],
      };
    },
    watch: {
      isOpen() {
        this.showList = this.isOpen;
      },
      showList() {
        this.$emit('openstatus', this.showList, this.dropdownId);
      },
      wrapperClasses() {
        this.currentWrapperClasses = this.getWrapperClasses(this.border);
      },
    },
    mounted() {
      this.showList = this.isOpen;
      this.currentWrapperClasses = this.getWrapperClasses(this.border);
    },
    methods: {
      toggle() {
        this.showList = !this.showList;
      },
      clickOpen() {
        console.log('clickOpen');
        this.showList = true;
      },
      close() {
        this.showList = false;
      },
      setDropdownState($event) {
        console.log('setDropdownState');
        $event.stopPropagation();
      },
      getWrapperClasses(border) {
        let classes = [...this.wrapperClasses];
        if (border) {
          classes.push();
        }
        return classes;
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside BaseSelect component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  /*
  @bmwkit/base-select
  Version: 0.0.1
  (c) Interone
  */

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".base-select{height:50px;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.base-select-shadow{-webkit-box-shadow:0 10px 17px 0 rgba(0,0,0,.12),0 4px 8px 0 rgba(0,0,0,.15);box-shadow:0 10px 17px 0 rgba(0,0,0,.12),0 4px 8px 0 rgba(0,0,0,.15)}.base-select.active{position:relative}.base-select.active:before{position:absolute;top:-1px;left:-1px;z-index:10;width:4px;height:calc(100% + 2px);content:\"\";background:#1c69d4}.base-select .base-dropdown-list-wrapper{max-height:240px;overflow-y:auto}.base-dropdown.dropdown-open .drop-content,.base-select.dropdown-open .drop-content{width:calc(100% + 2px);margin-left:-1px;border-color:transparent;border-top:2px solid #f2f2f2;-webkit-box-shadow:0 10px 17px 0 rgba(0,0,0,.12),0 4px 8px 0 rgba(0,0,0,.15);box-shadow:0 10px 17px 0 rgba(0,0,0,.12),0 4px 8px 0 rgba(0,0,0,.15)}.base-dropdown.dropdown-open,.base-select.dropdown-open{border-color:transparent;-webkit-box-shadow:0 10px 17px 0 rgba(0,0,0,.12),0 1px 8px 0 rgba(0,0,0,.15);box-shadow:0 10px 17px 0 rgba(0,0,0,.12),0 1px 8px 0 rgba(0,0,0,.15)}html[dir=rtl] .base-select.active:before{right:-2px;left:auto}html[dir=rtl] .base-dropdown.dropdown-open .drop-content,html[dir=rtl] .base-select.dropdown-open .drop-content{margin-right:-2px;margin-left:auto}.icon-arrow-down:before,.icon-arrow-up:before{color:#8e8e8e}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var BaseSelect = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"base-select tw-no-outline",class:{ 'dropdown-open': _vm.showList, 'base-select-shadow': _vm.showButtonShadow, 'tw-border-100 tw-border-grey-500': _vm.border, 'tw-border-100 tw-border-white': _vm.showButtonShadow || !_vm.border, },on:{"mouseover":function($event){_vm.hover = true;},"mouseleave":function($event){_vm.hover = false;}}},[_c('BaseDropdown',{attrs:{"is-open":_vm.showList,"title":_vm.titleToShow,"border":_vm.border,"wrapper-classes":_vm.wrapperClasses,"dropdown-id":_vm.dropdownId,"has-shadow":!!(_vm.showList || _vm.addShadow),"device":_vm.device},on:{"openstatus":_vm.changedStatus}},[(_vm.items.length > 0)?_c('ul',{staticClass:"base-dropdown-list-wrapper tw-list-reset tw-z-50 tw-w-full tw-bg-white tw-bg-white tw-p-400 tw-mb-0"},_vm._l((_vm.items),function(item,index){return _c('li',{key:index,staticClass:"tw-cursor-pointer tw-option tw-min-h-500 tw-bg-white tw-border-grey-200 tw-mb-0",on:{"click":function($event){return _vm.emitSelectValue(index);}}},[_vm._t("default",function(){return [_vm._v(" "+_vm._s(item)+" ")]},{"item":item})],2)}),0):_vm._e(),_vm._v(" "),(_vm.items.length === 0)?_c('div',{staticClass:"tw-p-100 tw-cursor-pointer tw-option tw-min-h-500 tw-bg-white tw-border-grey-200 tw-mb-0"},[_vm._v(" Options not found. ")]):_vm._e(),_vm._v(" "),_c('template',{slot:"addon"},[_c('div',{staticClass:"tw-flex tw-justify-center tw-items-center tw-h-full"},[_c('i',{staticClass:"tw-text-icon-xl tw-text-right tw-w-full",class:{ 'icon-arrow-down': !_vm.showList, 'icon-arrow-up': _vm.showList }})])])],2)],1)},staticRenderFns: [],
    name: 'BaseSelect',
    components: { BaseDropdown },
    props: {
      items: {
        type: Array,
        default() {
          return [];
        },
      },
      isOpen: {
        type: Boolean,
        default: false,
      },
      shadowButton: {
        type: Boolean,
        default: false,
      },
      title: {
        type: String,
        default: '',
      },
      directValueToTitle: {
        type: String,
        default: '',
      },
      wrapperClasses: {
        type: Array,
        default() {
          return ['tw-w-full', 'tw-h-600', 'tw-bg-white', 'tw-border-grey-500'];
        },
      },
      border: {
        type: Boolean,
        default: true,
      },
      showValue: {
        type: Boolean,
        default: false,
      },
      dropdownId: {
        type: String,
        default: '0',
      },
      i18n: {
        type: Object,
        default() {
          return null;
        },
      },
    },
    data() {
      return {
        hover: false,
        selectedValue: '',
        showList: false,
        itemsKeys: [],
        addShadow: false,
        device: '',
        activeBreakpoint: '',
      };
    },
    computed: {
      titleToShow() {
        if(this.showValue || this.directValueToTitle) {
          if (this.showValue) {
            return (this.i18n ? this.i18n[this.items[this.selectedValue]] : (this.items[this.selectedValue] || this.title));
          }
          return this.directValueToTitle;
        }
        return this.title;
      },
      showButtonShadow() {
        return this.shadowButton || this.hover;
      }
    },
    created() {
      this.activeBreakpoint = EventBus$1.$data.activeBreakpoint;
      this.device = this.prepareDevice();
    },
    mounted() {
      this.showList = this.isOpen;
      this.itemsKeys = Object.keys(this.items);
      EventBus$1.$on('breakpointChange', breakpoint => {
        this.activeBreakpoint = breakpoint;
        this.device = this.prepareDevice();
      });
    },
    methods: {
      prepareDevice() {
        if (['xs', 'sm'].indexOf(this.activeBreakpoint) !== -1) {
          return 'mobile';
        }
        return '';
      },
      emitSelectValue(value) {
        this.$emit('select', value, this.dropdownId);
        this.addShadow = value;
        this.selectedValue = value;
      },
      changedStatus(value) {
        this.showList = value;
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside BaseSelect component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  /*
  base-core
  Version: 0.0.1
  (c) Interone
  */

  var TrackingMixin = {
    props: {
      namespace: {
        type: String,
        default: '',
      },
    },
    methods: {
      prepareTrackingEventName(event) {
        const namespace = this.namespace ? `.${this.namespace}` : '';
        return `${event}.${this.$options.name}${namespace}`;
      },
      trackAction(eventName, data) {
        this.tracking.dispatch({
          name: this.prepareTrackingEventName(eventName),
          data,
          config: this.tracking.componentConfig,
        });
      },
    },
    inject: {
      tracking: {
        default: {
          dispatch: () => ({}),
          componentConfig: {},
        },
      },
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css="a.tw-font-bmw-bold{font-family:bmwTypeNextWeb,Arial,Helvetica,Roboto,sans-serif;font-weight:700}.sorting-select{min-width:225px}.sorting-base-select.dropdown-open,.sorting-base-select.dropdown-open .drop-content{border-color:transparent;-webkit-box-shadow:0 10px 17px 0 rgba(0,0,0,.12),0 4px 8px 0 rgba(0,0,0,.15);box-shadow:0 10px 17px 0 rgba(0,0,0,.12),0 4px 8px 0 rgba(0,0,0,.15)}.sorting-base-select.dropdown-open .drop-content{left:-2px;width:calc(100% + 4px);margin:0;border-top:2px solid #f2f2f2}.sorting-item{word-break:break-all}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var StockcarListSorting = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-w-full tw-h-full tw-flex tw-flex-wrap tw-items-center tw-mb-200 tw-mt-600 sorting-container tw-border-b-100 tw-border-grey-300 tw-font-bmw-light"},[_c('div',{staticClass:"tw-w-1/3 tw-hidden lg:tw-flex"},[_c('span',{staticClass:"tw-text-2xs tw-text-grey-400",domProps:{"innerHTML":_vm._s(_vm.countText)}})]),_vm._v(" "),_c('div',{staticClass:"tw-w-full lg:tw-w-1/3 tw-flex tw-justify-center tw-mt-auto tw-relative tw-h-full"},_vm._l((_vm.options),function(item,index){return _c('a',{key:index,staticClass:"tw-font-bmw-bold tw-text-grey-400 tw-inline-block tw-w-650 tw-text-xs tw-text-center tw-cursor-pointer tw-h-500 tw-m-0 tw-p-0 tw-transition-all-ease",class:{ 'active tw-text-grey-900 tw-border-b-400 tw-border-blue-100': item === _vm.currentOption, },on:{"click":function($event){return _vm.setCurrentOption(item);}}},[_vm._v(" "+_vm._s(item)+" ")])}),0),_vm._v(" "),_c('div',{staticClass:"tw-w-1/3 tw-hidden lg:tw-flex tw-justify-end"},[_c('span',{staticClass:"tw-text-2xs tw-inline-flex tw-w-1/4 tw-items-center tw-justify-end tw-mr-100 tw-text-grey-400"},[_vm._v(" "+_vm._s(_vm.i18n.sortBy)+" ")]),_vm._v(" "),_c('div',{staticClass:"sorting-select inline-flex"},[_c('BaseSelect',{staticClass:"sorting-base-select tw-no-outline",attrs:{"items":_vm.sortingFields,"border":false,"direct-value-to-title":_vm.i18n[_vm.initialSortingField],"i18n":_vm.i18n},on:{"select":_vm.setSortingField},scopedSlots:_vm._u([{key:"default",fn:function({ item }){return _c('div',{},[_c('span',{staticClass:"sorting-item tw-text-2xs tw-text-grey-500 tw-font-bmw-bold"},[_vm._v(" "+_vm._s(_vm.i18n[item])+" ")])])}}])})],1)])])},staticRenderFns: [],
    name: 'StockcarListSorting',
    components: { BaseSelect },
    mixins: [stockcarTranslationComponent, TrackingMixin],
    props: {
      countText: {
        type: String,
        default: '',
      },
      options: {
        type: Array,
        default() {
          return [];
        },
      },
      initialSortingField: {
        type: String,
        default: '',
      },
      sorting: {
        type: Array,
        default() {
          return [];
        },
      },
    },
    data() {
      return {
        currentOption: 0,
      };
    },
    computed: {
      sortingFields() {
        return this.sorting.map(item => item.label);
      }
    },
    mounted() {
      this.currentOption = this.options[1];
    },
    methods: {
      setCurrentOption(item) {
        this.currentOption = item;
        this.emitUpdate();
      },
      setSortingField(field) {
        this.emitUpdate(this.sortingFields[field]);
      },
      emitUpdate(field) {
        this.$emit('update', {
          perPage: this.currentOption,
          sortingField: field,
        });
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(`${err.stack}\n\nfound in ${info} inside Stockcar component`);
      this.$emit('error', err);
      return false;
    },
  };

  /*
  @bmwkit/base-select-button
  Version: 0.0.1
  (c) Interone
  */
  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".select-button-icon[data-v-3adce938]:before{position:relative;top:-2px;font-size:30px;color:#fff}.selected .select-button-icon[data-v-3adce938]:before{color:#1c69d4}.select-button-label[data-v-3adce938]{word-break:break-word;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}@media (max-width:992px){.select-button-label[data-v-3adce938]{width:calc(100% - 50px);margin:0 auto}}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

















  var BaseSelectButton = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-border-200 tw-font-bmw-bold tw-text-xs tw-h-650",class:_vm.getClasses(),on:{"click":function($event){return _vm.changedStatus()}}},[_vm._m(0),_vm._v(" "),_c('div',{staticClass:"select-button-label tw-text-button tw-px-200 sm:tw-px-400 tw-flex tw-justify-center tw-items-center tw-flex-1 tw-text-center tw-h-full"},[_vm._t("default")],2)])},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"md:tw-pl-200 tw-flex tw-items-center tw-absolute tw-h-650"},[_c('i',{staticClass:"icon-checkmark select-button-icon"})])}],_scopeId: 'data-v-3adce938',
    name: 'BaseSelectButton',
    props: {
      isDisabled: {
        type: Boolean,
        default: false,
      },
      initialStatus: {
        type: Boolean,
        default: false,
      },
    },
    data() {
      return {
        isSelect: false,
        disabledClasses: [
          'tw-border-grey-200',
          'tw-text-grey-400',
          'tw-disabled',
        ],
        selectedClasses: [
          'tw-border-primary-500',
          'tw-text-primary-500',
          'selected',
        ],
        classes: ['tw-border-grey-400'],
      };
    },
    watch: {
      initialStatus() {
        this.isSelect = this.initialStatus;
      },
    },
    mounted() {
      this.isSelect = this.initialStatus;
    },
    methods: {
      changedStatus() {
        if (!this.isDisabled) {
          this.sendEvent(this.isSelect);
        }
      },
      sendEvent(value) {
        this.$emit('buttonclick', value);
      },
      getClasses() {
        if (this.isDisabled) {
          return this.disabledClasses;
        }
        if (this.isSelect) {
          return this.selectedClasses;
        }
        return this.classes;
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside BaseSelectButton component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  /*
  @bmwkit/button-group
  Version: 0.0.1
  (c) Interone
  */

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var ButtonGroup = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"button-group"},[_c('div',{staticClass:"tw-w-full tw-flex tw-flex-wrap"},_vm._l((_vm.config),function(item,index){return _c('div',{key:index,staticClass:"tw-p-200",class:_vm.getWidthClass(item.type)},[_c('BaseSelectButton',{ref:"select_button",refInFor:true,staticClass:"tw-border-solid tw-relative",attrs:{"is-disabled":(item.disabled || _vm.disabled) && !_vm.initialSelectedValue[item.label],"initial-status":_vm.initialSelectedValue[item.label]},on:{"buttonclick":function($event){return _vm.clickAction(item.label)}}},[_vm._v(" "+_vm._s(_vm.i18n[item.label] ? _vm.i18n[item.label] : item.label)+" ")])],1)}),0)])},staticRenderFns: [],
    name: 'ButtonGroup',
    components: { BaseSelectButton },
    props: {
      config: {
        type: Array,
        required: true,
      },
      initialSelectedValue: {
        type: Object,
        default() {
          return {};
        },
      },
      disabled: {
        type: Boolean,
        default: false,
      },
      i18n: {
        type: Object,
        default() {
          return {};
        },
      },
    },
    methods: {
      getWidthClass(type) {
        if (type === 'wide') {
          return 'tw-w-full lg:tw-w-1/3';
        }
        return 'tw-w-full md:tw-w-1/3 sm:tw-w-1/2';
      },
      clickAction(label) {
        const status = !!this.initialSelectedValue[label];
        this.$emit('buttonChanged', { label, state: !status });
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside ButtonGroup component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  /*
  @bmwkit/base-checkbox
  Version: 0.0.1
  (c) Interone
  */
  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".base-checkbox-label[data-v-7761202d]{-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.base-checkbox-block[data-v-7761202d]{width:24px;min-width:24px;height:24px;min-height:24px;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.icon-checkmark[data-v-7761202d]{font-size:28px}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();






































  var BaseCheckbox = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"base-checkbox tw-flex tw-items-center tw-cursor-pointer tw-font-sans-BlinkMacSystemFont",class:{'tw-opacity-30': _vm.disabled},on:{"click":function($event){return _vm.select(_vm.selected);}}},[_c('div',{staticClass:"base-checkbox-block tw-border-grey-300 tw-flex tw-border-solid tw-items-center tw-justify-center tw-border-200 tw-bg-cover",style:({
        backgroundColor: _vm.backgroundColor,
        backgroundImage: _vm.selected ? `url(${_vm.imageUrl})` : '',
        borderWidth: _vm.selected && !_vm.fixedColor.length ? '0px' : '2px'
      })},[(_vm.selected && _vm.highlightCheckmark)?_c('img',{attrs:{"src":"/etc.clientlibs/ds2-webcomponents/clientlibs/clientlib/resources/img/check_icon_colors.svg","alt":""}}):_vm._e(),_vm._v(" "),(_vm.selected && !_vm.highlightCheckmark)?_c('div',{staticClass:"icon-checkmark tw-text-white tw-opacity-70"}):_vm._e()]),_vm._v(" "),_c('div',{staticClass:"base-checkbox-label tw-flex",class:{ 'base-checkbox-label-active': _vm.selected, [_vm.labelClass]: true, [_vm.labelClassSelected]: _vm.selected, }},[_vm._t("default")],2)])},staticRenderFns: [],_scopeId: 'data-v-7761202d',
    name: 'BaseCheckbox',
    props: {
      selected: {
        type: Boolean,
        default: false,
      },
      disabled: {
        type: Boolean,
        default: false,
      },
      color: {
        type: String,
        default: '#1C69D4',
      },
      fixedColor: {
        type: String,
        default: '',
      },
      imageUrl: {
        type: String,
        default: '',
      },
      highlightCheckmark: {
        type: Boolean,
        default: false,
      },
      onChange: {
        type: Function,
        default: () => {},
      },
      labelClass: {
        type: String,
        default: 'tw-text-2xs tw-text-grey-500 tw-font-bmw-bold',
      },
      labelClassSelected: {
        type: String,
        default: 'tw-text-grey-900',
      }
    },
    computed: {
      backgroundColor() {
        if (this.selected && !this.fixedColor.length && !this.imageUrl) {
          return this.color;
        } if (this.imageUrl) {
          return 'transparent';
        }
        return this.fixedColor;
      }
    },
    methods: {
      select(selected) {
        if (!this.disabled) {
          this.onChange(selected);
        }
      }
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside BaseCheckbox component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  /*
  @bmwkit/range-slider
  Version: 0.0.1
  (c) Interone
  */

  var commonjsGlobal$1 = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports$1 (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
  }

  function createCommonjsModule$1(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var vueSliderComponent_umd_min = createCommonjsModule$1(function (module, exports) {
  (function(t,e){module.exports=e(Vue);})("undefined"!==typeof self?self:commonjsGlobal$1,function(t){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n});},r.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0});},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"===typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t["default"]}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s="fb15")}({2350:function(t,e){function r(t,e){var r=t[1]||"",o=t[3];if(!o)return r;if(e&&"function"===typeof btoa){var i=n(o),s=o.sources.map(function(t){return "/*# sourceURL="+o.sourceRoot+t+" */"});return [r].concat(s).concat([i]).join("\n")}return [r].join("\n")}function n(t){var e=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,"+e;return "/*# "+r+" */"}t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=r(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,r){"string"===typeof t&&(t=[[null,t,""]]);for(var n={},o=0;o<this.length;o++){var i=this[o][0];"number"===typeof i&&(n[i]=!0);}for(o=0;o<t.length;o++){var s=t[o];"number"===typeof s[0]&&n[s[0]]||(r&&!s[2]?s[2]=r:r&&(s[2]="("+s[2]+") and ("+r+")"),e.push(s));}},e};},"499e":function(t,e,r){function n(t,e){for(var r=[],n={},o=0;o<e.length;o++){var i=e[o],s=i[0],a=i[1],u=i[2],l=i[3],c={id:t+":"+o,css:a,media:u,sourceMap:l};n[s]?n[s].parts.push(c):r.push(n[s]={id:s,parts:[c]});}return r}r.r(e),r.d(e,"default",function(){return h});var o="undefined"!==typeof document;if("undefined"!==typeof DEBUG&&DEBUG&&!o)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var i={},s=o&&(document.head||document.getElementsByTagName("head")[0]),a=null,u=0,l=!1,c=function(){},d=null,f="data-vue-ssr-id",p="undefined"!==typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function h(t,e,r,o){l=r,d=o||{};var s=n(t,e);return y(s),function(e){for(var r=[],o=0;o<s.length;o++){var a=s[o],u=i[a.id];u.refs--,r.push(u);}e?(s=n(t,e),y(s)):s=[];for(o=0;o<r.length;o++){u=r[o];if(0===u.refs){for(var l=0;l<u.parts.length;l++)u.parts[l]();delete i[u.id];}}}}function y(t){for(var e=0;e<t.length;e++){var r=t[e],n=i[r.id];if(n){n.refs++;for(var o=0;o<n.parts.length;o++)n.parts[o](r.parts[o]);for(;o<r.parts.length;o++)n.parts.push(m(r.parts[o]));n.parts.length>r.parts.length&&(n.parts.length=r.parts.length);}else{var s=[];for(o=0;o<r.parts.length;o++)s.push(m(r.parts[o]));i[r.id]={id:r.id,refs:1,parts:s};}}}function v(){var t=document.createElement("style");return t.type="text/css",s.appendChild(t),t}function m(t){var e,r,n=document.querySelector("style["+f+'~="'+t.id+'"]');if(n){if(l)return c;n.parentNode.removeChild(n);}if(p){var o=u++;n=a||(a=v()),e=g.bind(null,n,o,!1),r=g.bind(null,n,o,!0);}else n=v(),e=k.bind(null,n),r=function(){n.parentNode.removeChild(n);};return e(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;e(t=n);}else r();}}var b=function(){var t=[];return function(e,r){return t[e]=r,t.filter(Boolean).join("\n")}}();function g(t,e,r,n){var o=r?"":n.css;if(t.styleSheet)t.styleSheet.cssText=b(e,o);else{var i=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i);}}function k(t,e){var r=e.css,n=e.media,o=e.sourceMap;if(n&&t.setAttribute("media",n),d.ssrId&&t.setAttribute(f,e.id),o&&(r+="\n/*# sourceURL="+o.sources[0]+" */",r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),t.styleSheet)t.styleSheet.cssText=r;else{while(t.firstChild)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r));}}},"4abb":function(t,e,r){var n=r("df80");"string"===typeof n&&(n=[[t.i,n,""]]),n.locals&&(t.exports=n.locals);var o=r("499e").default;o("3e7284f8",n,!0,{sourceMap:!1,shadowMode:!1});},"4ed8":function(t,e,r){var n=r("ae61");"string"===typeof n&&(n=[[t.i,n,""]]),n.locals&&(t.exports=n.locals);var o=r("499e").default;o("57c2b2f0",n,!0,{sourceMap:!1,shadowMode:!1});},"556c":function(t,e,r){var n=r("d5ac");"string"===typeof n&&(n=[[t.i,n,""]]),n.locals&&(t.exports=n.locals);var o=r("499e").default;o("f3ffc7f8",n,!0,{sourceMap:!1,shadowMode:!1});},"65d9":function(t,e,r){/**
    * vue-class-component v7.0.1
    * (c) 2015-present Evan You
    * @license MIT
    */function n(t){return t&&"object"===typeof t&&"default"in t?t["default"]:t}Object.defineProperty(e,"__esModule",{value:!0});var o=n(r("8bbf")),i="undefined"!==typeof Reflect&&Reflect.defineMetadata&&Reflect.getOwnMetadataKeys;function s(t,e){a(t,e),Object.getOwnPropertyNames(e.prototype).forEach(function(r){a(t.prototype,e.prototype,r);}),Object.getOwnPropertyNames(e).forEach(function(r){a(t,e,r);});}function a(t,e,r){var n=r?Reflect.getOwnMetadataKeys(e,r):Reflect.getOwnMetadataKeys(e);n.forEach(function(n){var o=r?Reflect.getOwnMetadata(n,e,r):Reflect.getOwnMetadata(n,e);r?Reflect.defineMetadata(n,o,t,r):Reflect.defineMetadata(n,o,t);});}var u={__proto__:[]},l=u instanceof Array;function c(t){return function(e,r,n){var o="function"===typeof e?e:e.constructor;o.__decorators__||(o.__decorators__=[]),"number"!==typeof n&&(n=void 0),o.__decorators__.push(function(e){return t(e,r,n)});}}function d(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return o.extend({mixins:t})}function f(t){var e=typeof t;return null==t||"object"!==e&&"function"!==e}function p(t,e){var r=e.prototype._init;e.prototype._init=function(){var e=this,r=Object.getOwnPropertyNames(t);if(t.$options.props)for(var n in t.$options.props)t.hasOwnProperty(n)||r.push(n);r.forEach(function(r){"_"!==r.charAt(0)&&Object.defineProperty(e,r,{get:function(){return t[r]},set:function(e){t[r]=e;},configurable:!0});});};var n=new e;e.prototype._init=r;var o={};return Object.keys(n).forEach(function(t){void 0!==n[t]&&(o[t]=n[t]);}),o}var h=["data","beforeCreate","created","beforeMount","mounted","beforeDestroy","destroyed","beforeUpdate","updated","activated","deactivated","render","errorCaptured","serverPrefetch"];function y(t,e){void 0===e&&(e={}),e.name=e.name||t._componentTag||t.name;var r=t.prototype;Object.getOwnPropertyNames(r).forEach(function(t){if("constructor"!==t)if(h.indexOf(t)>-1)e[t]=r[t];else{var n=Object.getOwnPropertyDescriptor(r,t);void 0!==n.value?"function"===typeof n.value?(e.methods||(e.methods={}))[t]=n.value:(e.mixins||(e.mixins=[])).push({data:function(){var e;return e={},e[t]=n.value,e}}):(n.get||n.set)&&((e.computed||(e.computed={}))[t]={get:n.get,set:n.set});}}),(e.mixins||(e.mixins=[])).push({data:function(){return p(this,t)}});var n=t.__decorators__;n&&(n.forEach(function(t){return t(e)}),delete t.__decorators__);var a=Object.getPrototypeOf(t.prototype),u=a instanceof o?a.constructor:o,l=u.extend(e);return v(l,t,u),i&&s(l,t),l}function v(t,e,r){Object.getOwnPropertyNames(e).forEach(function(n){if("prototype"!==n){var o=Object.getOwnPropertyDescriptor(t,n);if(!o||o.configurable){var i=Object.getOwnPropertyDescriptor(e,n);if(!l){if("cid"===n)return;var s=Object.getOwnPropertyDescriptor(r,n);if(!f(i.value)&&s&&s.value===i.value)return}Object.defineProperty(t,n,i);}}});}function m(t){return "function"===typeof t?y(t):function(e){return y(e,t)}}m.registerHooks=function(t){h.push.apply(h,t);},e.default=m,e.createDecorator=c,e.mixins=d;},"8bbf":function(e,r){e.exports=t;},ae61:function(t,e,r){e=t.exports=r("2350")(!1),e.push([t.i,".vue-slider-dot{position:absolute;will-change:transform;-webkit-transition:all 0s;transition:all 0s;z-index:5}.vue-slider-dot-tooltip{position:absolute;visibility:hidden}.vue-slider-dot-tooltip-show{visibility:visible}.vue-slider-dot-tooltip-top{top:-10px;left:50%;-webkit-transform:translate(-50%,-100%);transform:translate(-50%,-100%)}.vue-slider-dot-tooltip-bottom{bottom:-10px;left:50%;-webkit-transform:translate(-50%,100%);transform:translate(-50%,100%)}.vue-slider-dot-tooltip-left{left:-10px;top:50%;-webkit-transform:translate(-100%,-50%);transform:translate(-100%,-50%)}.vue-slider-dot-tooltip-right{right:-10px;top:50%;-webkit-transform:translate(100%,-50%);transform:translate(100%,-50%)}",""]);},d5ac:function(t,e,r){e=t.exports=r("2350")(!1),e.push([t.i,".vue-slider-marks{position:relative;width:100%;height:100%}.vue-slider-mark{position:absolute;z-index:1}.vue-slider-ltr .vue-slider-mark,.vue-slider-rtl .vue-slider-mark{width:0;height:100%;top:50%}.vue-slider-ltr .vue-slider-mark-step,.vue-slider-rtl .vue-slider-mark-step{top:0}.vue-slider-ltr .vue-slider-mark-label,.vue-slider-rtl .vue-slider-mark-label{top:100%;margin-top:10px}.vue-slider-ltr .vue-slider-mark{-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.vue-slider-ltr .vue-slider-mark-step{left:0}.vue-slider-ltr .vue-slider-mark-label{left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%)}.vue-slider-rtl .vue-slider-mark{-webkit-transform:translate(50%,-50%);transform:translate(50%,-50%)}.vue-slider-rtl .vue-slider-mark-step{right:0}.vue-slider-rtl .vue-slider-mark-label{right:50%;-webkit-transform:translateX(50%);transform:translateX(50%)}.vue-slider-btt .vue-slider-mark,.vue-slider-ttb .vue-slider-mark{width:100%;height:0;left:50%}.vue-slider-btt .vue-slider-mark-step,.vue-slider-ttb .vue-slider-mark-step{left:0}.vue-slider-btt .vue-slider-mark-label,.vue-slider-ttb .vue-slider-mark-label{left:100%;margin-left:10px}.vue-slider-btt .vue-slider-mark{-webkit-transform:translate(-50%,50%);transform:translate(-50%,50%)}.vue-slider-btt .vue-slider-mark-step{top:0}.vue-slider-btt .vue-slider-mark-label{top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.vue-slider-ttb .vue-slider-mark{-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.vue-slider-ttb .vue-slider-mark-step{bottom:0}.vue-slider-ttb .vue-slider-mark-label{bottom:50%;-webkit-transform:translateY(50%);transform:translateY(50%)}.vue-slider-mark-label,.vue-slider-mark-step{position:absolute}",""]);},df80:function(t,e,r){e=t.exports=r("2350")(!1),e.push([t.i,".vue-slider{position:relative;-webkit-box-sizing:content-box;box-sizing:content-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block;-ms-touch-action:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.vue-slider-disabled{pointer-events:none}.vue-slider-rail{position:relative;width:100%;height:100%;-webkit-transition-property:width,height,left,right,top,bottom;transition-property:width,height,left,right,top,bottom}.vue-slider-process{position:absolute;z-index:1}.vue-slider-sr-only{clip:rect(1px,1px,1px,1px);height:1px;width:1px;overflow:hidden;position:absolute!important}",""]);},fb15:function(t,e,r){var n;(r.r(e),"undefined"!==typeof window)&&((n=window.document.currentScript)&&(n=n.src.match(/(.+\/)[^\/]+\.js(\?.*)?$/))&&(r.p=n[1]));function o(t,e,r,n){var o,i=arguments.length,s=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"===typeof Reflect&&"function"===typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(i<3?o(s):i>3?o(e,r,s):o(e,r))||s);return i>3&&s&&Object.defineProperty(e,r,s),s}var i=r("8bbf"),s=r.n(i),a=r("65d9"),u=r.n(a);var l="undefined"!==typeof Reflect&&"undefined"!==typeof Reflect.getMetadata;function c(t,e,r){l&&(Array.isArray(t)||"function"===typeof t||"undefined"!==typeof t.type||(t.type=Reflect.getMetadata("design:type",e,r)));}function d(t,e){return void 0===e&&(e={}),function(r,n){c(e,r,n),Object(a["createDecorator"])(function(r,n){(r.props||(r.props={}))[n]=e,r.model={prop:n,event:t||n};})(r,n);}}function f(t){return void 0===t&&(t={}),function(e,r){c(t,e,r),Object(a["createDecorator"])(function(e,r){(e.props||(e.props={}))[r]=t;})(e,r);}}function p(t,e){void 0===e&&(e={});var r=e.deep,n=void 0!==r&&r,o=e.immediate,i=void 0!==o&&o;return Object(a["createDecorator"])(function(e,r){"object"!==typeof e.watch&&(e.watch=Object.create(null));var o=e.watch;"object"!==typeof o[t]||Array.isArray(o[t])?"undefined"===typeof o[t]&&(o[t]=[]):o[t]=[o[t]],o[t].push({handler:r,deep:n,immediate:i});})}r("4ed8");function h(t){return h="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"===typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},h(t)}function y(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function v(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n);}}function m(t,e,r){return e&&v(t.prototype,e),r&&v(t,r),t}function b(t,e){return !e||"object"!==h(e)&&"function"!==typeof e?g(t):e}function g(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function k(t){return k=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},k(t)}function x(t,e){if("function"!==typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&w(t,e);}function w(t,e){return w=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},w(t,e)}var O=function(t){function e(){return y(this,e),b(this,k(e).apply(this,arguments))}return x(e,t),m(e,[{key:"dragStart",value:function(t){if(this.disabled)return !1;this.$emit("drag-start");}},{key:"render",value:function(){var t=arguments[0];return t("div",{ref:"dot",class:this.dotClasses,on:{mousedown:this.dragStart,touchstart:this.dragStart}},[this.$slots.dot||t("div",{class:this.handleClasses,style:this.dotStyle}),"none"!==this.tooltip?t("div",{class:this.tooltipClasses},[this.$slots.tooltip||t("div",{class:this.tooltipInnerClasses,style:this.tooltipStyle},[t("span",{class:"vue-slider-dot-tooltip-text"},[this.tooltipValue])])]):null])}},{key:"dotClasses",get:function(){return ["vue-slider-dot",{"vue-slider-dot-disabled":this.disabled,"vue-slider-dot-focus":this.focus}]}},{key:"handleClasses",get:function(){return ["vue-slider-dot-handle",{"vue-slider-dot-handle-disabled":this.disabled,"vue-slider-dot-handle-focus":this.focus}]}},{key:"tooltipClasses",get:function(){return ["vue-slider-dot-tooltip",["vue-slider-dot-tooltip-".concat(this.tooltipPlacement)],{"vue-slider-dot-tooltip-show":this.showTooltip}]}},{key:"tooltipInnerClasses",get:function(){return ["vue-slider-dot-tooltip-inner",["vue-slider-dot-tooltip-inner-".concat(this.tooltipPlacement)],{"vue-slider-dot-tooltip-inner-disabled":this.disabled,"vue-slider-dot-tooltip-inner-focus":this.focus}]}},{key:"showTooltip",get:function(){switch(this.tooltip){case"always":return !0;case"none":return !1;case"focus":return !!this.focus;default:return !1}}},{key:"tooltipValue",get:function(){return this.tooltipFormatter?"string"===typeof this.tooltipFormatter?this.tooltipFormatter.replace(/\{value\}/,String(this.value)):this.tooltipFormatter(this.value):this.value}}]),e}(s.a);o([f({default:0})],O.prototype,"value",void 0),o([f()],O.prototype,"tooltip",void 0),o([f()],O.prototype,"dotStyle",void 0),o([f()],O.prototype,"tooltipStyle",void 0),o([f({type:String,validator:function(t){return ["top","right","bottom","left"].indexOf(t)>-1},required:!0})],O.prototype,"tooltipPlacement",void 0),o([f({type:[String,Function]})],O.prototype,"tooltipFormatter",void 0),o([f({type:Boolean,default:!1})],O.prototype,"focus",void 0),o([f({default:!1})],O.prototype,"disabled",void 0),O=o([u.a],O);var P=O;r("556c");function S(t){return S="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"===typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},S(t)}function E(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function R(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n);}}function A(t,e,r){return e&&R(t.prototype,e),r&&R(t,r),t}function D(t,e){return !e||"object"!==S(e)&&"function"!==typeof e?j(t):e}function j(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _(t){return _=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},_(t)}function M(t,e){if("function"!==typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&V(t,e);}function V(t,e){return V=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},V(t,e)}var C=function(t){function e(){return E(this,e),D(this,_(e).apply(this,arguments))}return M(e,t),A(e,[{key:"labelClickHandle",value:function(t){t.stopPropagation(),this.$emit("pressLabel",this.mark.pos);}},{key:"render",value:function(){var t=arguments[0],e=this.mark;return t("div",{class:this.marksClasses},[this.$slots.step||t("div",{class:this.stepClasses,style:[this.stepStyle,e.style,e.active?this.stepActiveStyle:null,e.active?e.activeStyle:null]}),this.hideLabel?null:this.$slots.label||t("div",{class:this.labelClasses,style:[this.labelStyle,e.labelStyle,e.active?this.labelActiveStyle:null,e.active?e.labelActiveStyle:null],on:{click:this.labelClickHandle}},[e.label])])}},{key:"marksClasses",get:function(){return ["vue-slider-mark",{"vue-slider-mark-active":this.mark.active}]}},{key:"stepClasses",get:function(){return ["vue-slider-mark-step",{"vue-slider-mark-step-active":this.mark.active}]}},{key:"labelClasses",get:function(){return ["vue-slider-mark-label",{"vue-slider-mark-label-active":this.mark.active}]}}]),e}(s.a);o([f({required:!0})],C.prototype,"mark",void 0),o([f(Boolean)],C.prototype,"hideLabel",void 0),o([f()],C.prototype,"stepStyle",void 0),o([f()],C.prototype,"stepActiveStyle",void 0),o([f()],C.prototype,"labelStyle",void 0),o([f()],C.prototype,"labelActiveStyle",void 0),C=o([u.a],C);var N,T=C,I=function(t){return "number"===typeof t?"".concat(t,"px"):t},L=function(t){var e=document.documentElement,r=document.body,n=t.getBoundingClientRect(),o={y:n.top+(window.pageYOffset||e.scrollTop)-(e.clientTop||r.clientTop||0),x:n.left+(window.pageXOffset||e.scrollLeft)-(e.clientLeft||r.clientLeft||0)};return o},B=function(t,e,r){var n=t instanceof MouseEvent?t:t.targetTouches[0],o=L(e),i={x:n.pageX-o.x,y:n.pageY-o.y};return {x:r?e.offsetWidth-i.x:i.x,y:r?e.offsetHeight-i.y:i.y}};(function(t){t[t["PAGE_UP"]=33]="PAGE_UP",t[t["PAGE_DOWN"]=34]="PAGE_DOWN",t[t["END"]=35]="END",t[t["HOME"]=36]="HOME",t[t["LEFT"]=37]="LEFT",t[t["UP"]=38]="UP",t[t["RIGHT"]=39]="RIGHT",t[t["DOWN"]=40]="DOWN";})(N||(N={}));var z=function(t,e){switch(t.keyCode){case N.UP:return function(t){return "ttb"===e.direction?t-1:t+1};case N.RIGHT:return function(t){return "rtl"===e.direction?t-1:t+1};case N.DOWN:return function(t){return "ttb"===e.direction?t+1:t-1};case N.LEFT:return function(t){return "rtl"===e.direction?t+1:t-1};case N.END:return function(){return e.max};case N.HOME:return function(){return e.min};case N.PAGE_UP:return function(t){return t+10};case N.PAGE_DOWN:return function(t){return t-10};default:return null}};function H(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function U(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n);}}function F(t,e,r){return e&&U(t.prototype,e),r&&U(t,r),t}var $,W,G=function(){function t(e){H(this,t),this.num=e;}return F(t,[{key:"decimal",value:function(t,e){var r=this.num,n=this.getDecimalLen(r),o=this.getDecimalLen(t),i=0;switch(e){case"+":i=this.getExponent(n,o),this.num=(this.safeRoundUp(r,i)+this.safeRoundUp(t,i))/i;break;case"-":i=this.getExponent(n,o),this.num=(this.safeRoundUp(r,i)-this.safeRoundUp(t,i))/i;break;case"*":this.num=this.safeRoundUp(this.safeRoundUp(r,this.getExponent(n)),this.safeRoundUp(t,this.getExponent(o)))/this.getExponent(n+o);break;case"/":i=this.getExponent(n,o),this.num=this.safeRoundUp(r,i)/this.safeRoundUp(t,i);break;case"%":i=this.getExponent(n,o),this.num=this.safeRoundUp(r,i)%this.safeRoundUp(t,i)/i;break}return this}},{key:"plus",value:function(t){return this.decimal(t,"+")}},{key:"minus",value:function(t){return this.decimal(t,"-")}},{key:"multiply",value:function(t){return this.decimal(t,"*")}},{key:"divide",value:function(t){return this.decimal(t,"/")}},{key:"remainder",value:function(t){return this.decimal(t,"%")}},{key:"toNumber",value:function(){return this.num}},{key:"getDecimalLen",value:function(t){return ("".concat(t).split(".")[1]||"").length}},{key:"getExponent",value:function(t,e){return Math.pow(10,void 0!==e?Math.max(t,e):t)}},{key:"safeRoundUp",value:function(t,e){return Math.round(t*e)}}]),t}();function X(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"===typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),n.forEach(function(e){it(t,e,r[e]);});}return t}function K(t,e){return J(t)||q(t,e)||Y()}function Y(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function q(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=t[Symbol.iterator]();!(n=(s=a.next()).done);n=!0)if(r.push(s.value),e&&r.length===e)break}catch(u){o=!0,i=u;}finally{try{n||null==a["return"]||a["return"]();}finally{if(o)throw i}}return r}function J(t){if(Array.isArray(t))return t}function Q(t){return et(t)||tt(t)||Z()}function Z(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function tt(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}function et(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}function rt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function nt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n);}}function ot(t,e,r){return e&&nt(t.prototype,e),r&&nt(t,r),t}function it(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}(function(t){t[t["VALUE"]=1]="VALUE",t[t["INTERVAL"]=2]="INTERVAL",t[t["MIN"]=3]="MIN",t[t["MAX"]=4]="MAX",t[t["ORDER"]=5]="ORDER";})(W||(W={}));var st=($={},it($,W.VALUE,'The type of the "value" is illegal'),it($,W.INTERVAL,'The prop "interval" is invalid, "(max - min)" cannot be divisible by "interval"'),it($,W.MIN,'The "value" cannot be less than the minimum.'),it($,W.MAX,'The "value" cannot be greater than the maximum.'),it($,W.ORDER,'When "order" is false, the parameters "minRange", "maxRange", "fixed", "enabled" are invalid.'),$),at=function(){function t(e){rt(this,t),this.dotsPos=[],this.dotsValue=[],this.data=e.data,this.max=e.max,this.min=e.min,this.interval=e.interval,this.order=e.order,this.marks=e.marks,this.included=e.included,this.process=e.process,this.adsorb=e.adsorb,this.onError=e.onError,this.order?(this.minRange=e.minRange||0,this.maxRange=e.maxRange||0,this.enableCross=e.enableCross,this.fixed=e.fixed):((e.minRange||e.maxRange||!e.enableCross||e.fixed)&&this.emitError(W.ORDER),this.minRange=0,this.maxRange=0,this.enableCross=!0,this.fixed=!1),this.setValue(e.value);}return ot(t,[{key:"setValue",value:function(t){this.setDotsValue(Array.isArray(t)?Q(t):[t],!0);}},{key:"setDotsValue",value:function(t,e){var r=this;if(this.included&&this.markList.length>0){var n=function(t){var e=t,n=r.max-r.min;return r.markList.forEach(function(r){if("number"===typeof r.value&&"number"===typeof t){var o=Math.abs(r.value-t);o<n&&(n=o,e=r.value);}}),e};t=t.map(function(t){return n(t)});}this.dotsValue=t,e&&this.syncDotsPos();}},{key:"setDotsPos",value:function(t){var e=this,r=this.order?Q(t).sort(function(t,e){return t-e}):t;this.dotsPos=r,this.setDotsValue(r.map(function(t){return e.parsePos(t)}),this.adsorb);}},{key:"syncDotsPos",value:function(){var t=this;this.dotsPos=this.dotsValue.map(function(e){return t.parseValue(e)});}},{key:"getRecentDot",value:function(t){var e=this.dotsPos.map(function(e){return Math.abs(e-t)});return e.indexOf(Math.min.apply(Math,Q(e)))}},{key:"getIndexByValue",value:function(t){return this.data?this.data.indexOf(t):new G(+t).minus(this.min).divide(this.interval).toNumber()}},{key:"getValueByIndex",value:function(t){return t<0?t=0:t>this.total&&(t=this.total),this.data?this.data[t]:new G(t).multiply(this.interval).plus(this.min).toNumber()}},{key:"setDotPos",value:function(t,e){t=this.getValidPos(t,e).pos;var r=t-this.dotsPos[e];if(r){var n=new Array(this.dotsPos.length);this.fixed?n=this.getFixedChangePosArr(r,e):this.minRange||this.maxRange?n=this.getLimitRangeChangePosArr(t,r,e):n[e]=r,this.setDotsPos(this.dotsPos.map(function(t,e){return t+(n[e]||0)}));}}},{key:"getFixedChangePosArr",value:function(t,e){var r=this;return this.dotsPos.forEach(function(n,o){if(o!==e){var i=r.getValidPos(n+t,o),s=i.pos,a=i.inRange;a||(t=Math.min(Math.abs(s-n),Math.abs(t))*(t<0?-1:1));}}),this.dotsPos.map(function(e){return t})}},{key:"getLimitRangeChangePosArr",value:function(t,e,r){var n=this,o=[{index:r,changePos:e}],i=e;return [this.minRange,this.maxRange].forEach(function(s,a){if(!s)return !1;var u=0===a,l=e>0,c=0;c=u?l?1:-1:l?-1:1;var d=function(t,e){var r=Math.abs(t-e);return u?r<n.minRangeDir:r>n.maxRangeDir},f=r+c,p=n.dotsPos[f],h=t;while(n.isPos(p)&&d(p,h)){var y=n.getValidPos(p+i,f),v=y.pos;o.push({index:f,changePos:v-p}),f+=c,h=v,p=n.dotsPos[f];}}),this.dotsPos.map(function(t,e){var r=o.filter(function(t){return t.index===e});return r.length?r[0].changePos:0})}},{key:"isPos",value:function(t){return "number"===typeof t}},{key:"getValidPos",value:function(t,e){var r=this.valuePosRange[e],n=!0;return t<r[0]?(t=r[0],n=!1):t>r[1]&&(t=r[1],n=!1),{pos:t,inRange:n}}},{key:"parseValue",value:function(t){if(this.data)t=this.data.indexOf(t);else if("number"===typeof t||"string"===typeof t){if(t=+t,t<this.min)return this.emitError(W.MIN),0;if(t>this.max)return this.emitError(W.MAX),0;if("number"!==typeof t||t!==t)return this.emitError(W.VALUE),0;t=new G(t).minus(this.min).divide(this.interval).toNumber();}var e=new G(t).multiply(this.gap).toNumber();return e<0?0:e>100?100:e}},{key:"parsePos",value:function(t){var e=Math.round(t/this.gap);return this.getValueByIndex(e)}},{key:"isActiveByPos",value:function(t){return this.processArray.some(function(e){var r=K(e,2),n=r[0],o=r[1];return t>=n&&t<=o})}},{key:"getValues",value:function(){var t=this;return this.data?this.data:Array.from(new Array(this.total),function(e,r){return new G(r).multiply(t.interval).plus(t.min).toNumber()}).concat([this.max])}},{key:"emitError",value:function(t){this.onError&&this.onError(t,st[t]);}},{key:"markList",get:function(){var t=this;if(!this.marks)return [];var e=function(e,r){var n=t.parseValue(e);return X({pos:n,value:"string"===typeof e?parseFloat(e):e,label:e,active:t.isActiveByPos(n)},r)};return !0===this.marks?this.getValues().map(function(t){return e(t)}):"[object Object]"===Object.prototype.toString.call(this.marks)?Object.keys(this.marks).sort(function(t,e){return +t-+e}).map(function(r){var n=t.marks[r];return e(r,"string"!==typeof n?n:{label:n})}):Array.isArray(this.marks)?this.marks.map(function(t){return e(t)}):"function"===typeof this.marks?this.getValues().map(function(e){return {value:e,result:t.marks(e)}}).filter(function(t){var e=t.result;return !!e}).map(function(t){var r=t.value,n=t.result;return e(r,n)}):[]}},{key:"processArray",get:function(){if(this.process){if("function"===typeof this.process)return this.process(this.dotsPos);if(1===this.dotsPos.length)return [[0,this.dotsPos[0]]];if(this.dotsPos.length>1)return [[Math.min.apply(Math,Q(this.dotsPos)),Math.max.apply(Math,Q(this.dotsPos))]]}return []}},{key:"total",get:function(){var t=0;return t=this.data?this.data.length-1:new G(this.max).minus(this.min).divide(this.interval).toNumber(),t-Math.floor(t)!==0?(this.emitError(W.INTERVAL),0):t}},{key:"gap",get:function(){return 100/this.total}},{key:"minRangeDir",get:function(){return this.minRange?this.minRange*this.gap:0}},{key:"maxRangeDir",get:function(){return this.maxRange?this.maxRange*this.gap:100}},{key:"valuePosRange",get:function(){var t=this,e=this.dotsPos,r=[];return e.forEach(function(n,o){r.push([Math.max(t.minRange?t.minRangeDir*o:0,t.enableCross?0:e[o-1]||0),Math.min(t.minRange?100-t.minRangeDir*(e.length-1-o):100,t.enableCross?100:e[o+1]||100)]);}),r}},{key:"dotsIndex",get:function(){var t=this;return this.dotsValue.map(function(e){return t.getIndexByValue(e)})}}]),t}();function ut(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function lt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n);}}function ct(t,e,r){return e&&lt(t.prototype,e),r&&lt(t,r),t}var dt=function(){function t(e){ut(this,t),this.states=0,this.map=e;}return ct(t,[{key:"add",value:function(t){this.states|=t;}},{key:"delete",value:function(t){this.states&=~t;}},{key:"toggle",value:function(t){this.has(t)?this.delete(t):this.add(t);}},{key:"has",value:function(t){return !!(this.states&t)}}]),t}();r("4abb");function ft(t){return ft="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"===typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ft(t)}function pt(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"===typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),n.forEach(function(e){bt(t,e,r[e]);});}return t}function ht(t,e){return mt(t)||vt(t,e)||yt()}function yt(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function vt(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=t[Symbol.iterator]();!(n=(s=a.next()).done);n=!0)if(r.push(s.value),e&&r.length===e)break}catch(u){o=!0,i=u;}finally{try{n||null==a["return"]||a["return"]();}finally{if(o)throw i}}return r}function mt(t){if(Array.isArray(t))return t}function bt(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function gt(t){return wt(t)||xt(t)||kt()}function kt(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function xt(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}function wt(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}function Ot(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Pt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n);}}function St(t,e,r){return e&&Pt(t.prototype,e),r&&Pt(t,r),t}function Et(t,e){return !e||"object"!==ft(e)&&"function"!==typeof e?Rt(t):e}function Rt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function At(t){return At=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},At(t)}function Dt(t,e){if("function"!==typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&jt(t,e);}function jt(t,e){return jt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},jt(t,e)}var _t={None:0,Drag:1,Focus:2},Mt=4,Vt=function(t){function e(){var t;return Ot(this,e),t=Et(this,At(e).apply(this,arguments)),t.states=new dt(_t),t.scale=1,t.focusDotIndex=0,t}return Dt(e,t),St(e,[{key:"onValueChanged",value:function(){!this.states.has(_t.Drag)&&this.isNotSync&&this.control.setValue(this.value);}},{key:"created",value:function(){this.initControl();}},{key:"mounted",value:function(){this.bindEvent();}},{key:"beforeDestroy",value:function(){this.unbindEvent();}},{key:"bindEvent",value:function(){document.addEventListener("touchmove",this.dragMove,{passive:!1}),document.addEventListener("touchend",this.dragEnd,{passive:!1}),document.addEventListener("mousedown",this.blurHandle),document.addEventListener("mousemove",this.dragMove),document.addEventListener("mouseup",this.dragEnd),document.addEventListener("mouseleave",this.dragEnd),document.addEventListener("keydown",this.keydownHandle);}},{key:"unbindEvent",value:function(){document.removeEventListener("touchmove",this.dragMove),document.removeEventListener("touchend",this.dragEnd),document.removeEventListener("mousemove",this.dragMove),document.removeEventListener("mouseup",this.dragEnd),document.removeEventListener("mouseleave",this.dragEnd),document.removeEventListener("keydown",this.keydownHandle);}},{key:"setScale",value:function(){this.scale=new G(Math.floor(this.isHorizontal?this.$el.offsetWidth:this.$el.offsetHeight)).divide(100).toNumber();}},{key:"initControl",value:function(){var t=this;this.control=new at({value:this.value,data:this.data,enableCross:this.enableCross,fixed:this.fixed,max:this.max,min:this.min,interval:this.interval,minRange:this.minRange,maxRange:this.maxRange,order:this.order,marks:this.marks,included:this.included,process:this.process,adsorb:this.adsorb,onError:this.emitError}),["data","enableCross","fixed","max","min","interval","minRange","maxRange","order","marks","process","adsorb","included"].forEach(function(e){t.$watch(e,function(r){if("data"===e&&Array.isArray(t.control.data)&&Array.isArray(r)&&t.control.data.length===r.length&&r.every(function(e,r){return e===t.control.data[r]}))return !1;t.control[e]=r,["data","max","min","interval"].indexOf(e)>-1&&t.control.syncDotsPos();});});}},{key:"isDisabledByDotIndex",value:function(t){return this.dots[t].disabled}},{key:"syncValueByPos",value:function(){var t=this.control.dotsValue;this.isDiff(t,Array.isArray(this.value)?this.value:[this.value])&&this.$emit("change",1===t.length?t[0]:gt(t));}},{key:"isDiff",value:function(t,e){return t.length!==e.length||t.some(function(t,r){return t!==e[r]})}},{key:"emitError",value:function(t,e){this.silent||console.error("[VueSlider error]: ".concat(e)),this.$emit("error",t,e);}},{key:"dragStart",value:function(t){this.focusDotIndex=t,this.setScale(),this.states.add(_t.Drag),this.states.add(_t.Focus),this.$emit("drag-start");}},{key:"dragMove",value:function(t){if(!this.states.has(_t.Drag))return !1;t.preventDefault();var e=this.getPosByEvent(t);this.isCrossDot(e),this.control.setDotPos(e,this.focusDotIndex),this.lazy||this.syncValueByPos();var r=this.control.dotsValue;this.$emit("dragging",1===r.length?r[0]:gt(r));}},{key:"isCrossDot",value:function(t){if(this.canSort){var e=this.focusDotIndex,r=t;r>this.dragRange[1]?(r=this.dragRange[1],this.focusDotIndex++):r<this.dragRange[0]&&(r=this.dragRange[0],this.focusDotIndex--),e!==this.focusDotIndex&&this.control.setDotPos(r,e);}}},{key:"dragEnd",value:function(){var t=this;if(!this.states.has(_t.Drag))return !1;this.lazy&&this.syncValueByPos(),setTimeout(function(){t.included&&t.isNotSync?t.control.setValue(t.value):t.control.syncDotsPos(),t.states.delete(_t.Drag),t.useKeyboard||t.states.delete(_t.Focus),t.$emit("drag-end");});}},{key:"blurHandle",value:function(t){if(!this.states.has(_t.Focus)||!this.$refs.container||this.$refs.container.contains(t.target))return !1;this.states.delete(_t.Focus);}},{key:"clickHandle",value:function(t){if(!this.clickable)return !1;if(!this.states.has(_t.Drag)){this.setScale();var e=this.getPosByEvent(t);this.setValueByPos(e);}}},{key:"focus",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.states.add(_t.Focus),this.focusDotIndex=t;}},{key:"blur",value:function(){this.states.delete(_t.Focus);}},{key:"getValue",value:function(){var t=this.control.dotsValue;return 1===t.length?t[0]:t}},{key:"getIndex",value:function(){var t=this.control.dotsIndex;return 1===t.length?t[0]:t}},{key:"setValue",value:function(t){this.control.setValue(Array.isArray(t)?gt(t):[t]),this.syncValueByPos();}},{key:"setIndex",value:function(t){var e=this,r=Array.isArray(t)?t.map(function(t){return e.control.getValueByIndex(t)}):this.control.getValueByIndex(t);this.setValue(r);}},{key:"setValueByPos",value:function(t){var e=this,r=this.control.getRecentDot(t);if(this.isDisabledByDotIndex(r))return !1;this.focusDotIndex=r,this.control.setDotPos(t,r),this.syncValueByPos(),this.useKeyboard&&this.states.add(_t.Focus),setTimeout(function(){e.included&&e.isNotSync?e.control.setValue(e.value):e.control.syncDotsPos();});}},{key:"keydownHandle",value:function(t){if(!this.useKeyboard||!this.states.has(_t.Focus))return !1;var e=z(t,{direction:this.direction,max:this.control.total,min:0});if(e){t.preventDefault();var r=this.control.getIndexByValue(this.control.dotsValue[this.focusDotIndex]),n=e(r),o=this.control.parseValue(this.control.getValueByIndex(n));this.isCrossDot(o),this.control.setDotPos(o,this.focusDotIndex),this.syncValueByPos();}}},{key:"getPosByEvent",value:function(t){return B(t,this.$el,this.isReverse)[this.isHorizontal?"x":"y"]/this.scale}},{key:"renderSlot",value:function(t,e,r,n){var o=this.$createElement,i=this.$scopedSlots[t];return i?n?i(e):o("template",{slot:t},[i(e)]):r}},{key:"render",value:function(){var t=this,e=arguments[0];return e("div",{ref:"container",class:this.containerClasses,style:this.containerStyles,attrs:{"aria-hidden":!0},on:{click:this.clickHandle}},[e("div",{class:"vue-slider-rail",style:this.railStyle},[this.processArray.map(function(r,n){return t.renderSlot("process",r,e("div",{class:"vue-slider-process",key:"process-".concat(n),style:r.style}),!0)}),this.marks?e("div",{class:"vue-slider-marks"},[this.control.markList.map(function(r,n){var o;return t.renderSlot("mark",r,e("vue-slider-mark",{key:"mark-".concat(n),attrs:{mark:r,hideLabel:t.hideLabel,stepStyle:t.stepStyle,stepActiveStyle:t.stepActiveStyle,labelStyle:t.labelStyle,labelActiveStyle:t.labelActiveStyle},style:(o={},bt(o,t.isHorizontal?"height":"width","100%"),bt(o,t.isHorizontal?"width":"height",t.tailSize),bt(o,t.mainDirection,"".concat(r.pos,"%")),o),on:{pressLabel:function(e){return t.setValueByPos(e)}}},[t.renderSlot("step",r,null),t.renderSlot("label",r,null)]),!0)})]):null,this.dots.map(function(r,n){var o;return e("vue-slider-dot",{ref:"dot-".concat(n),key:"dot-".concat(n),attrs:{value:r.value,disabled:r.disabled,focus:r.focus,"dot-style":[r.style,r.disabled?r.disabledStyle:null,r.focus?r.focusStyle:null],tooltip:r.tooltip||t.tooltip,"tooltip-style":[t.tooltipStyle,r.tooltipStyle,r.disabled?r.tooltipDisabledStyle:null,r.focus?r.tooltipFocusStyle:null],"tooltip-formatter":t.tooltipFormatter,"tooltip-placement":t.tooltipDirections[n]},style:[t.dotBaseStyle,(o={},bt(o,t.mainDirection,"".concat(r.pos,"%")),bt(o,"transition","".concat(t.mainDirection," ").concat(t.animateTime,"s")),o)],on:{"drag-start":function(){return t.dragStart(n)}}},[t.renderSlot("dot",r,null),t.renderSlot("tooltip",r,null)])})]),1!==this.dots.length||this.data?null:e("input",{class:"vue-slider-sr-only",attrs:{type:"range",min:this.min,max:this.max},domProps:{value:this.value}})])}},{key:"tailSize",get:function(){return I((this.isHorizontal?this.height:this.width)||Mt)}},{key:"containerClasses",get:function(){return ["vue-slider",["vue-slider-".concat(this.direction)],{"vue-slider-disabled":this.disabled}]}},{key:"containerStyles",get:function(){var t=Array.isArray(this.dotSize)?this.dotSize:[this.dotSize,this.dotSize],e=ht(t,2),r=e[0],n=e[1],o=this.width?I(this.width):this.isHorizontal?"auto":I(Mt),i=this.height?I(this.height):this.isHorizontal?I(Mt):"auto";return {padding:this.contained?"".concat(n/2,"px ").concat(r/2,"px"):this.isHorizontal?"".concat(n/2,"px 0"):"0 ".concat(r/2,"px"),width:o,height:i}}},{key:"processArray",get:function(){var t=this;return this.control.processArray.map(function(e){var r,n=ht(e,3),o=n[0],i=n[1],s=n[2];if(o>i){var a=[i,o];o=a[0],i=a[1];}var u=t.isHorizontal?"width":"height";return {start:o,end:i,style:pt((r={},bt(r,t.isHorizontal?"height":"width","100%"),bt(r,t.isHorizontal?"top":"left",0),bt(r,t.mainDirection,"".concat(o,"%")),bt(r,u,"".concat(i-o,"%")),bt(r,"transitionProperty","".concat(u,",").concat(t.mainDirection)),bt(r,"transitionDuration","".concat(t.animateTime,"s")),r),t.processStyle,s)}})}},{key:"dotBaseStyle",get:function(){var t,e=Array.isArray(this.dotSize)?this.dotSize:[this.dotSize,this.dotSize],r=ht(e,2),n=r[0],o=r[1];return t=this.isHorizontal?bt({transform:"translate(".concat(this.isReverse?"50%":"-50%",", -50%)"),WebkitTransform:"translate(".concat(this.isReverse?"50%":"-50%",", -50%)"),top:"50%"},"ltr"===this.direction?"left":"right","0"):bt({transform:"translate(-50%, ".concat(this.isReverse?"50%":"-50%",")"),WebkitTransform:"translate(-50%, ".concat(this.isReverse?"50%":"-50%",")"),left:"50%"},"btt"===this.direction?"bottom":"top","0"),pt({width:"".concat(n,"px"),height:"".concat(o,"px")},t)}},{key:"mainDirection",get:function(){switch(this.direction){case"ltr":return "left";case"rtl":return "right";case"btt":return "bottom";case"ttb":return "top"}}},{key:"isHorizontal",get:function(){return "ltr"===this.direction||"rtl"===this.direction}},{key:"isReverse",get:function(){return "rtl"===this.direction||"btt"===this.direction}},{key:"tooltipDirections",get:function(){var t=this.tooltipPlacement||(this.isHorizontal?"top":"left");return Array.isArray(t)?t:Array.from(new Array(this.dots.length),function(){return t})}},{key:"dots",get:function(){var t=this;return this.control.dotsPos.map(function(e,r){return pt({pos:e,index:r,value:t.control.dotsValue[r],focus:t.states.has(_t.Focus)&&t.focusDotIndex===r,disabled:!1,style:t.dotStyle},(Array.isArray(t.dotOptions)?t.dotOptions[r]:t.dotOptions)||{})})}},{key:"animateTime",get:function(){return this.states.has(_t.Drag)?0:this.duration}},{key:"canSort",get:function(){return this.order&&!this.minRange&&!this.maxRange&&!this.fixed&&this.enableCross}},{key:"isNotSync",get:function(){var t=this.control.dotsValue;return Array.isArray(this.value)?this.value.length!==t.length||this.value.some(function(e,r){return e!==t[r]}):this.value!==t[0]}},{key:"dragRange",get:function(){var t=this.dots[this.focusDotIndex-1],e=this.dots[this.focusDotIndex+1];return [t?t.pos:-1/0,e?e.pos:1/0]}}]),e}(s.a);o([d("change",{default:0})],Vt.prototype,"value",void 0),o([f({type:Boolean,default:!1})],Vt.prototype,"silent",void 0),o([f({default:"ltr",validator:function(t){return ["ltr","rtl","ttb","btt"].indexOf(t)>-1}})],Vt.prototype,"direction",void 0),o([f({type:[Number,String]})],Vt.prototype,"width",void 0),o([f({type:[Number,String]})],Vt.prototype,"height",void 0),o([f({default:14})],Vt.prototype,"dotSize",void 0),o([f({default:!1})],Vt.prototype,"contained",void 0),o([f({type:Number,default:0})],Vt.prototype,"min",void 0),o([f({type:Number,default:100})],Vt.prototype,"max",void 0),o([f({type:Number,default:1})],Vt.prototype,"interval",void 0),o([f({type:Boolean,default:!1})],Vt.prototype,"disabled",void 0),o([f({type:Boolean,default:!0})],Vt.prototype,"clickable",void 0),o([f({type:Number,default:.5})],Vt.prototype,"duration",void 0),o([f(Array)],Vt.prototype,"data",void 0),o([f({type:Boolean,default:!1})],Vt.prototype,"lazy",void 0),o([f({type:String,validator:function(t){return ["none","always","focus"].indexOf(t)>-1},default:"focus"})],Vt.prototype,"tooltip",void 0),o([f({type:[String,Array],validator:function(t){return (Array.isArray(t)?t:[t]).every(function(t){return ["top","right","bottom","left"].indexOf(t)>-1})}})],Vt.prototype,"tooltipPlacement",void 0),o([f({type:[String,Function]})],Vt.prototype,"tooltipFormatter",void 0),o([f({type:Boolean,default:!1})],Vt.prototype,"useKeyboard",void 0),o([f({type:Boolean,default:!0})],Vt.prototype,"enableCross",void 0),o([f({type:Boolean,default:!1})],Vt.prototype,"fixed",void 0),o([f({type:Boolean,default:!0})],Vt.prototype,"order",void 0),o([f(Number)],Vt.prototype,"minRange",void 0),o([f(Number)],Vt.prototype,"maxRange",void 0),o([f({type:[Boolean,Object,Array,Function],default:!1})],Vt.prototype,"marks",void 0),o([f({type:[Boolean,Function],default:!0})],Vt.prototype,"process",void 0),o([f(Boolean)],Vt.prototype,"included",void 0),o([f(Boolean)],Vt.prototype,"adsorb",void 0),o([f(Boolean)],Vt.prototype,"hideLabel",void 0),o([f()],Vt.prototype,"dotOptions",void 0),o([f()],Vt.prototype,"railStyle",void 0),o([f()],Vt.prototype,"processStyle",void 0),o([f()],Vt.prototype,"dotStyle",void 0),o([f()],Vt.prototype,"tooltipStyle",void 0),o([f()],Vt.prototype,"stepStyle",void 0),o([f()],Vt.prototype,"stepActiveStyle",void 0),o([f()],Vt.prototype,"labelStyle",void 0),o([f()],Vt.prototype,"labelActiveStyle",void 0),o([p("value")],Vt.prototype,"onValueChanged",null),Vt=o([u()({data:function(){return {control:null}},components:{VueSliderDot:P,VueSliderMark:T},inheritAttrs:!1})],Vt);var Ct=Vt,Nt=Ct;r.d(e,"ERROR_TYPE",function(){return W});e["default"]=Nt;}})["default"]});

  });

  var VueSlider = unwrapExports$1(vueSliderComponent_umd_min);

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".vue-slider-disabled{opacity:.5;cursor:not-allowed}.vue-slider-rail{background-color:#ccc;border-radius:15px}.vue-slider-process{background-color:#3498db;border-radius:15px}.vue-slider-mark{z-index:4}.vue-slider-mark:first-child .vue-slider-mark-step,.vue-slider-mark:last-child .vue-slider-mark-step{display:none}.vue-slider-mark-step{width:100%;height:100%;border-radius:50%;background-color:rgba(0,0,0,.16)}.vue-slider-mark-label{font-size:14px;white-space:nowrap}.vue-slider-dot-handle{cursor:pointer;width:100%;height:100%;border-radius:50%;background-color:#fff;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-shadow:.5px .5px 2px 1px rgba(0,0,0,.32);box-shadow:.5px .5px 2px 1px rgba(0,0,0,.32)}.vue-slider-dot-handle-focus{-webkit-box-shadow:0 0 1px 2px rgba(52,152,219,.36);box-shadow:0 0 1px 2px rgba(52,152,219,.36)}.vue-slider-dot-handle-disabled{cursor:not-allowed;background-color:#ccc}.vue-slider-dot-tooltip-inner{font-size:14px;white-space:nowrap;padding:2px 5px;min-width:20px;text-align:center;color:#fff;border-radius:5px;border-color:#3498db;background-color:#3498db;-webkit-box-sizing:content-box;box-sizing:content-box}.vue-slider-dot-tooltip-inner:after{content:\"\";position:absolute}.vue-slider-dot-tooltip-inner-top:after{top:100%;left:50%;-webkit-transform:translate(-50%);transform:translate(-50%);height:0;width:0;border:5px solid transparent;border-top-color:inherit}.vue-slider-dot-tooltip-inner-bottom:after{bottom:100%;left:50%;-webkit-transform:translate(-50%);transform:translate(-50%);height:0;width:0;border:5px solid transparent;border-bottom-color:inherit}.vue-slider-dot-tooltip-inner-left:after{left:100%;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);height:0;width:0;border:5px solid transparent;border-left-color:inherit}.vue-slider-dot-tooltip-inner-right:after{right:100%;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);height:0;width:0;border:5px solid transparent;border-right-color:inherit}.vue-slider-dot-tooltip-wrapper{opacity:0;-webkit-transition:all .3s;transition:all .3s}.vue-slider-dot-tooltip-wrapper-show{opacity:1}.vue-slider .vue-slider-dot{background-color:transparent;border-radius:100%}.vue-slider .vue-slider-dot .vue-slider-dot-tooltip-inner-top{border-color:transparent}.vue-slider .vue-slider-dot .vue-slider-dot-tooltip-top{top:-20px}.dragging .vue-slider-dot .vue-slider-dot-tooltip-top,.vue-slider .vue-slider-dot:hover .vue-slider-dot-tooltip-top{top:-13px}.slider-range-value,.vue-slider .vue-slider-dot .vue-slider-dot-tooltip-text{font-size:14px;color:#4d4d4d}.dragging .vue-slider-dot .vue-slider-dot-tooltip-text,.vue-slider .vue-slider-dot:hover .vue-slider-dot-tooltip-text{font-size:12px;color:#4d4d4d}.vue-slider .vue-slider-dot .vue-slider-dot-tooltip-inner{background-color:transparent}.vue-slider .vue-slider-dot-handle{background-color:#1c69d4;-webkit-box-shadow:none;box-shadow:none}.vue-slider .vue-slider-dot-handle:hover{-webkit-box-shadow:0 0 0 3px rgba(6,83,182,.3),0 0 0 6px rgba(28,105,212,.1);box-shadow:0 0 0 3px rgba(6,83,182,.3),0 0 0 6px rgba(28,105,212,.1);-webkit-transition:-webkit-transform .25s cubic-bezier(.42,0,.33,1);transition:-webkit-transform .25s cubic-bezier(.42,0,.33,1);transition:transform .25s cubic-bezier(.42,0,.33,1);transition:transform .25s cubic-bezier(.42,0,.33,1),-webkit-transform .25s cubic-bezier(.42,0,.33,1);-webkit-transform:scale(1.727);transform:scale(1.727)}.vue-slider .vue-slider-dot-handle:active{-webkit-box-shadow:0 0 0 6px rgba(28,105,212,.1);box-shadow:0 0 0 6px rgba(28,105,212,.1);-webkit-transition:-webkit-transform .25s cubic-bezier(.42,0,.33,1);transition:-webkit-transform .25s cubic-bezier(.42,0,.33,1);transition:transform .25s cubic-bezier(.42,0,.33,1);transition:transform .25s cubic-bezier(.42,0,.33,1),-webkit-transform .25s cubic-bezier(.42,0,.33,1);-webkit-transform:scale(1.727);transform:scale(1.727)}.vue-slider .vue-slider-process{background-color:#1c69d4;height:5px!important;top:-2px!important}.vue-slider .vue-slider-rail{background-color:#bbb;height:1px}.dragging .vue-slider-dot .vue-slider-dot-tooltip-inner,.vue-slider .vue-slider-dot:hover .vue-slider-dot-tooltip-inner{padding:4px 22px;font-size:12px;color:#4d4d4d;background:#fff;border:none;border-radius:3px;-webkit-box-shadow:0 0 16px 1px rgba(0,0,0,.12),0 5px 9px 0 rgba(0,0,0,.15);box-shadow:0 0 16px 1px rgba(0,0,0,.12),0 5px 9px 0 rgba(0,0,0,.15)}.dragging .vue-slider-dot .vue-slider-dot-tooltip-inner-top:after,.vue-slider .vue-slider-dot:hover .vue-slider-dot-tooltip-inner-top:after{color:#fff}.slider-range-value{top:-33px} /*# sourceMappingURL=RangeSlider.vue.map */"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var RangeSlider = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (!_vm.currentValue.length)?_c('VueSlider',{ref:"slider",staticClass:"tw-font-bmw-bold",attrs:{"max":_vm.max,"min":_vm.min,"dot-size":_vm.dotSize,"height":_vm.sliderHeight,"tooltip":_vm.tooltipShow,"disabled":_vm.disabled,"lazy":true,"tooltip-formatter":_vm.formatter},on:{"drag-start":function($event){return _vm.toggleDragging(true)},"drag-end":function($event){return _vm.toggleDragging(false)},"change":_vm.changeValue},model:{value:(_vm.currentValue),callback:function ($$v) {_vm.currentValue=$$v;},expression:"currentValue"}}):_c('div',{staticClass:"tw-mt-500 slider-range-values tw-relative"},[_c('div',{staticClass:"tw-absolute slider-range-value tw-pin-l"},[_vm._v(" "+_vm._s(_vm.formatter(_vm.currentValue[0]))+" ")]),_vm._v(" "),_c('div',{staticClass:"tw-absolute slider-range-value tw-pin-r"},[_vm._v(" "+_vm._s(_vm.formatter(_vm.currentValue[1]))+" ")]),_vm._v(" "),_c('VueSlider',{ref:"slider",class:{'dragging': _vm.isDragging},attrs:{"max":_vm.max,"min":_vm.min,"interval":_vm.interval,"lazy":true,"dot-size":_vm.dotSize,"tooltip":"focus","height":_vm.sliderHeight,"disabled":_vm.disabled,"tooltip-formatter":_vm.formatter,"contained":_vm.contained},on:{"drag-start":function($event){return _vm.toggleDragging(true)},"drag-end":function($event){return _vm.toggleDragging(false)},"change":_vm.changeValue},model:{value:(_vm.currentValue),callback:function ($$v) {_vm.currentValue=$$v;},expression:"currentValue"}})],1)},staticRenderFns: [],
    name: 'RangeSlider',
    components: {
      VueSlider,
    },
    props: {
      singleValue: {
        type: Number,
        default: null,
      },
      value: {
        type: [Array, Number],
        default() {
          return [0, 100];
        },
      },
      max: {
        type: Number,
        default: 100,
      },
      min: {
        type: Number,
        default: 0,
      },
      interval: {
        type: Number,
        default: 1,
      },
      disabled: {
        type: Boolean,
        default: false,
      },
      formatter: {
        type: [Function, String],
        default: value => value,
      },
      contained: {
        type: Boolean,
        default: false,
      },
      tooltipShow: {
        type: String,
        default: 'always',
      },
    },
    data() {
      return {
        currentValue: 0,
        dotSize: 11,
        sliderHeight: 5,
        isDragging: false,
      };
    },
    watch: {
      value() {
        this.currentValue = this.value;
      },
    },
    created() {
      this.currentValue = this.value;
    },
    mounted() {
      if (!this.currentValue.length) {
        this.setTooltipPosition();
      }
    },
    methods: {
      toggleDragging(isDragging) {
        this.isDragging = isDragging;
        if (!this.isDragging) {
          this.setTooltipPosition();
        }
      },
      changeValue(value) {
        this.$emit('update', value);
      },
      setTooltipPosition() {
        setTimeout(() => {
          const TOOLTIP_CLASS = 'vue-slider-dot-tooltip-inner';
          const PADDING = 10;
          const tooltipElement = this.$refs.slider.$el.getElementsByClassName(
            TOOLTIP_CLASS
          )[0];
          const tooltipPosition = tooltipElement.getBoundingClientRect();
          const sliderElementPosition = this.$refs.slider.$el.getBoundingClientRect();
          if (sliderElementPosition.right < tooltipPosition.right) {
            const distanceRight =
              tooltipPosition.right - sliderElementPosition.right + PADDING;
            tooltipElement.style = `margin-right: ${distanceRight}px`;
          } else if (sliderElementPosition.left > tooltipPosition.left) {
            const distanceLeft =
              sliderElementPosition.left - tooltipPosition.left;
            tooltipElement.style = `margin-left: ${distanceLeft}px`;
          } else {
            tooltipElement.style = '';
          }
        });
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside RangeSlider component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  /*
  @bmwkit/accordion
  Version: 0.0.1
  (c) Interone
  */

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".icon-arrow-down[data-v-5f92859f]:before,.icon-arrow-up[data-v-5f92859f]:before{color:#4d4d4d}.accordion-header[data-v-5f92859f]{height:70px}.accordion-content[data-v-5f92859f]{border-top:1px solid #e6e6e6}.accordion-content[data-v-5f92859f]:first-of-type{border-top:none}.tw-font-bmw-light p[data-v-5f92859f]{font-family:bmwTypeNextWeb;font-weight:300}.accordion-content:hover .icon-arrow-down[data-v-5f92859f]:before,.accordion-content:hover .icon-arrow-up[data-v-5f92859f]:before{color:#0653b6}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var Accordion = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"accordion-content"},[_c('div',{staticClass:"accordion-header tw-cursor-pointer tw-relative tw-w-full tw-items-center",on:{"click":function($event){return _vm.setAccordionState();}}},[_c('div',{staticClass:"tw-flex tw-text-s tw--ml-200 md:tw-ml-150 tw-items-center tw-flex-1 tw-h-full"},[_c('i',{staticClass:"tw-relative tw-text-2xl",class:{ 'icon-arrow-up': _vm.accordionOpen, 'icon-arrow-down': !_vm.accordionOpen, }}),_vm._v(" "),_c('span',{staticClass:"accordion-header-title tw-font-bmw-bold"},[_vm._v(" "+_vm._s(_vm.title)+" ")])])]),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.accordionOpen),expression:"accordionOpen"}],staticClass:"tw-w-full tw-relative tw-font-bmw-light tw-border-b-100 tw-border-grey-200 tw-pt-200 tw-pb-400"},[_vm._t("default")],2)])},staticRenderFns: [],_scopeId: 'data-v-5f92859f',
    name: 'Accordion',
    components: { BaseDropdown },
    props: {
      isOpen: {
        type: Boolean,
        default: false,
      },
      title: {
        type: String,
        default: '',
      },
      accordionId: {
        type: String,
        default: '',
      },
    },
    data() {
      return {
        accordionOpen: false,
      };
    },
    mounted() {
      this.accordionOpen = this.isOpen;
    },
    methods: {
      setAccordionState() {
        this.accordionOpen = !this.accordionOpen;
        this.$emit('change', this.accordionOpen);
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside BaseSelect component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head$$1=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".base-select-shadow[data-v-cdeebe94]{-webkit-box-shadow:0 10px 17px 0 rgba(0,0,0,.12),0 4px 8px 0 rgba(0,0,0,.15);box-shadow:0 10px 17px 0 rgba(0,0,0,.12),0 4px 8px 0 rgba(0,0,0,.15)}html[dir=rtl] .checkbox-label[data-v-cdeebe94]{margin-right:12px;margin-left:5px}html[dir=rtl] .checkbox-label-engine[data-v-cdeebe94]{margin-right:30px;margin-left:5px}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head$$1.appendChild(style); } })();

  var StockcarSingleFilter = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"data-tailwind":""},on:{"mouseover":function($event){_vm.hover = true;},"mouseleave":function($event){_vm.hover = false;}}},[((_vm.type === 'select' || _vm.type === 'groupSelect' || _vm.type === 'color') && !_vm.isModal)?_c('BaseSelect',{class:{ active: _vm.isActiveFilter },attrs:{"items":_vm.list,"title":_vm.title,"dropdown-id":"1"},scopedSlots:_vm._u([{key:"default",fn:function({ item }){return _c('div',{},[_c('div',{staticClass:"tw-flex tw-pb-100 tw-items-center tw-justify-between"},[_c('BaseCheckbox',{attrs:{"selected":_vm.isSelected(item.id),"fixed-color":_vm.showColor ? _vm.setCheckboxColor(item.id) : '',"highlight-checkmark":_vm.showColor,"on-change":_vm.onChange(item.id),"disabled":_vm.isDisabled(item.disabled, _vm.isSelected(item.id)),"label-class":"tw-text-s tw-text-grey-500 tw-font-bmw-light"}},[_c('div',{staticClass:"checkbox-label tw-ml-300"},[_vm._v(" "+_vm._s(_vm.i18n[item.label] ? _vm.i18n[item.label] : item.label)+" ")]),_vm._v(" "),_c('div',{staticClass:"tw-ml-100"},[_vm._v(" ("+_vm._s(item.count)+") ")])])],1),_vm._v(" "),(_vm.index === 'engineType' && item.engines && item.engines.length > 0)?_c('div',_vm._l((_vm.sortEntries(item.engines)),function(elem,key){return _c('div',{key:key,staticClass:"tw-flex tw-pb-100 tw-items-center"},[_c('BaseCheckbox',{attrs:{"selected":_vm.isSelected(elem.label),"on-change":_vm.onChangeEngine(elem.label, item.id),"disabled":_vm.isDisabled(elem.disabled, _vm.isSelected(elem.label)),"label-class":"tw-text-s tw-text-grey-500 tw-font-bmw-light"}},[_c('div',{staticClass:"checkbox-label-engine tw-ml-500"},[_vm._v(" "+_vm._s(_vm.i18n[elem.label] ? _vm.i18n[elem.label] : elem.label)+" ")]),_vm._v(" "),_c('div',{staticClass:"tw-ml-100"},[_vm._v(" ("+_vm._s(elem.count)+") ")])])],1)}),0):_vm._e(),_vm._v(" "),(_vm.index === 'marketingModelRange' && item.uniqueModelRanges && item.uniqueModelRanges.length > 0)?_c('div',_vm._l((_vm.sortEntries(item.uniqueModelRanges)),function(elem,key){return _c('div',{key:key,staticClass:"tw-flex tw-pb-100 tw-items-center"},[_c('BaseCheckbox',{attrs:{"selected":_vm.isSelected(elem.label),"on-change":_vm.onChangeSeriesModelRange(elem.label, item.id),"disabled":_vm.isDisabled(elem.disabled, _vm.isSelected(elem.label)),"label-class":"tw-text-s tw-text-grey-500 tw-font-bmw-light"}},[_c('div',{staticClass:"checkbox-label-engine tw-ml-500"},[_vm._v(" "+_vm._s(_vm.i18n[elem.label] ? _vm.i18n[elem.label] : elem.label)+" ")]),_vm._v(" "),_c('div',{staticClass:"tw-ml-100"},[_vm._v(" ("+_vm._s(elem.count)+") ")])])],1)}),0):_vm._e()])}}],null,false,3104361937)}):_vm._e(),_vm._v(" "),(_vm.type === 'range' && !_vm.isModal)?_c('BaseDropdown',{staticClass:"base-select tw-border-solid tw-no-outline",class:{ 'active': _vm.isActive, 'dropdown-open': _vm.dropdownOpen, 'base-select-shadow': _vm.hover, 'tw-border-100 tw-border-grey-500': !_vm.dropdownOpen && !_vm.hover, 'tw-border-100 tw-border-white': _vm.dropdownOpen || _vm.hover, },attrs:{"is-open":_vm.dropdownOpen,"title":_vm.title},on:{"openstatus":_vm.setDropdownState}},[_c('div',{staticClass:"tw-py-400 tw-px-200"},[(_vm.subtitle && _vm.subtitle.length > 0)?_c('div',{staticClass:"tw-mb-700 tw-text-xs tw-text-grey-400 tw-font-bmw-light"},[_vm._v(" "+_vm._s(_vm.subtitle)+" ")]):_vm._e(),_vm._v(" "),_c('RangeSlider',{attrs:{"min":_vm.computedMin,"max":_vm.computedMax,"value":_vm.selectedItems,"formatter":_vm.formatRangeValue},on:{"update":_vm.setRange}})],1),_vm._v(" "),_c('template',{slot:"addon"},[_c('div',{staticClass:"tw-flex tw-justify-center tw-items-center tw-flex-1 tw-h-full"},[_c('i',{staticClass:"tw-text-xl tw-text-right tw-w-full",class:{ 'icon-arrow-down': !_vm.dropdownOpen, 'icon-arrow-up': _vm.dropdownOpen, }})])])],2):_vm._e(),_vm._v(" "),(_vm.type === 'select' && _vm.isModal)?_c('div',[_c('h4',{staticClass:"tw-px-200 tw-text-s tw-mb-400"},[_vm._v(" "+_vm._s(_vm.title)+" ")]),_vm._v(" "),_c('BaseSelectButton',{ref:"select_button",staticClass:"tw-border-solid tw-relative tw-m-200",attrs:{"initial-status":!_vm.isActiveFilter,"disabled":_vm.disabled},on:{"buttonclick":_vm.selectAll}},[_vm._v(" "+_vm._s(_vm.i18n.allOptions)+" ")]),_vm._v(" "),_c('ButtonGroup',{staticClass:"tw-mb-500",attrs:{"initial-selected-value":_vm.selectedItems,"disabled":_vm.disabled,"i18n":_vm.i18n,"config":_vm.list},on:{"buttonChanged":_vm.onChangeGroup}})],1):_vm._e(),_vm._v(" "),(_vm.type === 'color' && _vm.isModal)?_c('div',{staticClass:"tw-flex tw-flex-wrap"},[_c('h4',{staticClass:"tw-w-full tw-px-200 tw-text-s tw-mb-400"},[_vm._v(" "+_vm._s(_vm.title)+" ")]),_vm._v(" "),_vm._l((_vm.list),function(elem,key){return _c('div',{key:key,staticClass:"tw-w-1/4 tw-flex tw-pb-500 tw-items-center tw-flex-col"},[_c('BaseCheckbox',{attrs:{"selected":_vm.isSelected(elem.id),"fixed-color":_vm.setCheckboxColor(elem.id),"highlight-checkmark":true,"on-change":_vm.onChange(elem.id),"disabled":_vm.disabled || elem.disabled}}),_vm._v(" "),_c('div',{staticClass:"tw-text-2xs tw-font-bmw-light tw-mt-100",class:{ 'tw-text-grey-500': !_vm.isSelected(elem.id), 'tw-text-grey-900': _vm.isSelected(elem.id) }},[_vm._v(" "+_vm._s(elem.label)+" ")])],1)})],2):_vm._e(),_vm._v(" "),(_vm.type === 'range' && _vm.isModal)?_c('div',{staticClass:"tw-overflow-hidden"},[_c('h4',{staticClass:"tw-px-200 tw-text-s tw-mb-700"},[_vm._v(" "+_vm._s(_vm.title)+" ")]),_vm._v(" "),_c('RangeSlider',{staticClass:"tw-mb-500 tw-mx-200 md:tw-mx-400 lg:tw-mx-0",attrs:{"max":_vm.computedMax,"min":_vm.computedMin,"value":_vm.selectedItems,"formatter":_vm.formatRangeValue},on:{"update":_vm.setRange}})],1):_vm._e(),_vm._v(" "),(_vm.type === 'groupSelect' && _vm.isModal)?_c('div',[_c('h4',{staticClass:"tw-px-200 tw-text-s"},[_vm._v(" "+_vm._s(_vm.title)+" ")]),_vm._v(" "),_vm._l((_vm.list),function(item){return _c('Accordion',{key:item.id,attrs:{"title":item.label}},[_c('div',{staticClass:"tw-pb-200"},[_c('BaseCheckbox',{attrs:{"selected":_vm.isSelected(item.id),"on-change":_vm.onChange(item.id),"disabled":_vm.isDisabled(item.disabled, _vm.isSelected(item.id))}},[_c('span',{staticClass:"checkbox-label tw-ml-300"},[_vm._v(" "+_vm._s(_vm.i18n.allOptions)+" ")]),_vm._v(" "),_c('div',{staticClass:"tw-ml-100"},[_vm._v(" ("+_vm._s(item.count)+") ")])])],1),_vm._v(" "),(_vm.title === _vm.i18n.engineAndFuelType && item.engines && item.engines.length > 0)?_c('div',_vm._l((_vm.sortEntries(item.engines)),function(elem,key){return _c('div',{key:key,staticClass:"tw-flex tw-pb-200 tw-items-center"},[_c('BaseCheckbox',{attrs:{"selected":_vm.isSelected(elem.label),"on-change":_vm.onChangeEngine(elem.label, item.id),"disabled":_vm.isDisabled(elem.disabled, _vm.isSelected(elem.label))}},[_c('div',{staticClass:"checkbox-label-engine tw-ml-300"},[_vm._v(" "+_vm._s(elem.label)+" ")]),_vm._v(" "),_c('div',{staticClass:"tw-ml-100"},[_vm._v(" ("+_vm._s(elem.count)+") ")])])],1)}),0):_vm._e(),_vm._v(" "),(_vm.title === _vm.i18n.marketingModelRange && item.uniqueModelRanges && item.uniqueModelRanges.length > 0)?_c('div',_vm._l((_vm.sortEntries(item.uniqueModelRanges)),function(elem,key){return _c('div',{key:key,staticClass:"tw-flex tw-pb-200 tw-items-center"},[_c('BaseCheckbox',{attrs:{"selected":_vm.isSelected(elem.label),"on-change":_vm.onChangeSeriesModelRange(elem.label, item.id),"disabled":_vm.isDisabled(elem.disabled, _vm.isSelected(elem.label))}},[_c('div',{staticClass:"checkbox-label-engine tw-ml-300"},[_vm._v(" "+_vm._s(elem.label)+" ")]),_vm._v(" "),_c('div',{staticClass:"tw-ml-100"},[_vm._v(" ("+_vm._s(elem.count)+") ")])])],1)}),0):_vm._e()])})],2):_vm._e()],1)},staticRenderFns: [],_scopeId: 'data-v-cdeebe94',
    name: 'StockcarSingleFilter',
    components: {
      BaseSelect,
      ButtonGroup,
      BaseDropdown,
      BaseCheckbox,
      RangeSlider,
      BaseSelectButton,
      Accordion,
    },
    mixins: [PriceFormatMixin],
    props: {
      list: {
        type: Array,
        default() {
          return [];
        },
      },
      disabled: {
        type: Boolean,
        default: false,
      },
      index: {
        type: String,
        default: '',
      },
      title: {
        type: String,
        default: '',
      },
      currencyFormat: {
        type: [String, Object],
        required: true,
      },
      subtitle: {
        type: String,
        default: '',
      },
      type: {
        type: String,
        default: 'select',
      },
      showColor: {
        type: Boolean,
        default: false,
      },
      isModal: {
        type: Boolean,
        default: false,
      },
      i18n: {
        type: Object,
        required: true,
      },
      priceRange: {
        type: Object,
        default: () => ({}),
      },
      selectedItems: {
        type: [Object, Number, Array],
        default() {
          return {};
        },
      },
    },
    data() {
      return {
        hover: false,
        isActive: false,
        range: [],
        dropdownOpen: false,
        test: 1,
        transformedValue: {},
      };
    },
    computed: {
      isActiveFilter() {
        return (
          Object.values(this.selectedItems).filter(value => value).length > 0
        );
      },
      computedMax() {
        if (this.index === 'price') {
          return this.priceRange.priceMax;
        }
        return 0;
      },
      computedMin() {
        if (this.index === 'price') {
          return this.priceRange.priceMin;
        }
        return 0;
      },
    },
    methods: {
      isDisabled(isItemDisabled, isSelected) {
        return (this.disabled || isItemDisabled) && !isSelected
      },
      sortEntries(entries) {
        return sortBy(entries, ['label']);
      },
      formatRangeValue(value) {
        const formattedValue = formatNumber(value);
        if (this.index === 'price') {
          return this.priceFormat(value);
        }
        return `${formattedValue}${this.i18n.filtersUnitRange}`;
      },
      selectAll() {
        if (this.isActiveFilter) {
          const unselectedAllItems = Object.keys(this.selectedItems).reduce(
            (acc, key) => {
              acc[key] = false;
              return acc;
            },
            {}
          );
          this.$emit('change', unselectedAllItems);
        }
      },
      getParentCategory(categoryId) {
        return this.list.find(({ id }) => {
          return id === categoryId;
        });
      },
      onChange(categoryId) {
        if (this.index === 'marketingModelRange') {
          return selectedValue => {
            const parentCategoryToUpdate = this.getParentCategory(categoryId);
            const selectedSubcategory = parentCategoryToUpdate.uniqueModelRanges.reduce(
              (selectedItems, uniqueModelRange) => {
                selectedItems[uniqueModelRange.label] = !selectedValue;
                return selectedItems;
              },
              {}
            );

            this.$emit('change', {
              ...this.selectedItems,
              ...selectedSubcategory,
              [categoryId]: !selectedValue,
            });
          };
        }
        if (this.index === 'engineType') {
          return selectedValue => {
            const parentCategoryToUpdate = this.getParentCategory(categoryId);
            const selectedSubcategory = parentCategoryToUpdate.engines.reduce(
              (selectedItems, engine) => {
                selectedItems[engine.label] = !selectedValue;
                return selectedItems;
              },
              {}
            );

            this.$emit('change', {
              ...this.selectedItems,
              ...selectedSubcategory,
              [categoryId]: !selectedValue,
            });
          };
        }
        return selectedValue => {
          this.change(categoryId, !selectedValue);
        };
      },
      onChangeEngine(id, parentId) {
        return selectedValue => {
          const parentCategory = this.getParentCategory(parentId);
          const anySelected = parentCategory.engines.some(({ label }) => {
            return (
              (this.selectedItems[label] && id !== label) ||
              (id === label && !selectedValue)
            );
          });
          this.$emit('change', {
            ...this.selectedItems,
            [parentId]: anySelected,
            [id]: !selectedValue,
          });
        };
      },
      onChangeSeriesModelRange(id, parentId) {
        return selectedValue => {
          const parentCategory = this.getParentCategory(parentId);
          const anySelected = parentCategory.uniqueModelRanges.some(({ label }) => {
            return (
              (this.selectedItems[label] && id !== label) ||
              (id === label && !selectedValue)
            );
          });
          this.$emit('change', {
            ...this.selectedItems,
            [parentId]: anySelected,
            [id]: !selectedValue,
          });
        };
      },
      onChangeGroup(event) {
        this.change(event.label, event.state);
      },
      change(index, state) {
        this.$emit('change', {
          ...this.selectedItems,
          [index]: state,
        });
      },
      isSelected(id) {
        return this.selectedItems && this.selectedItems[id];
      },
      setDropdownState(value) {
        this.dropdownOpen = !!value;
      },
      setRange(values$$1) {
        if (this.index === 'price') {
          this.$emit('changePrice', values$$1);
        } else {
          this.$emit('change', values$$1);
        }
      },
      setCheckboxColor(colorId) {
        switch (colorId) {
        case 'silver':
          return '#666';
        case 'blue':
          return '#246cd1';
        case 'orange':
          return '#fdac34';
        case 'brown':
          return '#8a572f';
        case 'green':
          return '#287b14';
        case 'red':
          return '#cd0a23';
        case 'yellow':
          return '#f7e63a';
        case 'black':
          return '#000000';
        case 'white':
          return '#ffffff';
        default:
          return '#ffffff';
        }
      }
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside StockcarSingleFilter component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  const bodyScrollLock$2 = new BodyScrollLock();

  const stockcarFiltersMixin = {
    props: {
      isPending: {
        type: Boolean,
        default: false,
      },
      filtersConfiguration: {
        type: Object,
        default() {
          return {};
        },
      },
      selectedFilters: {
        type: Object,
        default() {
          return {};
        },
      },
      aemFiltersConfiguration: {
        type: Object,
        default() {
          return {};
        },
      },
      currencyFormat: {
        type: Object,
        required: true,
      },
      i18n: {
        type: Object,
        required: true,
      },
      currentGeolocation: {
        type: Object,
        default: () => null,
      },
      priceRange: {
        type: Object,
        default: () => ({}),
      },
      maxRadius: {
        type: Number,
        default: 1000,
      },
    },
    data() {
      return {
        labels: {},
      };
    },
    computed: {
      geolocactionEnabled() {
        return (
          this.currentGeolocation && Object.keys(this.currentGeolocation).length
        );
      },
    },
    watch: {
      filtersConfiguration() {
        if (this.filtersConfiguration && this.filtersConfiguration.data) {
          this.labels = getFiltersParser(
            this.filtersConfiguration.data.attributes,
            this.i18n,
            this.aemFiltersConfiguration
          );
        }
      },
    },
    mounted() {
      if (this.filtersConfiguration && this.filtersConfiguration.data) {
        this.labels = getFiltersParser(
          this.filtersConfiguration.data.attributes,
          this.i18n,
          this.aemFiltersConfiguration
        );
      }
    },
    methods: {
      prepareSelectedItems(index) {
        return index === 'price' ? this.priceRange.values : this.selectedFilters[index]
      },
      changePrice(price) {
        this.$emit('changePrice', price);
      },
      onChangeFilters($event, index, isModal = false) {
        let object = { [index]: $event };
        if (index === 'transmissionType' || index === 'engineType') {
          index = index.substr(0, index.length - 4);
          const collections = [{}, {}];
          for (const objectId in $event) {
            const find = object => object.label === objectId;

            let isOption;

            if (index === 'engine' && objectId === 'electric') {
              isOption = false;
            } else {
              isOption =
                this.filtersConfiguration.data.attributes[index].findIndex(find) !==
                -1;
            }

            collections[isOption ? 0 : 1][objectId] = $event[objectId];
          }
          if (index === 'transmission') {
            object = Object.assign({}, object, {
              transmission: collections[0],
              driveType: collections[1],
            });
          } else {
            object = Object.assign({}, object, {
              engine: collections[0],
              fuel: collections[1],
            });
          }
        }
        this.$emit('update', object);
        if (isModal) {
          bodyScrollLock$2.enableBodyScroll();
        }
      },
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var StockcarListFilters = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-flex tw-flex-wrap tw-pt-200 tw-pb-200"},[_vm._l((_vm.labels),function(currentItem,index){return _c('div',{directives:[{name:"show",rawName:"v-show",value:(index !== 'radius'),expression:"index !== 'radius'"}],key:index,staticClass:"tw-flex md:tw-w-1/4"},[_c('div',{staticClass:"tw-pr-200 tw-pb-200 tw-w-full"},[_c('StockcarSingleFilter',{attrs:{"id":index,"index":index,"i18n":_vm.i18n,"list":currentItem.list,"title":currentItem.name,"subtitle":currentItem.title,"show-color":index === 'color',"type":currentItem.type || 'select',"selected-items":_vm.prepareSelectedItems(index),"disabled":_vm.isPending,"price-range":_vm.priceRange,"current-geolocation":_vm.currentGeolocation,"currency-format":_vm.currencyFormat},on:{"change":function($event){return _vm.onChangeFilters($event, index);},"changePrice":_vm.changePrice}})],1)])}),_vm._v(" "),_vm._t("default")],2)},staticRenderFns: [],
    name: 'StockcarListFilters',
    components: { StockcarSingleFilter },
    mixins: [stockcarFiltersMixin],
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside StockcarFilters component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  /*
  @bmwkit/overlay-modal
  Version: 0.0.1
  (c) Interone
  */
  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".overlay-modal[data-v-7f218636]{top:0;left:0;z-index:6050;-webkit-transition:opacity .3s;transition:opacity .3s}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();




























  var OverlayModal = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('transition',{attrs:{"name":"fade"}},[(_vm.open)?_c('div',{staticClass:"overlay-modal tw-font-bmw-light tw-w-full tw-h-full tw-bg-white",class:[ { 'tw-absolute': _vm.type !== 'fixed', 'tw-fixed': _vm.type === 'fixed' }, _vm.wrapperClass, ],style:(_vm.wrapperStyle),on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"esc",27,$event.key,["Esc","Escape"])){ return null; }return _vm.closeModal.apply(null, arguments)}}},[_vm._t("close-button"),_vm._v(" "),(!_vm.hasButtonSlot)?_c('div',{class:[_vm.containerClass, 'tw-flex tw-justify-end']},[_c('button',{staticClass:"reset-button reset-button-hover tw-text-grey-900 tw-text-2xl icon-close-x",class:_vm.buttonStyle,on:{"click":_vm.closeModal}})]):_vm._e(),_vm._v(" "),_vm._t("default")],2):_vm._e()])},staticRenderFns: [],_scopeId: 'data-v-7f218636',
    name: 'OverlayModal',
    props: {
      open: {
        type: Boolean,
        required: true,
      },
      containerClass: {
        type: String,
        default: '',
      },
      buttonStyle: {
        type: String,
        default: '',
      },
      wrapperClass: {
        type: String,
        default: '',
      },
      wrapperStyle: {
        type: Object,
        default: () => ({}),
      },
      type: {
        type: String,
        default: '',
      },
    },
    computed: {
      hasButtonSlot() {
        return !!this.$slots['close-button'];
      },
    },
    methods: {
      closeModal() {
        this.$emit('onCloseModal');
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside OverlayModal component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  /*
  @bmwkit/base-button
  Version: 0.0.1
  (c) Interone
  */
  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".base-button[data-v-5e64eec8]{color:#fff;background-color:#1c69d4}.base-button[data-v-5e64eec8]:hover{background-color:#0653b6}.base-button[data-v-5e64eec8]:disabled{color:#e6e6e6;cursor:no-drop;background-color:#f2f2f2}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();











  var BaseButton = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('button',{staticClass:"base-button tw-font-bmw-bold tw-text-button",class:_vm.computedClasses,on:{"click":function($event){return _vm.$emit('onclick', $event);}}},[_vm._t("default"),_vm._v(" "+_vm._s(_vm.linkText)+" ")],2)},staticRenderFns: [],_scopeId: 'data-v-5e64eec8',
    name: 'BaseButton',
    props: {
      linkText: {
        type: String,
        default: '',
      },
      classes: {
        type: String,
        default: '',
      },
    },
    computed: {
      computedClasses() {
        if (this.classes && this.classes.length) {
          return this.classes;
        }
        return 'tw-bg-blue hover:tw-bg-blue-dark tw-text-white tw-rounded tw-inline-block';
      }
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside BaseButton component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".stockcar-filters-modal[data-v-54ad1d04]{position:fixed;top:0;z-index:7000;width:100%;height:100%;padding-bottom:86px;margin:0;background:#fff}.stockcar-filters-modal-open[data-v-54ad1d04]{min-width:200px;color:#333;background:#fff;border-radius:0;-webkit-box-shadow:0 2px 5px 0 rgba(0,0,0,.2),0 1px 2px 0 rgba(0,0,0,.1);box-shadow:0 2px 5px 0 rgba(0,0,0,.2),0 1px 2px 0 rgba(0,0,0,.1)}.stockcar-filters-modal-open[data-v-54ad1d04]:hover{background:#fff}button[data-v-54ad1d04]{padding:.25rem;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;min-width:180px;min-height:52px;min-height:3.25rem}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  const bodyScrollLock$3 = new BodyScrollLock();

  var StockcarListModalFilters = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('BaseButton',{attrs:{"classes":"stockcar-filters-modal-open tw-w-full sm:tw-w-auto tw-mt-400 tw-mb-100 tw-inline-block"},nativeOn:{"click":function($event){return _vm.openModal.apply(null, arguments)}}},[_c('i',{staticClass:"icon icon-filter tw-text-grey-400 tw-text-icon-l"}),_vm._v(" "),_c('span',[_vm._v(" "+_vm._s(_vm.i18n.openFilters)+" ")])]),_vm._v(" "),_c('OverlayModal',{staticClass:"stockcar-filters-modal tw-pb-200 tw-mt-200 container",attrs:{"open":_vm.open,"button-style":"tw-absolute tw-z-100"},on:{"onCloseModal":_vm.onClose}},[_c('div',{staticClass:"tw-w-full tw-h-full tw-overflow-y-auto tw-p-200"},[_c('h2',{staticClass:"tw-px-200 tw-pt-400 tw-mb-500 tw-text-l"},[_c('span',[_vm._v(_vm._s(_vm.i18n.sortAndFilter))])]),_vm._v(" "),_c('button',{staticClass:"tw-p-200 tw-mx-200 tw-mb-500 tw-pr-400 tw-pl-400 tw-mr-300 tw-bg-grey-800 tw-font-bmw-bold tw-text-white tw-text-button",on:{"click":function($event){return _vm.resetFilters();}}},[_c('span',[_vm._v(_vm._s(_vm.i18n.resetFilters))])]),_vm._v(" "),(_vm.sortingConfig)?_c('div',[_c('h3',{staticClass:"tw-px-200 tw-text-2xs"},[_c('span',[_vm._v(_vm._s(_vm.i18n.sortBy))])]),_vm._v(" "),_c('ButtonGroup',{staticClass:"tw-mb-500",attrs:{"config":_vm.sortingConfig,"i18n":_vm.i18n,"initial-selected-value":_vm.sortingOption,"disabled":_vm.isPending},on:{"buttonChanged":_vm.changeSort}})],1):_vm._e(),_vm._v(" "),_c('h3',{staticClass:"tw-px-200 tw-text-2xs"},[_c('span',[_vm._v(_vm._s(_vm.i18n.filterBy))])]),_vm._v(" "),_vm._l((_vm.labels),function(currentItem,index){return _c('div',{directives:[{name:"show",rawName:"v-show",value:(index !== 'radius' || index === 'radius' && _vm.geolocactionEnabled),expression:"index !== 'radius' || index === 'radius' && geolocactionEnabled"}],key:index},[_c('StockcarSingleFilter',{attrs:{"id":index,"index":index,"is-modal":true,"i18n":_vm.i18n,"list":currentItem.list,"title":currentItem.name,"type":currentItem.type || 'select',"show-color":index === 'color',"disabled":_vm.isPending,"currency-format":_vm.currencyFormat,"selected-items":_vm.prepareSelectedItems(index),"price-range":_vm.priceRange,"max-radius":_vm.maxRadius},on:{"change":function($event){return _vm.onChangeFilters($event, index, true);},"changePrice":_vm.changePrice}})],1)})],2),_vm._v(" "),_c('div',{staticClass:"tw-flex tw-flex-wrap tw-w-full tw-p-400 tw-fixed tw-pin-b tw-pin-x tw-bg-white tw-border-t-100 tw-border-grey-300 tw-z-10"},[_c('button',{staticClass:"tw-flex tw-justify-center tw-bg-primary-500 tw-h-600 tw-w-full tw-text-white tw-font-bmw-bold tw-m-auto tw-text-button",on:{"click":_vm.showResults}},[(_vm.filtersBarButtonText && _vm.filtersBarButtonText.length)?_c('div',{staticClass:"tw-self-center"},[_vm._v(" "+_vm._s(_vm.filtersBarButtonText)+" ")]):_c('div',{staticClass:"tw-self-center"},[_vm._v(" "+_vm._s(_vm.i18n.showResult)+" ")]),_vm._v(" "),_c('div',{staticClass:"tw-mx-100"},[_vm._v(" "+_vm._s(_vm.numberOfResultsText)+" ")])])])])],1)},staticRenderFns: [],_scopeId: 'data-v-54ad1d04',
    name: 'StockcarModalFilters',
    components: {
      StockcarSingleFilter,
      OverlayModal,
      ButtonGroup,
      BaseButton,
    },
    mixins: [
      stockcarFiltersMixin,
      stockcarConfiguredComponentMixin,
      stockcarTranslationComponent,
      TrackingMixin,
    ],
    props: {
      filtersBarButtonText: {
        type: String,
        default: ''
      },
      sortingConfig: {
        type: Array,
        default: () => null
      },
      numberOfResults: {
        type: Number,
        default: null
      },
      sortingFilter: {
        type: String,
        required: true
      },
    },
    data() {
      return {
        open: false,
        filters: {},
        sortingOption: {}
      };
    },
    computed: {
      numberOfResultsText() {
        if (this.numberOfResults === null) {
          return '';
        }
        return `(${this.numberOfResults})`;
      }
    },
    watch: {
      selectedFilters() {
        this.filters = { ...this.selectedFilters };
      },
    },
    created() {
      // TODO: remove sorting option instead use just props
      this.sortingOption = { [this.sortingFilter]: true };
    },
    methods: {
      resetFilters() {
        this.$emit('resetAllFilters');
      },
      onClose(clearFilters) {
        this.open = false;
        bodyScrollLock$3.enableBodyScroll();
      },
      openModal() {
        this.open = true;
        bodyScrollLock$3.disableBodyScroll();
      },
      showResults() {
        this.onClose();
        this.$emit('update', this.filters);
        this.$nextTick(() => {
          this.$emit('showResults', this.filters);
        });
        this.trackAction('show_results', {
          eventName: this.i18n.showResult,
          effect: prepareFiltersTrackingScreen(this.filters),
          element: 'Button',
          eventAction: 'Filter',
          target: '/results',
          eventType: 'triggered',
        });
      },
      changeSort(sortingOption) {
        this.sortingOption = {
          [sortingOption.label]: sortingOption.state
        };
        if (sortingOption.state) {
          this.$emit('updateSorting', sortingOption.label);
        }
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(`${err.stack}\n\nfound in ${info} inside Stockcar component`);
      this.$emit('error', err);
      return false;
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".stockcar-filters-bar[data-v-dcaa366c]{background-color:#f2f2f2}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  const bodyScrollLock$4 = new BodyScrollLock();

  var StockcarFiltersBar = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"data-tailwind":""}},[_c('StockcarFetchJson',{attrs:{"api-config":_vm.aemConfig.apiConfiguration,"market":_vm.aemConfig.domainPageName,"locale":_vm.aemConfig.languagePageName,"parameters":_vm.parameters,"current-geolocation":_vm.currentGeolocation,"url-type":"filters"},on:{"onResponse":_vm.onResponse},scopedSlots:_vm._u([{key:"default",fn:function({ fetchedJson, isPending }){return _c('div',{},[_c('div',{staticClass:"tw-block lg:tw-hidden"},[_c('StockcarListModalFilters',{attrs:{"aem-filters-configuration":_vm.enabledFilters,"i18n":_vm.i18n,"sorting-config":_vm.sortingConfig,"filters-configuration":fetchedJson,"selected-filters":_vm.parameters.filters,"is-pending":isPending,"current-geolocation":_vm.currentGeolocation,"number-of-results":_vm.numberOfResults,"sorting-filter":_vm.sortingFilter,"price-range":_vm.priceRange,"filters-bar-button-text":_vm.filtersBarButtonText,"currency-format":_vm.aemConfig.currencyConfiguration},on:{"update":function($event){return _vm.setFilters(fetchedJson.data.attributes, $event)},"resetAllFilters":_vm.resetAllFilters,"showResults":_vm.showResults,"updateSorting":_vm.updateSorting,"changePrice":_vm.changePrice}})],1),_vm._v(" "),_c('div',{staticClass:"tw-hidden lg:tw-block"},[_c('StockcarListFilters',{attrs:{"i18n":_vm.i18n,"aem-filters-configuration":_vm.enabledFilters,"filters-configuration":fetchedJson,"is-pending":isPending,"selected-filters":_vm.parameters.filters,"current-geolocation":_vm.currentGeolocation,"currency-format":_vm.aemConfig.currencyConfiguration,"price-range":_vm.priceRange},on:{"update":function($event){return _vm.setFilters(fetchedJson.data.attributes, $event)},"changePrice":_vm.changePrice}},[_vm._t("default")],2)],1),_vm._v(" "),(_vm.aemConfig.filters.specialOffers)?_c('BaseCheckbox',{staticClass:"tw-mt-300",attrs:{"selected":_vm.parameters.filters && _vm.parameters.filters.onlyDiscounted,"on-change":_vm.onSpecialOffersChange,"label-class":"tw-text-s tw-font-bmw-light"}},[_c('div',{staticClass:"checkbox-label tw-ml-300"},[_vm._v(" "+_vm._s(_vm.i18n.specialOffers)+" ")])]):_vm._e()],1)}}],null,true)})],1)},staticRenderFns: [],_scopeId: 'data-v-dcaa366c',
    name: 'StockcarFiltersBar',
    components: {
      StockcarListFilters,
      StockcarListModalFilters,
      StockcarFetchJson,
      BaseCheckbox
    },
    props: {
      filtersBarButtonText: {
        type: String,
        default: ''
      },
      aemConfig: {
        type: Object,
        required: true,
      },
      numberOfResults: {
        type: Number,
        default: null,
      },
      parameters: {
        type: Object,
        required: true,
      },
      sortingConfig: {
        type: Array,
        default: () => null
      },
      i18n: {
        type: Object,
        required: true,
      },
      currentGeolocation: {
        type: Object,
        default: () => null,
      },
      priceRange: {
        type: Object,
        default: () => ({}),
      },
      enabledFilters: {
        type: Object,
        required: true
      },
      sortingFilter: {
        type: String,
        default: ''
      },
    },
    data() {
      return {
        activeBreakpoint: '',
      }
    },
    created() {
      this.activeBreakpoint = EventBus$1.$data.activeBreakpoint;
    },
    mounted() {
      EventBus$1.$on('breakpointChange', breakpoint => {
        if (this.activeBreakpoint !== 'lg' && breakpoint !== this.activeBreakpoint) {
          bodyScrollLock$4.enableBodyScroll();
        }
        this.activeBreakpoint = breakpoint;
      });
    },
    methods: {
      showResults(filters) {
        this.$emit('showResults', filters);
      },
      setFilters(response, filters) {
        const newFilters = {
          ...filters,
        };
        this.$emit('changeFilters', newFilters);
      },
      resetAllFilters() {
        this.$emit('resetAllFilters');
      },
      updateSorting(sorting) {
        this.$emit('updateSorting', sorting);
      },
      changePrice(price) {
        this.$emit('changePrice', price);
      },
      onResponse(response) {
        this.$emit('onResponse', response);
      },
      onSpecialOffersChange(selectedValue) {
        this.$emit('changeFilters', { onlyDiscounted: !selectedValue });
      }
    },
    errorCaptured (err, vm, info) {
      console.warn(`${err.stack}\n\nfound in ${info} inside StockcarFiltersBar component`);
      this.$emit('error', err);
      return false
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();
























  var CheckmarkIcon = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('svg',{attrs:{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","width":"24","height":"24"}},[_c('title',[_vm._v("103000306_checkmark_24")]),_vm._v(" "),_c('g',[(_vm.checked)?_c('polygon',{attrs:{"points":"10,19.621 3.939,13.561 6.061,11.439 10,15.379 17.939,7.439 20.061,9.561   ","fill":"#262626"}}):_c('path',{attrs:{"d":"M15 0H0V3H15V0Z","transform":"translate(4, 13)","fill":"#262626"}})])])},staticRenderFns: [],
    name: 'CheckmarkIcon',
    props: {
      checked: {
        type: Boolean,
        default: true,
      },
    },
  };

  var dist = createCommonjsModule(function (module, exports) {
  (function webpackUniversalModuleDefinition(root, factory) {
  	module.exports = factory();
  })(commonjsGlobal, function() {
  return /******/ (function(modules) { // webpackBootstrap
  /******/ 	// The module cache
  /******/ 	var installedModules = {};
  /******/
  /******/ 	// The require function
  /******/ 	function __webpack_require__(moduleId) {
  /******/
  /******/ 		// Check if module is in cache
  /******/ 		if(installedModules[moduleId]) {
  /******/ 			return installedModules[moduleId].exports;
  /******/ 		}
  /******/ 		// Create a new module (and put it into the cache)
  /******/ 		var module = installedModules[moduleId] = {
  /******/ 			i: moduleId,
  /******/ 			l: false,
  /******/ 			exports: {}
  /******/ 		};
  /******/
  /******/ 		// Execute the module function
  /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
  /******/
  /******/ 		// Flag the module as loaded
  /******/ 		module.l = true;
  /******/
  /******/ 		// Return the exports of the module
  /******/ 		return module.exports;
  /******/ 	}
  /******/
  /******/
  /******/ 	// expose the modules object (__webpack_modules__)
  /******/ 	__webpack_require__.m = modules;
  /******/
  /******/ 	// expose the module cache
  /******/ 	__webpack_require__.c = installedModules;
  /******/
  /******/ 	// identity function for calling harmony imports with the correct context
  /******/ 	__webpack_require__.i = function(value) { return value; };
  /******/
  /******/ 	// define getter function for harmony exports
  /******/ 	__webpack_require__.d = function(exports, name, getter) {
  /******/ 		if(!__webpack_require__.o(exports, name)) {
  /******/ 			Object.defineProperty(exports, name, {
  /******/ 				configurable: false,
  /******/ 				enumerable: true,
  /******/ 				get: getter
  /******/ 			});
  /******/ 		}
  /******/ 	};
  /******/
  /******/ 	// getDefaultExport function for compatibility with non-harmony modules
  /******/ 	__webpack_require__.n = function(module) {
  /******/ 		var getter = module && module.__esModule ?
  /******/ 			function getDefault() { return module['default']; } :
  /******/ 			function getModuleExports() { return module; };
  /******/ 		__webpack_require__.d(getter, 'a', getter);
  /******/ 		return getter;
  /******/ 	};
  /******/
  /******/ 	// Object.prototype.hasOwnProperty.call
  /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
  /******/
  /******/ 	// __webpack_public_path__
  /******/ 	__webpack_require__.p = "";
  /******/
  /******/ 	// Load entry module and return exports
  /******/ 	return __webpack_require__(__webpack_require__.s = 6);
  /******/ })
  /************************************************************************/
  /******/ ([
  /* 0 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return toArray; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return arrayFind; });
  var toArray = function toArray(a) {
    var ret = Array(a.length);
    for (var i = 0; i < a.length; ++i) {
      ret[i] = a[i];
    }
    return ret;
  };

  var arrayFind = function arrayFind(array, search) {
    return array.filter(function (a) {
      return a === search;
    })[0];
  };

  /***/ }),
  /* 1 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOCUS_GROUP", function() { return FOCUS_GROUP; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOCUS_DISABLED", function() { return FOCUS_DISABLED; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOCUS_ALLOW", function() { return FOCUS_ALLOW; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOCUS_AUTO", function() { return FOCUS_AUTO; });
  var FOCUS_GROUP = 'data-focus-lock';
  var FOCUS_DISABLED = 'data-focus-lock-disabled';
  var FOCUS_ALLOW = 'data-no-focus-lock';
  var FOCUS_AUTO = 'data-autofocus-inside';

  /***/ }),
  /* 2 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constants__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__array__ = __webpack_require__(0);



  var filterNested = function filterNested(nodes) {
    var l = nodes.length;
    var i = void 0;
    var j = void 0;
    for (i = 0; i < l; i += 1) {
      for (j = 0; j < l; j += 1) {
        if (i !== j) {
          if (nodes[i].contains(nodes[j])) {
            return filterNested(nodes.filter(function (x) {
              return x !== nodes[j];
            }));
          }
        }
      }
    }
    return nodes;
  };

  var getTopParent = function getTopParent(node) {
    return node.parentNode ? getTopParent(node.parentNode) : node;
  };

  var getAllAffectedNodes = function getAllAffectedNodes(node) {
    var group = node.getAttribute(__WEBPACK_IMPORTED_MODULE_0__constants__["FOCUS_GROUP"]);
    if (group) {
      return filterNested(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__array__["a" /* toArray */])(getTopParent(node).querySelectorAll('[' + __WEBPACK_IMPORTED_MODULE_0__constants__["FOCUS_GROUP"] + '="' + group + '"]:not([' + __WEBPACK_IMPORTED_MODULE_0__constants__["FOCUS_DISABLED"] + '="disabled"])')));
    }
    return [node];
  };

  /* harmony default export */ __webpack_exports__["a"] = (getAllAffectedNodes);

  /***/ }),
  /* 3 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* unused harmony export newFocus */
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_DOMutils__ = __webpack_require__(12);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_firstFocus__ = __webpack_require__(13);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_all_affected__ = __webpack_require__(2);




  var findAutoFocused = function findAutoFocused(autoFocusables) {
    return function (node) {
      return !!node.autofocus || node.dataset && !!node.dataset.autofocus || autoFocusables.indexOf(node) >= 0;
    };
  };

  var newFocus = function newFocus(innerNodes, outerNodes, activeElement, lastNode, autoFocused) {
    var cnt = innerNodes.length;
    var firstFocus = innerNodes[0];
    var lastFocus = innerNodes[cnt - 1];

    // focus is inside
    if (innerNodes.indexOf(activeElement) >= 0) {
      return undefined;
    }

    var activeIndex = outerNodes.indexOf(activeElement);
    var lastIndex = outerNodes.indexOf(lastNode || activeIndex);
    var lastNodeInside = innerNodes.indexOf(lastNode);
    var indexDiff = activeIndex - lastIndex;
    var firstNodeIndex = outerNodes.indexOf(firstFocus);
    var lastNodeIndex = outerNodes.indexOf(lastFocus);

    // new focus
    if (activeIndex === -1 || lastNodeInside === -1) {
      return innerNodes.indexOf(autoFocused.length ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils_firstFocus__["a" /* default */])(autoFocused) : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils_firstFocus__["a" /* default */])(innerNodes));
    }
    // old focus
    if (!indexDiff && lastNodeInside >= 0) {
      return lastNodeInside;
    }
    // jump out
    if (indexDiff && Math.abs(indexDiff) > 1) {
      return lastNodeInside;
    }
    // focus above lock
    if (activeIndex <= firstNodeIndex) {
      return cnt - 1;
    }
    // focus below lock
    if (activeIndex > lastNodeIndex) {
      return 0;
    }
    // index is inside tab order, but outside Lock
    if (indexDiff) {
      if (Math.abs(indexDiff) > 1) {
        return lastNodeInside;
      }
      return (cnt + lastNodeInside + indexDiff) % cnt;
    }
    // do nothing
    return undefined;
  };

  var getTopCommonParent = function getTopCommonParent(activeElement, entry, entries) {
    var topCommon = entry;
    entries.forEach(function (subEntry) {
      var common = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_DOMutils__["a" /* getCommonParent */])(activeElement, subEntry);
      if (common) {
        if (common.contains(topCommon)) {
          topCommon = common;
        } else {
          topCommon = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_DOMutils__["a" /* getCommonParent */])(common, topCommon);
        }
      }
    });
    return topCommon;
  };

  var allParentAutofocusables = function allParentAutofocusables(entries) {
    return entries.reduce(function (acc, node) {
      return acc.concat(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_DOMutils__["b" /* parentAutofocusables */])(node));
    }, []);
  };

  var notAGuard = function notAGuard(node) {
    return !(node.dataset && node.dataset.focusGuard);
  };

  var getFocusMerge = function getFocusMerge(topNode, lastNode) {
    var activeElement = document && document.activeElement;
    var entries = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_all_affected__["a" /* default */])(topNode).filter(notAGuard);

    var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);

    var innerElements = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_DOMutils__["c" /* getTabbableNodes */])(entries).filter(function (_ref) {
      var node = _ref.node;
      return notAGuard(node);
    });

    if (!innerElements[0]) {
      innerElements = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_DOMutils__["d" /* getAllTabbableNodes */])(entries).filter(function (_ref2) {
        var node = _ref2.node;
        return notAGuard(node);
      });
      if (!innerElements[0]) {
        return undefined;
      }
    }

    var innerNodes = innerElements.map(function (_ref3) {
      var node = _ref3.node;
      return node;
    });

    var outerNodes = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_DOMutils__["c" /* getTabbableNodes */])([commonParent]).map(function (_ref4) {
      var node = _ref4.node;
      return node;
    });

    var newId = newFocus(innerNodes, outerNodes, activeElement, lastNode, innerNodes.filter(findAutoFocused(allParentAutofocusables(entries))));

    if (newId === undefined) {
      return newId;
    }
    return innerElements[newId];
  };

  /* harmony default export */ __webpack_exports__["a"] = (getFocusMerge);

  /***/ }),
  /* 4 */
  /***/ (function(module, exports, __webpack_require__) {

  var Component = __webpack_require__(17)(
    /* script */
    __webpack_require__(5),
    /* template */
    __webpack_require__(18),
    /* scopeId */
    null,
    /* cssModules */
    null
  );
  Component.options.__file = "/Users/akorzunov/dev/Z/mellis/github/focus/vue-focus-lock/src/Lock.vue";
  if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.");}
  if (Component.options.functional) {console.error("[vue-loader] Lock.vue: functional components are not supported with templates, they should use render functions.");}

  module.exports = Component.exports;


  /***/ }),
  /* 5 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _focusLock = __webpack_require__(9);

  var _focusLock2 = _interopRequireDefault(_focusLock);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //

  function deferAction(action) {
    var setImmediate = window.setImmediate;
    if (typeof setImmediate !== 'undefined') {
      setImmediate(action);
    } else {
      setTimeout(action, 1);
    }
  }

  var lastActiveTrap = 0;
  var lastActiveFocus = null;

  var focusWasOutsideWindow = false;

  var focusOnBody = function focusOnBody() {
    return document && document.activeElement === document.body;
  };

  var isFreeFocus = function isFreeFocus() {
    return focusOnBody() || (0, _focusLock.focusIsHidden)();
  };

  var activateTrap = function activateTrap() {
    var result = false;
    if (lastActiveTrap) {
      var _lastActiveTrap = lastActiveTrap,
          observed = _lastActiveTrap.observed,
          onActivation = _lastActiveTrap.onActivation;

      if (focusWasOutsideWindow || !isFreeFocus() || !lastActiveFocus) {
        if (observed && !(0, _focusLock.focusInside)(observed)) {
          onActivation();
          result = (0, _focusLock2.default)(observed, lastActiveFocus);
        }
        focusWasOutsideWindow = false;
        lastActiveFocus = document && document.activeElement;
      }
    }
    return result;
  };

  var reducePropsToState = function reducePropsToState(propsList) {
    return propsList.filter(function (_ref) {
      var disabled = _ref.disabled;
      return !disabled;
    }).slice(-1)[0];
  };

  var handleStateChangeOnClient = function handleStateChangeOnClient(trap) {
    if (lastActiveTrap !== trap) {
      lastActiveTrap = null;
    }
    lastActiveTrap = trap;
    if (trap) {
      activateTrap();
      deferAction(activateTrap);
    }
  };

  var instances = [];

  var emitChange = function emitChange() {
    handleStateChangeOnClient(reducePropsToState(instances));
  };

  var onTrap = function onTrap(event) {
    if (activateTrap() && event) {
      // prevent scroll jump
      event.stopPropagation();
      event.preventDefault();
    }
  };

  var onBlur = function onBlur() {
    deferAction(activateTrap);
  };

  var onWindowBlur = function onWindowBlur() {
    focusWasOutsideWindow = true;
  };

  var attachHandler = function attachHandler() {
    document.addEventListener('focusin', onTrap, true);
    document.addEventListener('focusout', onBlur);
    window.addEventListener('blur', onWindowBlur);
  };

  var detachHandler = function detachHandler() {
    document.removeEventListener('focusin', onTrap, true);
    document.removeEventListener('focusout', onBlur);
    window.removeEventListener('blur', onWindowBlur);
  };

  exports.default = {
    name: 'Lock',
    props: {
      returnFocus: {
        type: Boolean
      },
      disabled: {
        type: Boolean
      },
      noFocusGuards: {
        type: [Boolean, String],
        default: false
      },
      group: {
        type: String
      }
    },
    data: function data() {
      return {
        data: {},
        hidden: "" //    "width: 1px;height: 0px;padding: 0;overflow: hidden;position: fixed;top: 0;left: 0;"
      };
    },

    computed: {
      groupAttr: function groupAttr() {
        return _defineProperty({}, _focusLock.constants.FOCUS_GROUP, this.group);
      },
      hasLeadingGuards: function hasLeadingGuards() {
        return this.noFocusGuards !== true;
      },
      hasTailingGuards: function hasTailingGuards() {
        return this.hasLeadingGuards && this.noFocusGuards !== 'tail';
      }
    },
    watch: {
      disabled: function disabled() {
        this.data.disabled = this.disabled;
        emitChange();
      }
    },

    methods: {
      onBlur: function onBlur() {
        deferAction(emitChange);
      }
    },

    mounted: function mounted() {
      var _this = this;

      this.data.vue = this;
      this.data.observed = this.$el.querySelector("[data-lock]");

      this.data.disabled = this.disabled;
      this.data.onActivation = function () {
        _this.originalFocusedElement = _this.originalFocusedElement || document && document.activeElement;
      };

      if (!instances.length) {
        attachHandler();
      }
      instances.push(this.data);
      emitChange();
    },
    destroyed: function destroyed() {
      var _this2 = this;

      instances = instances.filter(function (_ref3) {
        var vue = _ref3.vue;
        return vue !== _this2;
      });
      if (!instances.length) {
        detachHandler();
      }
      if (this.returnFocus && this.originalFocusedElement && this.originalFocusedElement.focus) {
        this.originalFocusedElement.focus();
      }
      emitChange();
    }
  };

  /***/ }),
  /* 6 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _Lock = __webpack_require__(4);

  var _Lock2 = _interopRequireDefault(_Lock);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  exports.default = _Lock2.default;

  /***/ }),
  /* 7 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_all_affected__ = __webpack_require__(2);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_array__ = __webpack_require__(0);



  var focusInFrame = function focusInFrame(frame) {
    return frame === document.activeElement;
  };

  var focusInsideIframe = function focusInsideIframe(topNode) {
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_all_affected__["a" /* default */])(topNode).reduce(function (result, node) {
      return result || !!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils_array__["b" /* arrayFind */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils_array__["a" /* toArray */])(node.querySelectorAll('iframe')), focusInFrame);
    }, false);
  };

  var focusInside = function focusInside(topNode) {
    var activeElement = document && document.activeElement;

    if (!activeElement || activeElement.dataset && activeElement.dataset.focusGuard) {
      return false;
    }
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_all_affected__["a" /* default */])(topNode).reduce(function (result, node) {
      return result || node.contains(activeElement) || focusInsideIframe(topNode);
    }, false);
  };

  /* harmony default export */ __webpack_exports__["a"] = (focusInside);

  /***/ }),
  /* 8 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_array__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants__ = __webpack_require__(1);



  var focusIsHidden = function focusIsHidden() {
    return document && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_array__["a" /* toArray */])(document.querySelectorAll('[' + __WEBPACK_IMPORTED_MODULE_1__constants__["FOCUS_ALLOW"] + ']')).some(function (node) {
      return node.contains(document.activeElement);
    });
  };

  /* harmony default export */ __webpack_exports__["a"] = (focusIsHidden);

  /***/ }),
  /* 9 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__tabHook__ = __webpack_require__(11);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__focusMerge__ = __webpack_require__(3);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__focusInside__ = __webpack_require__(7);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__focusIsHidden__ = __webpack_require__(8);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__setFocus__ = __webpack_require__(10);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__constants__ = __webpack_require__(1);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_all_affected__ = __webpack_require__(2);
  /* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "tabHook", function() { return __WEBPACK_IMPORTED_MODULE_0__tabHook__["a"]; });
  /* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "focusInside", function() { return __WEBPACK_IMPORTED_MODULE_2__focusInside__["a"]; });
  /* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "focusIsHidden", function() { return __WEBPACK_IMPORTED_MODULE_3__focusIsHidden__["a"]; });
  /* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "focusMerge", function() { return __WEBPACK_IMPORTED_MODULE_1__focusMerge__["a"]; });
  /* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "constants", function() { return __WEBPACK_IMPORTED_MODULE_5__constants__; });
  /* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "getAllAffectedNodes", function() { return __WEBPACK_IMPORTED_MODULE_6__utils_all_affected__["a"]; });










  /* harmony default export */ __webpack_exports__["default"] = (__WEBPACK_IMPORTED_MODULE_4__setFocus__["a" /* default */]);

  /***/ }),
  /* 10 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* unused harmony export focusOn */
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__focusMerge__ = __webpack_require__(3);


  var focusOn = function focusOn(target) {
    target.focus();
    if (target.contentWindow) {
      target.contentWindow.focus();
    }
  };

  var guardCount = 0;
  var lockDisabled = false;

  /* harmony default export */ __webpack_exports__["a"] = (function (topNode, lastNode) {
    var focusable = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__focusMerge__["a" /* default */])(topNode, lastNode);

    if (lockDisabled) {
      return;
    }

    if (focusable) {
      if (guardCount > 2) {
        return;
      }
      guardCount++;
      focusOn(focusable.node);
      guardCount--;
    }
  });

  /***/ }),
  /* 11 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = ({
    attach: function attach(node, enabled) {},
    detach: function detach() {}
  });

  /***/ }),
  /* 12 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* unused harmony export isVisible */
  /* unused harmony export notHiddenInput */
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getCommonParent; });
  /* unused harmony export filterFocusable */
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getTabbableNodes; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getAllTabbableNodes; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return parentAutofocusables; });
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__tabOrder__ = __webpack_require__(14);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__tabUtils__ = __webpack_require__(15);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__array__ = __webpack_require__(0);




  var isElementHidden = function isElementHidden(computedStyle) {
    if (!computedStyle || !computedStyle.getPropertyValue) {
      return false;
    }
    return computedStyle.getPropertyValue('display') === 'none' || computedStyle.getPropertyValue('visibility') === 'hidden';
  };

  var isVisible = function isVisible(node) {
    return !node || node === document || !isElementHidden(window.getComputedStyle(node, null)) && isVisible(node.parentNode);
  };

  var notHiddenInput = function notHiddenInput(node) {
    return !((node.tagName === 'INPUT' || node.tagName === 'BUTTON') && (node.type === 'hidden' || node.disabled));
  };

  var getParents = function getParents(node) {
    var parents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    parents.push(node);
    if (node.parentNode) {
      getParents(node.parentNode, parents);
    }
    return parents;
  };

  var getCommonParent = function getCommonParent(nodea, nodeb) {
    var parentsA = getParents(nodea);
    var parentsB = getParents(nodeb);

    for (var i = 0; i < parentsA.length; i += 1) {
      var currentParent = parentsA[i];
      if (parentsB.indexOf(currentParent) >= 0) {
        return currentParent;
      }
    }
    return false;
  };

  var filterFocusable = function filterFocusable(nodes) {
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__array__["a" /* toArray */])(nodes).filter(function (node) {
      return isVisible(node);
    }).filter(function (node) {
      return notHiddenInput(node);
    });
  };

  var getTabbableNodes = function getTabbableNodes(topNodes) {
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__tabOrder__["a" /* orderByTabIndex */])(filterFocusable(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__tabUtils__["a" /* getFocusables */])(topNodes)), true);
  };

  var getAllTabbableNodes = function getAllTabbableNodes(topNodes) {
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__tabOrder__["a" /* orderByTabIndex */])(filterFocusable(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__tabUtils__["a" /* getFocusables */])(topNodes)), false);
  };

  var parentAutofocusables = function parentAutofocusables(topNode) {
    return filterFocusable(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__tabUtils__["b" /* getParentAutofocusables */])(topNode));
  };

  /***/ }),
  /* 13 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  var isRadio = function isRadio(node) {
    return node.tagName === 'INPUT' && node.type === 'radio';
  };

  var findSelectedRadio = function findSelectedRadio(node, nodes) {
    return nodes.filter(isRadio).filter(function (el) {
      return el.name === node.name;
    }).filter(function (el) {
      return el.checked;
    })[0] || node;
  };

  var pickFirstFocus = function pickFirstFocus(nodes) {
    if (nodes[0] && nodes.length > 1) {
      if (isRadio(nodes[0]) && nodes[0].name) {
        return findSelectedRadio(nodes[0], nodes);
      }
    }
    return nodes[0];
  };

  /* harmony default export */ __webpack_exports__["a"] = (pickFirstFocus);

  /***/ }),
  /* 14 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* unused harmony export tabSort */
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return orderByTabIndex; });
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__array__ = __webpack_require__(0);


  var tabSort = function tabSort(a, b) {
    var tabDiff = a.tabIndex - b.tabIndex;
    var indexDiff = a.index - b.index;

    if (tabDiff) {
      if (!a.tabIndex) return 1;
      if (!b.tabIndex) return -1;
    }

    return tabDiff || indexDiff;
  };

  var orderByTabIndex = function orderByTabIndex(nodes, filterNegative) {
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__array__["a" /* toArray */])(nodes).map(function (node, index) {
      return {
        node: node,
        index: index,
        tabIndex: node.tabIndex
      };
    }).filter(function (data) {
      return !filterNegative || data.tabIndex >= 0;
    }).sort(tabSort);
  };

  /***/ }),
  /* 15 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getFocusables; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getParentAutofocusables; });
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__tabbables__ = __webpack_require__(16);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__array__ = __webpack_require__(0);
  /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__constants__ = __webpack_require__(1);




  var getFocusables = function getFocusables(parents) {
    return parents.reduce(function (acc, parent) {
      return acc.concat(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__array__["a" /* toArray */])(parent.querySelectorAll(__WEBPACK_IMPORTED_MODULE_0__tabbables__["a" /* default */].join(','))));
    }, []);
  };

  var getParentAutofocusables = function getParentAutofocusables(parent) {
    var parentFocus = parent.querySelectorAll('[' + __WEBPACK_IMPORTED_MODULE_2__constants__["FOCUS_AUTO"] + ']');
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__array__["a" /* toArray */])(parentFocus).map(function (node) {
      return getFocusables([node]);
    }).reduce(function (acc, nodes) {
      return acc.concat(nodes);
    }, []);
  };

  /***/ }),
  /* 16 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony default export */ __webpack_exports__["a"] = (['button:enabled:not([readonly])', 'select:enabled:not([readonly])', 'textarea:enabled:not([readonly])', 'input:enabled:not([readonly])', 'a[href]', 'area[href]', 'iframe', 'object', 'embed', '[tabindex]', '[contenteditable]', '[autofocus]']);

  /***/ }),
  /* 17 */
  /***/ (function(module, exports) {

  // this module is a runtime utility for cleaner component module output and will
  // be included in the final webpack user bundle

  module.exports = function normalizeComponent (
    rawScriptExports,
    compiledTemplate,
    scopeId,
    cssModules
  ) {
    var esModule;
    var scriptExports = rawScriptExports = rawScriptExports || {};

    // ES6 modules interop
    var type = typeof rawScriptExports.default;
    if (type === 'object' || type === 'function') {
      esModule = rawScriptExports;
      scriptExports = rawScriptExports.default;
    }

    // Vue.extend constructor export interop
    var options = typeof scriptExports === 'function'
      ? scriptExports.options
      : scriptExports;

    // render functions
    if (compiledTemplate) {
      options.render = compiledTemplate.render;
      options.staticRenderFns = compiledTemplate.staticRenderFns;
    }

    // scopedId
    if (scopeId) {
      options._scopeId = scopeId;
    }

    // inject cssModules
    if (cssModules) {
      var computed = Object.create(options.computed || null);
      Object.keys(cssModules).forEach(function (key) {
        var module = cssModules[key];
        computed[key] = function () { return module };
      });
      options.computed = computed;
    }

    return {
      esModule: esModule,
      exports: scriptExports,
      options: options
    }
  };


  /***/ }),
  /* 18 */
  /***/ (function(module, exports, __webpack_require__) {

  module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
    return _c('div', [(_vm.hasLeadingGuards) ? _c('div', {
      style: (_vm.hidden),
      attrs: {
        "tabIndex": _vm.disabled ? -1 : 0,
        "aria-hidden": "true"
      }
    }) : _vm._e(), _vm._v(" "), (_vm.hasLeadingGuards) ? _c('div', {
      style: (_vm.hidden),
      attrs: {
        "tabIndex": _vm.disabled ? -1 : 1,
        "aria-hidden": "true"
      }
    }) : _vm._e(), _vm._v(" "), _c('div', _vm._b({
      attrs: {
        "data-lock": ""
      },
      on: {
        "focusout": _vm.onBlur
      }
    }, 'div', _vm.groupAttr, false), [_vm._t("default")], 2), _vm._v(" "), (_vm.hasTailingGuards) ? _c('div', {
      style: (_vm.hidden),
      attrs: {
        "tabIndex": _vm.disabled ? -1 : 0,
        "aria-hidden": "true"
      }
    }) : _vm._e()])
  },staticRenderFns: []};
  module.exports.render._withStripped = true;

  /***/ })
  /******/ ]);
  });
  });

  var FocusLock = unwrapExports(dist);

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css="svg[data-v-5e345597]{fill:currentColor}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();
















  var ArrowUp = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('svg',{attrs:{"width":"12","height":"9","viewBox":"0 0 12 9","xmlns":"http://www.w3.org/2000/svg"}},[_c('path',{attrs:{"d":"M5.99994 0.499901L11.9999 6.49916L10.4205 8.07861L5.99994 3.65733L1.5794 8.07861L-6.08971e-05 6.49916L5.99994 0.499901Z","fill":"#666666"}})])},staticRenderFns: [],_scopeId: 'data-v-5e345597',
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".dropdown[data-v-0a43a44a]{position:relative}.dropdown.disabled[data-v-0a43a44a]{pointer-events:none}.dropdown__button[data-v-0a43a44a]{width:100%;position:relative;cursor:pointer;margin:0;text-decoration:none;text-align:left;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:.75rem 20px;font-size:16px;font-size:1rem;background-color:transparent;border:1px solid #bbb;color:#262626;-webkit-transition:border-color .3s ease-out;transition:border-color .3s ease-out;.dropdown.disabled &[data-v-0a43a44a]{background-color:#f2f2f2;color:#8e8e8e}}.dropdown--open .dropdown__button[data-v-0a43a44a],.dropdown__button[data-v-0a43a44a]:focus,.dropdown__button[data-v-0a43a44a]:hover{border-color:#4d4d4d;outline:none}.dropdown__button.focus-visible[data-v-0a43a44a],.dropdown__button[data-v-0a43a44a]:focus-visible{border-color:#4d4d4d;-webkit-box-shadow:0 0 0 1px #fff,0 0 0 5px #1c69d4;box-shadow:0 0 0 1px #fff,0 0 0 5px #1c69d4;outline:none}.dropdown__button-label-container[data-v-0a43a44a]{-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;min-width:0}.dropdown__button-label[data-v-0a43a44a]{-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.dropdown__button-counter[data-v-0a43a44a]{color:#fff;background-color:#4d4d4d;padding:0 4px;margin-left:8px}.dropdown__button-icon[data-v-0a43a44a]{-webkit-transform:rotateX(180deg);transform:rotateX(180deg);margin-left:8px;-webkit-transition:all .3s ease-out;transition:all .3s ease-out}.dropdown__button-icon.is-open[data-v-0a43a44a]{-webkit-transform:rotateX(0deg);transform:rotateX(0deg)}.dropdown__content-container[data-v-0a43a44a]{width:100%;position:relative;z-index:100}.dropdown__content[data-v-0a43a44a]{width:100%;position:absolute;top:1px;background-color:#fff;min-height:30px;-webkit-box-shadow:0 0 1px rgba(0,0,0,.24),0 2px 8px rgba(0,0,0,.08);box-shadow:0 0 1px rgba(0,0,0,.24),0 2px 8px rgba(0,0,0,.08)}.dropdown__above-label[data-v-0a43a44a]{color:#666;display:block;height:16px;font-size:12px;line-height:16px;margin-bottom:8px;.dropdown.disabled &[data-v-0a43a44a]{color:#bbb}}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var DropDownV2 = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:"container",staticClass:"dropdown",class:{ 'dropdown--open': _vm.isOpen, disabled: _vm.disabled },on:{"keyup":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"esc",27,$event.key,["Esc","Escape"])){ return null; }return _vm.handleEscape.apply(null, arguments)}}},[(_vm.labelAbove)?_c('div',{staticClass:"dropdown__above-label tw-font-bmw-bold"},[_vm._v(" "+_vm._s(_vm.labelAbove)+" ")]):_vm._e(),_vm._v(" "),_c('button',{ref:"button",staticClass:"dropdown__button",attrs:{"disabled":_vm.disabled,"aria-expanded":_vm.buttonAriaExpanded,"aria-haspopup":"true","aria-labelledby":_vm.idLabel},on:{"click":_vm.toggle}},[_c('TextBlock',{staticClass:"dropdown__button-label",attrs:{"id":_vm.idLabel,"element":"span","typo":"headline-7"}},[_vm._v(" "+_vm._s(_vm.label)+" ")]),_vm._v(" "),(_vm.counter)?_c('TextBlock',{staticClass:"dropdown__button-counter",attrs:{"element":"span","typo":"label-1"}},[_vm._v(" "+_vm._s(_vm.counter)+" ")]):_vm._e(),_vm._v(" "),_c('ArrowUp',{staticClass:"dropdown__button-icon",class:{ 'is-open': _vm.isOpen }})],1),_vm._v(" "),_c('div',{staticClass:"dropdown__content-container"},[_c('transition',{attrs:{"name":"fade"}},[_c('FocusLock',{attrs:{"disabled":!_vm.isOpen}},[_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.isOpen),expression:"isOpen"}],staticClass:"dropdown__content"},[_vm._t("default")],2)])],1)],1)])},staticRenderFns: [],_scopeId: 'data-v-0a43a44a',
    name: 'DropdownV2',
    components: { TextBlock, ArrowUp, FocusLock },
    props: {
      disabled: {
        type: Boolean,
      },
      labelAbove: {
        type: String,
        default: '',
      },
      label: {
        type: String,
        required: true,
      },
      counter: {
        type: [String, Number],
        default: '',
      },
      showCounter: {
        type: Boolean,
      },
    },
    data() {
      return {
        isOpen: false,
      };
    },
    computed: {
      idLabel() {
        return uniqueId('stl-dropdown-label');
      },
      buttonAriaExpanded() {
        return this.isOpen ? 'true' : 'false';
      },
    },
    destroyed() {
      // cleanup listener if dropdown is dismounted while open
      this.unbindListener();
    },
    methods: {
      toggle() {
        if (this.isOpen) {
          this.closeDropdown();
        } else {
          this.openDropdown();
        }
      },
      openDropdown() {
        this.isOpen = true;
        this.bindListener();
      },
      closeDropdown(moveFocus = false) {
        this.isOpen = false;
        this.unbindListener();
        if (moveFocus) {
          this.$nextTick(() => this.focusDropdownButton());
        }
      },
      focusDropdownButton() {
        if (!this.$refs.button) {
          return;
        }
        this.$refs.button.focus();
      },
      bindListener() {
        document.addEventListener('click', this.handleClickOutside);
        document.addEventListener('touchstart', this.handleClickOutside);
      },
      unbindListener() {
        document.removeEventListener('click', this.handleClickOutside);
        document.removeEventListener('touchstart', this.handleClickOutside);
      },
      handleEscape(e) {
        if (this.isOpen) {
          e.stopPropagation();
          this.closeDropdown(true);
        }
      },
      handleClickOutside(e) {
        e.stopPropagation();

        if (!this.$refs.container.contains(e.target)) {
          this.closeDropdown();
        }
      },
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".sort-dropdown-medium[data-v-1f7e676c]{width:100%}@media (min-width:768px) and (max-width:992px){width:calc(50% - 8px)}select[data-v-1f7e676c]{-webkit-appearance:none;-moz-appearance:none;text-indent:1px;text-overflow:\"\";background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='512' height='512' viewBox='0 0 306 306'%3E%3Cpath fill='%23DDDDD' d='M270.3 58.65L153 175.95 35.7 58.65 0 94.35l153 153 153-153z'/%3E%3C/svg%3E\");background-repeat:no-repeat,repeat;background-position:right 1.2em top 50%,0 0;background-size:.95em auto,100%;padding:13px 15px}select[data-v-1f7e676c]::-ms-expand{display:none}.sort-dropdown[data-v-1f7e676c]{max-width:275px;margin-top:0}.sort-item[data-v-1f7e676c]{min-height:35px;cursor:pointer}.sort-item[data-v-1f7e676c]:hover{background:#f2f2f2}.sort-item.focus-visible[data-v-1f7e676c],.sort-item[data-v-1f7e676c]:focus-visible{-webkit-box-shadow:0 0 0 1px #fff,0 0 0 5px #1c69d4;box-shadow:0 0 0 1px #fff,0 0 0 5px #1c69d4;outline:none}.checkmark-icon[data-v-1f7e676c]{position:absolute;right:15px}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var SortDropDown = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"tw-hidden lg:tw-block"},[_c('DropDownV2',{staticClass:"sort-dropdown tw-ml-auto tw-pr-200",attrs:{"label":_vm.label,"label-above":_vm.i18n.sortBy,"data-component":"sort-dropdown"}},[_c('div',{staticClass:"tw-py-200"},[_vm._l((_vm.sortOptions),function(item,index){return [(index > 0)?_c('div',{key:item.value,staticClass:"sort-item tw-px-400 tw-flex tw-items-center",class:_vm.getItemClasses(index),attrs:{"data-value":item.value,"tabindex":"0"},on:{"click":function($event){return _vm.setSortOption(index)},"keypress":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.setSortOption(index)}}},[_c('TextBlock',{staticClass:"tw-font-bmw-light",attrs:{"typo":"body-1","element":"span"}},[_vm._v(" "+_vm._s(_vm.sortPrefix)+" "+_vm._s(_vm.i18n[item.label])+" ")]),_vm._v(" "),(_vm.getItemClasses(index))?_c('CheckmarkIcon',{staticClass:"checkmark-icon"}):_vm._e()],1):_vm._e()]})],2)])],1),_vm._v(" "),_c('div',{staticClass:"tw-block lg:tw-hidden"},[_c('div',{staticClass:"sort-dropdown-medium tw-container tw-h-auto tw-font-normal tw-inline-block tw-print-hidden",attrs:{"data-component":"result-sort-dropdown"}},[_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.selectedItem),expression:"selectedItem"}],staticClass:"tw-no-outline tw-border-100 tw-border-grey-400",on:{"change":[function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.selectedItem=$event.target.multiple ? $$selectedVal : $$selectedVal[0];},_vm.handleChange]}},[_c('option',{attrs:{"value":"RELEVANCE","disabled":"disabled","hidden":""}},[_vm._v(" "+_vm._s(_vm.label)+" ")]),_vm._v(" "),_vm._l((_vm.sortOptions),function(item,index){return _c('option',{key:index,domProps:{"value":index}},[_vm._v(" "+_vm._s(_vm.sortPrefix)+" "+_vm._s(_vm.i18n[item.label])+" ")])})],2)])])])},staticRenderFns: [],_scopeId: 'data-v-1f7e676c',
    name: 'SortDropdown',
    components: {
      TextBlock,
      CheckmarkIcon,
      DropDownV2,
    },
    props: {
      initialSortingField: {
        type: String,
        default: '',
      },
      sorting: {
        type: Array,
        default() {
          return [];
        },
      },
    },
    mixins: [stockcarTranslationComponent, TrackingMixin],
    data() {
      return {
        selectedItem: 0,
        selectedOption: '',
      };
    },
    computed: {
      sortOptions() {
        return this.sorting;
      },
      sortLabels() {
        return this.sorting.map((item) => item.label);
      },
      sortPrefix() {
        return this.i18n['sort.label'];
      },
      label() {
        const sortLabel = this.i18n[this.sortLabels[this.selectedItem]];
        return `${this.sortPrefix ? this.sortPrefix + ' ' : ''}${sortLabel}`;
      },
    },
    mounted() {
      if (this.initialSortingField) {
        this.selectedItem =
          this.sortLabels.indexOf(this.initialSortingField) || 0;
      }
    },
    methods: {
      handleChange() {
        this.setSortOption(this.selectedItem);
      },
      setSortOption(value) {
        console.log('Value selected:', value);
        this.selectedItem = value;
        this.$emit('update', this.sortOptions[value]);
      },
      getItemClasses(index) {
        if (index === this.selectedItem) {
          return 'sort-item--selected';
        }
        return '';
      },
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head$$1=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css="a.tw-font-bmw-bold[data-v-04aa4254]{font-family:bmwTypeNextWeb,Arial,Helvetica,Roboto,sans-serif;font-weight:700}.filters.fixed[data-v-04aa4254]{top:45px;left:0}.filters-tag-reset-btn[data-v-04aa4254]{height:34px;padding:0 25px;font-size:14px;line-height:34px;background:#4d4d4d}.filters-tag-reset-btn[data-v-04aa4254]:hover{background:#262626}.icon-close-x[data-v-04aa4254]{-webkit-transform:scale(1.3);transform:scale(1.3)}.filters-wrapper[data-v-04aa4254]{height:175px}.back-arrow[data-v-04aa4254]{margin-left:-10px}.back-arrow.icon-arrow-left[data-v-04aa4254]:before{position:relative;top:1px;color:#1c69d4}@media (max-width:992px){.padding-top-scroll[data-v-04aa4254]{padding-top:138px}}html[dir=rtl] .back-arrow[data-v-04aa4254]{margin-right:-10px;-webkit-transform:rotate(180deg);transform:rotate(180deg)}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head$$1.appendChild(style); } })();

  var StockcarListContent = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-w-full tw-relative tw-px-200",class:{ 'padding-top-scroll': _vm.fixedFilters },attrs:{"data-tracking-regionid":"sl > new car stocklocator-importers > search results"}},[_c('div',{staticClass:"tw-container tw-mt-600 tw-mb-600"},[_c('router-link',{staticClass:"tw-text-s tw-font-bmw-bold tw-text-grey-900 tw-flex tw-items-center",attrs:{"to":"/"}},[_c('span',{staticClass:"back-arrow icon-arrow-left tw-text-xl tw-text-primary-500"}),_vm._v(" "),_c('span',[_vm._v(_vm._s(_vm.i18n.backToHomepage))])])],1),_vm._v(" "),_c('div',{staticClass:"tw-container"},[_c('h2',{staticClass:"tw-mb-300 tw-font-bmw-light tw-text-xl"},[_vm._v(" "+_vm._s(_vm.aemConfig.resultsHeadline)+" ")]),_vm._v(" "),_c('h4',{staticClass:"tw-mb-600 tw-font-bmw-light tw-text-m"},[_vm._v(" "+_vm._s(_vm.aemConfig.resultsSubheadline)+" ")])]),_vm._v(" "),_c('div',{staticClass:"sm:tw-flex lg:tw-block"},[_c('StockcarFiltersBar',{attrs:{"parameters":_vm.parameters,"aem-config":_vm.aemConfig,"i18n":_vm.i18n,"enabled-filters":_vm.aemConfig.filters,"current-geolocation":_vm.currentGeolocation,"number-of-results":_vm.numberOfCars,"sorting-config":_vm.sortingConfigComputed,"sorting-filter":_vm.parameters.sorting.sortingField[1],"price-range":_vm.priceRange},on:{"changeFilters":_vm.setFilters,"changePrice":_vm.changePrice,"updateSorting":_vm.updateSortingModal,"onResponse":_vm.getAllFilters,"resetAllFilters":function($event){return _vm.removeAllFilters()}}})],1),_vm._v(" "),_c('div',{staticClass:"tw-container categories-blocks tw-pt-400 items-stretch"},[(_vm.filtersTags.length > 0)?_c('button',{staticClass:"filters-tag-reset-btn tw-mr-200 tw-font-bmw-bold tw-text-white",on:{"click":function($event){return _vm.removeAllFilters()}}},[_vm._v(" "+_vm._s(_vm.i18n.resetFilters)+" ")]):_vm._e(),_vm._v(" "),_vm._l((_vm.filtersTags),function(item,index){return _c('div',{key:index,staticClass:"tw-inline-flex tw-p-100 tw-border-solid filter-block tw-border-100 tw-border-grey-300 tw-pr-200 tw-pl-300 tw-mr-200 tw-text-2xs tw-font-bmw-bold tw-relative tw-items-center tw-mb-200"},[_c('span',[_vm._v(_vm._s(item.name))]),_vm._v(" "),_c('a',{staticClass:"icon-close-x tw-text-l tw-cursor-pointer tw-text-grey-400 tw-mt-0 tw-mb-0",on:{"click":function($event){return _vm.removeFilter(item)}}})])})],2),_vm._v(" "),_c('div',{staticClass:"tw-flex tw-flex-row tw-justify-end tw-pb-800"},[_c('SortDropDown',{staticClass:"tw-w-full",attrs:{"sorting":_vm.sortingConfigComputed,"i18n":_vm.i18n,"initial-sorting-field":_vm.parameters.sorting.sortingField[2]},on:{"update":_vm.selectedSort}})],1),_vm._v(" "),_c('div',{staticClass:"tw-relative tw-min-h-900"},[_c('StockcarFetchJson',{attrs:{"parameters":_vm.parameters,"market":_vm.aemConfig.domainPageName,"locale":_vm.aemConfig.languagePageName,"api-config":_vm.aemConfig.apiConfiguration,"current-geolocation":_vm.currentGeolocation,"url-type":"list"},on:{"onResponse":_vm.updateCarsData},scopedSlots:_vm._u([{key:"default",fn:function({ fetchedJson }){return _c('div',{staticClass:"tw-flex tw-w-full tw-h-30"})}}])}),_vm._v(" "),_c('div',[_c('div',{staticClass:"tw-container"},[_c('StockcarListModelCardsList',{attrs:{"aem-config":_vm.aemConfig,"config":_vm.allCars,"i18n":_vm.i18n,"filters-params":_vm.parameters}})],1),_vm._v(" "),_c('div',{staticClass:"tw-pb-800"},[_c('PageNavigation',{attrs:{"current-page":_vm.page,"count":_vm.numberOfCars,"per-page":_vm.perPage,"loaded-items-count":_vm.allCars.length || 0,"buttonLabelShowMore":_vm.loadMoreButtonLabel,"progressBarLabel":_vm.progressBarLabel},on:{"change":_vm.updatePage}})],1)])],1)])},staticRenderFns: [],_scopeId: 'data-v-04aa4254',
    name: 'StockcarListContent',
    components: {
      StockcarFetchJson,
      StockcarListModelCardsList,
      PageNavigation,
      StockcarListSorting,
      StockcarFiltersBar,
      SortDropDown,
    },
    mixins: [stockcarContentMixin, stockcarDetecSizeMixin, PriceFormatMixin],
    props: {
      parameters: {
        type: Object,
        required: true,
      },
      currentGeolocation: {
        type: Object,
        default: () => null,
      },
      priceRange: {
        type: Object,
        required: true,
      },
      perPage: {
        type: Number,
        required: true,
      },
      page: {
        type: Number,
        required: true,
      },
    },
    data() {
      return {
        allFilters: {},
        numberOfCars: 0,
        filtersConfig: null,
        fixedFilters: false,
        options: [10],
        allCars: [],
        sortingConfig: [
          {
            label: 'relevance',
          },
          {
            label: 'lowestPrice',
          },
          {
            label: 'highestPrice',
          },
          {
            label: 'az',
          },
          {
            label: 'za',
          },
          {
            label: 'distanceNearest',
          },
        ],
      };
    },
    computed: {
      sortingConfigComputed() {
        if (!this.currentGeolocation || !this.parameters.radius) {
          return this.sortingConfig.filter(
            ({ label }) => label !== 'distanceNearest'
          );
        }
        return this.sortingConfig;
      },
      filtersTags() {
        return this.getDisplayedFilters(this.parameters.filters, this.priceRange);
      },
      loadMoreButtonLabel() {
        return this.i18n.loadMore;
      },
      progressBarLabel() {
        const vehicleCountRangeLabel =
          this.i18n.vehicleCountRangeLabel || `{0} of {1} vehicles`;
        return vehicleCountRangeLabel
          .replace('{0}', this.allCars.length)
          .replace('{1}', this.numberOfCars);
      },
    },
    mounted() {
      if (this.$refs.filterContainer) {
        const topOffset = this.$refs.filterContainer.getBoundingClientRect().top;
        EventBus$1.$on('scroll', () => {
          this.fixedFilters = window.pageYOffset > topOffset;
        });
      }
    },
    methods: {
      changePrice(newPrice) {
        this.$set(this, 'allCars', []);
        this.$emit('updatePriceValue', newPrice);
      },
      getAllFilters(allFilters) {
        this.allFilters = get(allFilters, 'data.attributes', {});
        this.$emit('updatePriceRange', {
          priceMax: Math.ceil(this.allFilters.overallPriceMax),
          priceMin: Math.ceil(this.allFilters.overallPriceMin),
        });
      },
      updateCarsData(response) {
        const cars = response
          ? singleModelList(response.data, this.aemConfig)
          : {
              data: [],
            };

        cars.data.forEach((element) => {
          if (this.allCars.findIndex(car => car.id === element.id) === -1) {
            this.allCars.push(element);
          }
        });
        this.numberOfCars = response.meta.count;
      },
      setLabelDisplayName(index, value) {
        if (index === 'series') {
          return `${this.i18n.seriesDisplayFilter}: ${value}`;
        }
        if (index === 'price') {
          if (this.i18n.priceDisplayRangeTemplate) {
            return this.i18n.priceDisplayRangeTemplate
              .replace('{0}', this.priceFormat(value[0]))
              .replace('{1}', this.priceFormat(value[1]));
          }
          return `Price range: ${value[0]}$ - ${value[1]}$`;
        }
        if (index === 'radius') {
          return `${this.i18n.radiusDisplayTagLabel} ${value} ${this.i18n.filtersUnitRange}`;
        }
        return (
          this.i18n[value] ||
          (value && this.i18n[value.toLowerCase()]) ||
          (value && this.i18n[value.toUpperCase()]) ||
          value
        );
      },
      preparePriceDisplay(filter$$1, values$$1) {
        if (
          typeof values$$1[0] !== 'number' ||
          typeof values$$1[1] !== 'number' ||
          (values$$1[0] === this.priceRange.priceMin &&
            values$$1[1] === this.priceRange.priceMax)
        ) {
          return [];
        }
        return [
          {
            name: this.setLabelDisplayName(filter$$1, values$$1),
            type: filter$$1,
            value: values$$1,
          },
        ];
      },
      getDisplayedFilters(selectedFilters, priceRange) {
        let display = [];

        for (let filter$$1 in selectedFilters) {
          if (
            filter$$1 !== 'driveType' &&
            filter$$1 !== 'transmission' &&
            filter$$1 !== 'allOptions' &&
            filter$$1 !== 'engineType'
          ) {
            const collection = selectedFilters[filter$$1];
            if (filter$$1 === 'price') {
              display = [
                ...display,
                ...this.preparePriceDisplay(filter$$1, collection),
              ];
            } else if (filter$$1 === 'radius') {
              display.push({
                name: this.setLabelDisplayName(filter$$1, collection),
                type: filter$$1,
                value: collection,
              });
            } else {
              display = display.concat(
                Object.keys(collection)
                  .filter((key) => collection[key])
                  .map((key) => ({
                    name: this.setLabelDisplayName(filter$$1, key),
                    type: filter$$1,
                    value: key,
                  }))
              );
            }
          }
        }

        return display;
      },
      setFilters(filters) {
        this.$set(this, 'allCars', []);
        this.$emit('changeFilters', filters);
        this.$emit('updateSorting', {
          page: 1,
        });
      },
      prepareFilterKey(item) {
        if (item.type !== 'price') {
          if (
            item.type === 'engine' ||
            item.type === 'fuel' ||
            item.type === 'transmission' ||
            item.type === 'driveType'
          ) {
            return item.type === 'engine' || item.type === 'fuel'
              ? 'engineType'
              : 'transmissionType';
          }
        }
        return item.type;
      },
      removeEngineFilter(itemToRemove) {
        this.$set(this, 'allCars', []);

        if (itemToRemove.type === 'engine') {
          const parentCategory = this.allFilters.fuel.find(({ engines }) => {
            return (engines || []).some(
              ({ label }) => label === itemToRemove.value
            );
          });
          const parentAllSubCategory = get(parentCategory, 'engines', []);
          const anySelected = parentAllSubCategory.some((category) => {
            return (
              this.parameters.filters.engine[category.label] &&
              category.label !== itemToRemove.value
            );
          });

          const newFilters = {
            engine: {
              ...this.parameters.filters.engine,
              [itemToRemove.value]: false,
            },
            engineType: {
              ...this.parameters.filters.engineType,
              [itemToRemove.value]: false,
            },
          };

          if (parentCategory) {
            newFilters.fuel = {
              ...this.parameters.filters.fuel,
              [parentCategory.id]: anySelected,
            };

            newFilters.engineType = {
              ...newFilters.engineType,
              [parentCategory.id]: anySelected,
            };
          }

          this.setFilters(newFilters);
        } else {
          const fuel = this.allFilters.fuel.find(({ id }) => {
            return id === itemToRemove.value;
          });
          const subCategories = get(fuel, 'engines', []);
          const disabledSubcategories = subCategories.reduce(
            (categoriesToDisable, category) => {
              categoriesToDisable[category.label] = false;
              return categoriesToDisable;
            },
            {}
          );
          this.setFilters({
            fuel: {
              ...this.parameters.filters.fuel,
              [itemToRemove.value]: false,
            },
            engine: {
              ...this.parameters.filters.engine,
              ...disabledSubcategories,
            },
            engineType: {
              ...this.parameters.filters.engineType,
              [itemToRemove.value]: false,
              ...disabledSubcategories,
            },
          });
        }
      },
      removeTransmissionTypeFilter(filterItem) {
        const transmissionCategories = [
          'transmissionType',
          'transmission',
          'driveType',
        ];
        const newTransmissionCategories = transmissionCategories.reduce(
          (filters, key) => {
            if (
              typeof this.parameters.filters[key][filterItem.value] !==
              'undefined'
            ) {
              filters[key] = {
                ...this.parameters.filters[key],
                [filterItem.value]: false,
              };
            }
            return filters;
          },
          {}
        );
        return {
          ...this.parameters.filters,
          ...newTransmissionCategories,
        };
      },
      removeFilter(item) {
        const updatedKey = this.prepareFilterKey(item);
        let updatedFilterCategory = {};
        this.$set(this, 'allCars', []);

        if (updatedKey === 'radius') {
          // TODO: uncomment when location filter will be enabled
          // updatedFilterCategory = +this.aemConfig.resultsRange;
          updatedFilterCategory = null;
        } else if (updatedKey === 'transmissionType') {
          updatedFilterCategory = this.removeTransmissionTypeFilter(item);
        } else {
          updatedFilterCategory = {
            ...this.parameters.filters[updatedKey],
            [item.value]: false,
          };
        }
        if (updatedKey === 'engineType') {
          this.removeEngineFilter(item);
        } else if (updatedKey === 'transmissionType') {
          this.setFilters(updatedFilterCategory);
        } else if (updatedKey === 'price') {
          this.$emit('updatePriceValue', [
            this.priceRange.priceMin,
            this.priceRange.priceMax,
          ]);
        } else {
          this.setFilters({
            [updatedKey]: updatedFilterCategory,
          });
        }
      },
      removeAllFilters() {
        this.$set(this, 'allCars', []);
        this.$emit('resetAllFilters');
      },
      updateSortingModal(sortingField) {
        this.$set(this, 'allCars', []);
        this.$emit('updateSorting', {
          sortingField,
        });
      },
      updateSortFields(object) {
        this.$set(this, 'allCars', []);
        this.$emit('updateSorting', object);
      },
      updatePage(index) {
        this.$emit('updateSorting', { page: index });
      },
      selectedSort(select) {
        window.scrollTo(0, 0);
        this.$set(this, 'allCars', []);
        this.$emit('updateSorting', {
          page: 1,
          pagePerPage: 10,
          sortingField: select.label,
        });
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(`${err.stack}\n\nfound in ${info} inside Stockcar component`);
      this.$emit('error', err);
      return false;
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".banner[data-v-7098add2]{position:relative;background-color:#fbedc9;width:100%;min-height:72px;height:auto;top:-35px;display:-webkit-box;display:-ms-flexbox;display:flex}[dir=rtl] .banner[data-v-7098add2]{-webkit-transform:rotateY(180deg);transform:rotateY(180deg);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse}div[data-v-7098add2] a{color:#262626;white-space:nowrap;text-decoration:underline}.banner[data-v-7098add2]>:nth-child(3){margin-left:auto}#banner-text[data-v-7098add2]{margin-left:35px}[dir=rtl] #banner-text[data-v-7098add2]{-webkit-transform:rotateY(180deg);transform:rotateY(180deg)}.close-button[data-v-7098add2]{margin-bottom:unset}@media (max-width:960px){.banner[data-v-7098add2]>:first-child{-ms-flex-item-align:start;align-self:flex-start;padding-top:20px}.banner[data-v-7098add2]>:nth-child(3){-ms-flex-item-align:start;align-self:flex-start;padding-top:6px}}@media (max-width:1366px){.banner[data-v-7098add2]{width:100vw!important;margin-left:-50vw;left:50%}[dir=rtl] .banner[data-v-7098add2]{width:100vw!important;margin-right:-50vw;right:50%}}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var GeneralInfoBanner = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.isEnabled && _vm.text)?_c('div',{staticClass:"tw-px-ng-400 tw-inline-flex tw-items-center banner"},[_vm._m(0),_vm._v(" "),_c('TextBlock',{staticClass:"tw-text-grey-900 tw-pb-400 tw-pt-400",attrs:{"id":"banner-text","typo":"body-1"},domProps:{"innerHTML":_vm._s(_vm.text)}}),_vm._v(" "),_c('button',{staticClass:"reset-button reset-button-hover tw-cursor-pointer tw-text-grey-900 tw-text-icon-2xl icon-close-x close-button",on:{"click":function($event){return _vm.onClose()}}})],1):_vm._e()},staticRenderFns: [function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"disclaimer-icon"},[_c('div',{staticClass:"tw-relative tw-border-solid tw-rounded-full tw-border-200 tw-border-grey-900 tw-ml-200 tw-inline-block tw-text-m"},[_c('span',{staticClass:"icon-info-i tw-text-grey-900 tw-flex"})])])}],_scopeId: 'data-v-7098add2',
    name: 'GeneralInfoBanner',
    components: {
      TextBlock,
    },
    props: {
      text: {
        type: String,
        default: '',
      },
      isEnabled: {
        type: Boolean,
      }
    },
    methods: {
      onClose() {
        this.isEnabled = false;
      }
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var StockcarListPage = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-container"},[_c('GeneralInfoBanner',{attrs:{"is-enabled":_vm.aemConfig.enableGeneralInfoBanner,"text":_vm.aemConfig.generalInfoBannerText}}),_vm._v(" "),_c('StockcarListContent',{attrs:{"aem-config":_vm.aemConfig,"i18n":_vm.i18n,"parameters":_vm.parameters,"current-geolocation":_vm.currentGeolocation,"price-range":_vm.priceRange,"per-page":_vm.perPage,"page":_vm.page,"currency-format":_vm.aemConfig.currencyConfiguration,"data-tailwind":""},on:{"updateSorting":_vm.updateSorting,"updatePriceRange":_vm.updatePriceRange,"updatePriceValue":_vm.updatePriceValue,"resetAllFilters":_vm.resetAllFilters,"changeFilters":_vm.changeFilters}})],1)},staticRenderFns: [],
    name: 'StockcarListPage',
    components: {
      StockcarListContent,
      GeneralInfoBanner,
    },
    mixins: [stockcarPageMixin, stockcarDetecSizeMixin],
    data() {
      return {
        sortedLabelTransformed,
        parameters: {
          sorting: defaultSorting,
          filters: {},
        },
        currentGeolocation: null,
        // price range object is only because to not fire twice request when getting overallMax/Min value
        priceRange: {
          priceMin: 0,
          priceMax: 0,
        },
        page: 1,
        sortingField: sortedLabelTransformed.relevance,
        perPage: 10,
      };
    },
    watch: {
      device() {
        if (this.device === 'mobile') {
          this.updateSorting({
            perPage: 10,
            page: this.page,
            sortingField: this.sortingField.name,
          });
        }
      },
    },
    created() {
      console.log('Stockcar List Page created');
      if (this.$router.currentRoute.query.filters) {
        const filters = JSON.parse(this.$router.currentRoute.query.filters);
        if (filters.price) {
          this.priceRange.values = filters.price;
        }
        this.parameters = {
          ...this.parameters,
          filters: {
            ...filters,
          },
        };
      }

      if (this.$router.currentRoute.query.sorting) {
        const sorting = JSON.parse(this.$router.currentRoute.query.sorting);
        if (Object.keys(sorting).length > 0) {
          this.parameters = {
            ...this.parameters,
            sorting,
          };
        }
      }
      navigator.permissions &&
        navigator.permissions
          .query({ name: 'geolocation' })
          .then((PermissionStatus) => {
            if (PermissionStatus.state === 'granted') {
              initGeoLocation().then((position) => {
                this.currentGeolocation = position;
              });
            }
          });

      dispatchEvent(TRACKING_EVENT_ENTER_PAGE, {
        name: PAGE_TYPE_RESULTS_PAGE,
      });
    },
    methods: {
      updatePriceRange({ priceMin, priceMax }) {
        this.priceRange.priceMin = priceMin;
        this.priceRange.priceMax = priceMax;
        if (!this.priceRange.values) {
          this.$set(this.priceRange, 'values', [priceMin, priceMax]);
        }
      },
      updatePriceValue(newPrices) {
        this.$set(this.priceRange, 'values', newPrices);
        this.changeFilters({
          price: newPrices,
        });
      },
      updateSorting({
        perPage = this.perPage,
        page = this.page,
        sortingField = this.sortingField && this.sortingField.key,
      }) {
        const sortingTransformed = this.sortedLabelTransformed[sortingField];
        this.perPage = perPage;
        this.page = page;
        this.sortingField = sortingTransformed;
        const offset = this.page * this.perPage - this.perPage;
        const parametersSorting = {
          perPage: ['limit', this.perPage],
          sortingField: ['sortby', this.sortingField.name, sortingField],
          sortingDirection: ['sortdirection', this.sortingField.direction],
          offset: ['offset', Math.max(offset, 0)],
        };
        this.parameters = {
          ...this.parameters,
          sorting: parametersSorting,
        };

        dispatchEvent(TRACKING_EVENT_SORT_CHANGE, {
          sort: parametersSorting,
          filter: this.parameters.filters,
          location: this.currentGeolocation,
        });
      },
      resetAllFilters() {
        this.$set(this.priceRange, 'values', [
          this.priceRange.priceMin,
          this.priceRange.priceMax,
        ]);
        this.parameters = {
          ...this.parameters,
          filters: {},
        };
      },
      changeFilters(filters) {
        const newFilters = {
          ...this.parameters.filters,
          ...filters,
        };

        if (newFilters.radius === null) {
          delete newFilters.radius;
        }

        this.parameters = {
          ...this.parameters,
          filters: newFilters,
        };

        dispatchEvent(TRACKING_EVENT_FILTER_CHANGE, {
          filter: newFilters,
          location: this.currentGeolocation,
        });
      },
    },
    mounted() {
      dispatchEvent(TRACKING_EVENT_FILTER_CHANGE, {
        filter: this.parameters.filters,
        location: this.currentGeolocation,
      });
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside StockcarRequest component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  /*
  @bmwkit/google-api-wrapper
  Version: 0.0.1
  (c) Interone
  */
  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();
  var GoogleApiWrapper = {
    name: 'GoogleApiWrapper',
    props: {
      googleMapApiUrl: {
        type: String,
        required: true
      }
    },
    render(createElement) {
      return createElement('script', {
        attrs: {
          src: this.googleMapApiUrl,
        },
        on: {
          load: () => {
            this.$emit('loaded', true);
          }
        }
      });
    },
    errorCaptured(err, vm, info) {
      console.warn(`${err.stack}\n\nfound in ${info} inside GoogleApiWrapper component`);
      this.$emit('error', err);
      return false
    }
  };

  /*
  @bmwkit/back-button
  Version: 0.0.1
  (c) Interone
  */
  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css="i[data-v-59e1399c]:before{margin-left:-11px;color:#306acd}html[dir=rtl] .icon-arrow-left[data-v-59e1399c]{-webkit-transform:rotate(180deg);transform:rotate(180deg)}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();














  var BackButton = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-flex"},[_c('router-link',{class:'tw-no-underline tw-flex tw-items-center tw-text-grey-900',attrs:{"to":_vm.url}},[_c('i',{staticClass:"icon-arrow-left tw-text-xl"}),_vm._v(" "),_c('span',{staticClass:"tw-font-bmw-bold tw-text-black tw-inline-block tw-text-xs"},[_vm._v(" "+_vm._s(_vm.label)+" ")])])],1)},staticRenderFns: [],_scopeId: 'data-v-59e1399c',
    name: 'BackButton',
    props: {
      url: {
        type: Object,
        default: () => {},
      },
      label: {
        type: String,
        default: '',
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside BackButton component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var StockcarDetailsBackButton = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-w-full tw-mb-400"},[_c('BackButton',{attrs:{"url":_vm.url,"label":_vm.label}})],1)},staticRenderFns: [],
    name: 'StockcarDetailsBackButton',
    components: { BackButton },
    props: {
      label: {
        type: String,
        default: '',
      },
      filters: {
        type: Object,
        required: true
      },
      sorting: {
        type: Object,
        required: true
      },
    },
    data() {
      return {
        url: {
          path: '/results',
          query: {
            filters: JSON.stringify(this.filters),
            sorting: JSON.stringify(this.sorting),
          },
        },
      };
    },
  };

  /*
  @bmwkit/base-image-card
  Version: 0.0.1
  (c) Interone
  */
  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

















  var BaseImageCard = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-w-full"},[_c('div',{ref:"image-container",staticClass:"tw-w-full"},[_vm._t("image",null,{"sizes":_vm.sizes})],2),_vm._v(" "),_c('div',{staticClass:"tw-w-full tw-font-bmw-light"},[_vm._t("default")],2)])},staticRenderFns: [],
    name: 'BaseImageCard',
    data() {
      return {
        sizes: {
          width: 0,
          height: 0,
        },
        imageRatio: 1.77,
      };
    },
    mounted() {
      this.sizes = {
        width: this.$refs['image-container'].scrollWidth,
        height: Number.parseInt(
          (this.$refs['image-container'].scrollWidth / this.imageRatio).toString()
        ),
      };
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside BaseImageCard component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  /*
  @bmwkit/thumbnail-cosy-image
  Version: 0.0.1
  (c) Interone
  */

  const RESP_OPTIONS$1 = {
    options: {
      JPEG: 'JPEG',
      PNG: 'PNG',
      WEBP: 'WEBP'
    },
    value: 'JPEG',
  };

  const BRAND_OPTIONS$1 = {
    options: {
      WBBM: 'WBBM',
      WBABM: 'WBABM',
      WBBI: 'WBBI',
      RR: 'RR',
    },
    value: 'WBBM',
  };

  const CUT_RANGE$1 = {
    range: true,
    step: 1,
    min: 0,
    max: 3,
    value: 0,
  };

  const CLIENT$1 = {
    options: {
      EMPTYVALUE: '',
      STATIC: 'STATIC',
      NCC: 'NCC',
      NVCO: 'NVCO'
    },
    value: 'STATIC',
  };

  const VIEW_OPTIONS$1 = {
    options: {
      EXTERIEUR: 'EXTERIEUR',
      INTERIEUR: 'INTERIEUR',
      CENTERPANO: 'CENTERPANO',
      VIDEO: 'VIDEO',
      STATIC: 'STATIC',
      static_wide: 'static_wide',
      static_1560x880: 'static_1560x880',
      paint_839x839: 'paint_839x839',
      paint_470x263: 'paint_470x263',
      paint_1500x839: 'paint_1500x839',
      rim_1000x1000_transparent: 'rim_1000x1000_transparent',
      trim_839x839: 'trim_839x839',
      trim_1500x839: 'trim_1500x839',
      fabric_839x839: 'fabric_839x839',
      fabric_1500x839: 'fabric_1500x839',
      softtop_839x839: 'softtop_839x839',
      EMPTY: '',
    },
    value: '',
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var ThumbnailCosyImage = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('CosyImage',{attrs:{"view":_vm.view,"width":_vm.width,"height":_vm.height,"alt":_vm.alt,"brand":_vm.brand,"client":_vm.client,"resp":_vm.resp,"vehicle":_vm.vehicle,"paint":_vm.paint,"angle":0,"cut":_vm.cut,"background":_vm.background,"sa":_vm.sa,"fabric":_vm.fabric,"cosy-url":_vm.cosyUrl,"cosy-prefix":_vm.cosyPrefix,"cosy-token":_vm.cosyToken,"prod-date":_vm.prodDate,"pov":""}})},staticRenderFns: [],
    name: 'ThumbnailCosyImage',
    components: { CosyImage },
    props: {
      width: {
        type: Number,
        default: 90,
      },
      height: {
        type: Number,
        default: 90,
      },
      alt: {
        /* Custom string value */
        type: String,
        default: 'Not found',
      },
      client: {
        type: String,
        default: CLIENT$1.value,
      },
      cut: {
        type: Number,
        default: CUT_RANGE$1.value,
      },
      brand: {
        type: String,
        default: BRAND_OPTIONS$1.value,
      },
      resp: {
        type: String,
        default: RESP_OPTIONS$1.value,
      },
      vehicle: {
        type: String,
        default: '',
      },
      paint: {
        type: String,
        default: '',
      },
      view: {
        type: String,
        default: VIEW_OPTIONS$1.options.paint_839x839,
      },
      background: {
        type: String,
        default: '',
      },
      sa: {
        type: String,
        default: '',
      },
      fabric: {
        type: String,
        default: '',
      },
      cosyUrl: {
        type: String,
        default: 'https://prod.cosy.bmw.cloud/bmwweb/cosySec',
      },
      cosyPrefix: {
        type: String,
        default: '',
      },
      cosyToken: {
        type: String,
        default: '',
      },
      prodDate: {
        type: String,
        default: '',
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside ThumbnailCosyImage component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  /*
  @bmwkit/color-thumbnail
  Version: 0.0.1
  (c) Interone
  */

  const RESP_OPTIONS$2 = {
    options: {
      JPEG: 'JPEG',
      PNG: 'PNG',
      WEBP: 'WEBP'
    },
    value: 'JPEG',
  };

  const BRAND_OPTIONS$2 = {
    options: {
      WBBM: 'WBBM',
      WBABM: 'WBABM',
      WBBI: 'WBBI',
      RR: 'RR',
    },
    value: 'WBBM',
  };

  const VIEW_OPTIONS$2 = {
    options: {
      EXTERIEUR: 'EXTERIEUR',
      INTERIEUR: 'INTERIEUR',
      CENTERPANO: 'CENTERPANO',
      VIDEO: 'VIDEO',
      STATIC: 'STATIC',
      static_wide: 'static_wide',
      static_1560x880: 'static_1560x880',
      paint_839x839: 'paint_839x839',
      paint_470x263: 'paint_470x263',
      paint_1500x839: 'paint_1500x839',
      rim_1000x1000_transparent: 'rim_1000x1000_transparent',
      trim_839x839: 'trim_839x839',
      trim_1500x839: 'trim_1500x839',
      fabric_839x839: 'fabric_839x839',
      fabric_1500x839: 'fabric_1500x839',
      softtop_839x839: 'softtop_839x839',
      EMPTY: '',
    },
    value: '',
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".color-thumbnail[data-v-31b35482]{background-color:#f2f2f2}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var ColorThumbnail = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ThumbnailCosyImage',{attrs:{"view":_vm.view,"width":_vm.width,"height":_vm.height,"alt":_vm.alt,"brand":_vm.brand,"resp":_vm.resp,"paint":_vm.paint,"cosy-url":_vm.cosyUrl,"cosy-prefix":_vm.cosyPrefix,"cosy-token":_vm.cosyToken,"client":"STATIC","background":"ORIGINAL","prod-date":_vm.prodDate,"vehicle":_vm.vehicle}})},staticRenderFns: [],_scopeId: 'data-v-31b35482',
    name: 'ColorThumbnail',
    components: { ThumbnailCosyImage },
    props: {
      width: {
        type: Number,
        default: 90,
      },
      height: {
        type: Number,
        default: 90,
      },
      alt: {
        /* Custom string value */
        type: String,
        default: 'Not found',
      },
      brand: {
        type: String,
        default: BRAND_OPTIONS$2.value,
      },
      resp: {
        type: String,
        default: RESP_OPTIONS$2.value,
      },
      paint: {
        /* Custom string value */
        type: String,
        default: '',
      },
      view: {
        type: String,
        default: VIEW_OPTIONS$2.options.paint_839x839,
      },
      prodDate: {
        type: String,
        default: '',
      },
      vehicle: {
        type: String,
        default: '',
      },
      cosyUrl: {
        type: String,
        default: 'https://prod.cosy.bmw.cloud/bmwweb/cosySec',
      },
      cosyPrefix: {
        type: String,
        default: '',
      },
      cosyToken: {
        type: String,
        default: '',
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside ColorThumbnail component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".equipment-card-title{line-height:1.3}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var EquipmentCard = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('BaseImageCard',{scopedSlots:_vm._u([{key:"image",fn:function(scopeContent){return [(scopeContent.sizes.width > 0 && _vm.object)?_c('div',{staticClass:"tw-w-full tw-inline-block"},[(_vm.object[3] === 'paint')?_c('ColorThumbnail',{key:_vm.object[0],staticClass:"tw-w-full",attrs:{"paint":_vm.config.code,"brand":_vm.config.brand === 'bmwi' ? 'WBBI' : 'WBBM',"view":_vm.object[2],"width":scopeContent.sizes.width,"height":scopeContent.sizes.height}}):_vm._e(),_vm._v(" "),(_vm.object[3] === 'sa')?_c('ThumbnailCosyImage',{key:_vm.object[0],staticClass:"tw-w-full",attrs:{"sa":_vm.config.code,"brand":_vm.config.brand === 'bmwi' ? 'WBBI' : 'WBBM',"view":_vm.object[2],"width":scopeContent.sizes.width,"height":scopeContent.sizes.height}}):_vm._e()],1):_vm._e()]}}])},[_vm._v(" "),_c('div',{staticClass:"tw-block"},[_c('div',{staticClass:"tw-text-grey-500 tw-font-bmw-light tw-text-xs tw-mb-200 tw-mt-200"},[(_vm.object)?_c('span',[_vm._v(" "+_vm._s(_vm.object[1])+" ")]):_vm._e()]),_vm._v(" "),_c('h4',{staticClass:"equipment-card-title tw-font-bmw-light tw-text-m tw-text-black"},[_vm._v(" "+_vm._s(_vm.title)+" ")])])])},staticRenderFns: [],
    name: 'EquipmentThumbnail',
    components: { BaseImageCard, ColorThumbnail, ThumbnailCosyImage },
    props: {
      config: {
        type: Object,
        default() {
          return {};
        },
      },
      title: {
        type: String,
        default: '',
      },
      i18n: {
        type: Object,
        required: true,
      },
    },
    data() {
      return {
        object: {},
        labels: [
          ['colors', this.i18n.detailsPageIntExtColors, 'paint_1500x839', 'paint'],
          ['paint', this.i18n.detailsPageIntExtColors, 'paint_1500x839', 'paint'],
          ['mirrors', this.i18n.detailsPageIntExtMirrors, 'paint_1500x839', 'paint'],
          ['rooftops', this.i18n.detailsPageIntExtRooftops, 'paint_1500x839', 'paint'],
          ['rims', this.i18n.detailsPageIntExtRims, 'trim_1500x839', 'sa'],
          ['rim', this.i18n.detailsPageIntExtRims, 'trim_1500x839', 'sa'],
          ['wheels', this.i18n.detailsPageIntExtWheels, 'trim_1500x839', 'sa'],
          ['upholstery', this.i18n.detailsPageIntExtUpholstery, 'fabric_1500x839', 'sa'],
          ['trims', this.i18n.detailsPageIntExtTrims, 'trim_1500x839', 'sa'],
          ['trim', this.i18n.detailsPageIntExtTrims, 'trim_1500x839', 'sa'],
          ['interior worlds', this.i18n.detailsPageIntExtInteriorworld, 'paint_1500x839', 'sa'],
          ['default', this.i18n.detailsPageIntExtDefault, 'paint_1500x839', 'sa'],
        ],
      };
    },
    created() {
      this.object = this.labels.find(label => {
        if(this.config.category === undefined) {
          return label[0] === 'default';
        }
        return label[0] === this.config.category;
      });
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var StockcarDetailsEquipment = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-w-full tw-flex tw-flex-wrap"},_vm._l((_vm.config),function(element,key){return _c('div',{key:key,staticClass:"md:tw-w-1/2 tw-pr-300 tw-w-full tw-flex tw-float-left tw-mb-500 tw-lg-600",class:{ 'tw-pb-400': key < _vm.config.length - 2 }},[_c('EquipmentCard',{attrs:{"config":element.config,"title":element.title,"i18n":_vm.i18n}})],1)}),0)},staticRenderFns: [],
    name: 'StockcarDetailsEquipment',
    components: { EquipmentCard },
    mixins: [stockcarListComponentMixin],
    provide: {
      injectedFallbackImagePath: `${CLIENTLIBS_RESOURCES_PATH}${EQUIPMENT_IMAGE_FALLBACK_FILENAME}`,
    },
    props: {
      i18n: {
        type: Object,
        required: true,
      },
    },
  };

  /*
  base-core
  Version: 0.0.1
  (c) Interone
  */

  /*
  base-core
  Version: 0.0.1
  (c) Interone
  */

  const directionLabels$1 = { ltr: 'ltr', rtl: 'rtl' };

  var DirectionMixin$1 = {
    props: {
      direction: {
        type: String,
        default: directionLabels$1.ltr,
        validator(currDirection) {
          const { ltr, rtl } = directionLabels$1;
          return [ltr, rtl].some(direction => direction === currDirection);
        },
      },
    },
  };

  /*
  @bmwkit/pagination
  Version: 0.0.1
  (c) Interone
  */
  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".pagination-controls[data-v-438fd353]{width:12px;height:12px;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.pagination-scroller[data-v-438fd353]{-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

































  var Pagination = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"pagination-container tw-overflow-hidden",style:({
      width: `${_vm.containerWidth}px`,
    })},[_c('div',{staticClass:"tw-flex pagination-scroller",style:({
        transform: `translateX(${_vm.translation}px)`
      })},_vm._l((_vm.states),function(singleState){return _c('div',{key:singleState,ref:"dot",refInFor:true,staticClass:"tw-inline-block tw-px-100",attrs:{"data-glide-el":"controls"},on:{"click":function($event){return _vm.clickDot(singleState - 1);}}},[_c('div',{staticClass:"pagination-controls tw-rounded-full tw-border-transparent tw-cursor-pointer tw-inline-block",class:_vm.getPaginationControlClasses(singleState),style:({
            transform: `scale(${_vm.prepareScale(singleState - 1)})`
          })})])}),0)])},staticRenderFns: [],_scopeId: 'data-v-438fd353',
    name: 'Pagination',
    props: {
      states: {
        type: Number,
        default: 1,
      },
      state: {
        type: Number,
        default: 0,
      },
      paginationStyle: {
        type: String,
        default: 'blue',
      }
    },
    data() {
      const first = Math.max(0, this.state - 4);
      const last = first + 5;

      return {
        lastVisibleDot: last,
        firstVisibleDot: first,
        translation: 0,
        dotWidth: 0,
      };
    },
    computed: {
      containerWidth() {
        return Math.min(this.states, 6) * this.dotWidth;
      },
    },
    watch: {
      state() {
        this.movePagination(this.state);
      },
    },
    mounted() {
      this.dotWidth = this.$refs.dot[this.state].clientWidth;
      this.translation = this.dotWidth * this.firstVisibleDot * -1;
    },
    methods: {
      getPaginationControlClasses(index) {
        const isActive = this.state === index - 1;
        const isGreyStyle = this.paginationStyle === 'grey';
        return {
          'active': isActive,
          'tw-bg-primary-500': isActive && !isGreyStyle,
          'tw-bg-grey-900': isActive && isGreyStyle,
          'tw-bg-grey-400': !isActive && !isGreyStyle,
          'tw-bg-grey-500': !isActive && isGreyStyle,
        }
      },
      clickDot(number) {
        this.$emit('change', number);
        this.movePagination(number);
      },
      movePagination(number) {
        const elementWidth = this.$refs.dot[number].clientWidth;
        if (this.state === 0) {
          this.translation = 0;
          this.lastVisibleDot = 5;
          this.firstVisibleDot = 0;
        } else if (this.state === this.lastVisibleDot) {
          this.lastVisibleDot++;
          this.firstVisibleDot++;
          this.translation -= elementWidth;
        } else if (this.state === this.firstVisibleDot) {
          this.lastVisibleDot--;
          this.firstVisibleDot--;
          this.translation += elementWidth;
        }
      },
      prepareScale(state) {
        if (state !== 0 && (state > this.lastVisibleDot - 1 || state < this.firstVisibleDot + 1)) {
          return 0.5;
        } else if (this.state !== state) {
          return 8 / 12;
        }
        return 1;
      }
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside pageNavigation component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  /*!
   * Glide.js v3.3.0
   * (c) 2013-2019 Jędrzej Chałubek <jedrzej.chalubek@gmail.com> (http://jedrzejchalubek.com/)
   * Released under the MIT License.
   */

  var defaults$1 = {
    /**
     * Type of the movement.
     *
     * Available types:
     * `slider` - Rewinds slider to the start/end when it reaches the first or last slide.
     * `carousel` - Changes slides without starting over when it reaches the first or last slide.
     *
     * @type {String}
     */
    type: 'slider',

    /**
     * Start at specific slide number defined with zero-based index.
     *
     * @type {Number}
     */
    startAt: 0,

    /**
     * A number of slides visible on the single viewport.
     *
     * @type {Number}
     */
    perView: 1,

    /**
     * Focus currently active slide at a specified position in the track.
     *
     * Available inputs:
     * `center` - Current slide will be always focused at the center of a track.
     * `0,1,2,3...` - Current slide will be focused on the specified zero-based index.
     *
     * @type {String|Number}
     */
    focusAt: 0,

    /**
     * A size of the gap added between slides.
     *
     * @type {Number}
     */
    gap: 10,

    /**
     * Change slides after a specified interval. Use `false` for turning off autoplay.
     *
     * @type {Number|Boolean}
     */
    autoplay: false,

    /**
     * Stop autoplay on mouseover event.
     *
     * @type {Boolean}
     */
    hoverpause: true,

    /**
     * Allow for changing slides with left and right keyboard arrows.
     *
     * @type {Boolean}
     */
    keyboard: true,

    /**
     * Stop running `perView` number of slides from the end. Use this
     * option if you don't want to have an empty space after
     * a slider. Works only with `slider` type and a
     * non-centered `focusAt` setting.
     *
     * @type {Boolean}
     */
    bound: false,

    /**
     * Minimal swipe distance needed to change the slide. Use `false` for turning off a swiping.
     *
     * @type {Number|Boolean}
     */
    swipeThreshold: 80,

    /**
     * Minimal mouse drag distance needed to change the slide. Use `false` for turning off a dragging.
     *
     * @type {Number|Boolean}
     */
    dragThreshold: 120,

    /**
     * A maximum number of slides to which movement will be made on swiping or dragging. Use `false` for unlimited.
     *
     * @type {Number|Boolean}
     */
    perTouch: false,

    /**
     * Moving distance ratio of the slides on a swiping and dragging.
     *
     * @type {Number}
     */
    touchRatio: 0.5,

    /**
     * Angle required to activate slides moving on swiping or dragging.
     *
     * @type {Number}
     */
    touchAngle: 45,

    /**
     * Duration of the animation in milliseconds.
     *
     * @type {Number}
     */
    animationDuration: 400,

    /**
     * Allows looping the `slider` type. Slider will rewind to the first/last slide when it's at the start/end.
     *
     * @type {Boolean}
     */
    rewind: true,

    /**
     * Duration of the rewinding animation of the `slider` type in milliseconds.
     *
     * @type {Number}
     */
    rewindDuration: 800,

    /**
     * Easing function for the animation.
     *
     * @type {String}
     */
    animationTimingFunc: 'cubic-bezier(.165, .840, .440, 1)',

    /**
     * Throttle costly events at most once per every wait milliseconds.
     *
     * @type {Number}
     */
    throttle: 10,

    /**
     * Moving direction mode.
     *
     * Available inputs:
     * - 'ltr' - left to right movement,
     * - 'rtl' - right to left movement.
     *
     * @type {String}
     */
    direction: 'ltr',

    /**
     * The distance value of the next and previous viewports which
     * have to peek in the current view. Accepts number and
     * pixels as a string. Left and right peeking can be
     * set up separately with a directions object.
     *
     * For example:
     * `100` - Peek 100px on the both sides.
     * { before: 100, after: 50 }` - Peek 100px on the left side and 50px on the right side.
     *
     * @type {Number|String|Object}
     */
    peek: 0,

    /**
     * Collection of options applied at specified media breakpoints.
     * For example: display two slides per view under 800px.
     * `{
     *   '800px': {
     *     perView: 2
     *   }
     * }`
     */
    breakpoints: {},

    /**
     * Collection of internally used HTML classes.
     *
     * @todo Refactor `slider` and `carousel` properties to single `type: { slider: '', carousel: '' }` object
     * @type {Object}
     */
    classes: {
      direction: {
        ltr: 'glide--ltr',
        rtl: 'glide--rtl'
      },
      slider: 'glide--slider',
      carousel: 'glide--carousel',
      swipeable: 'glide--swipeable',
      dragging: 'glide--dragging',
      cloneSlide: 'glide__slide--clone',
      activeNav: 'glide__bullet--active',
      activeSlide: 'glide__slide--active',
      disabledArrow: 'glide__arrow--disabled'
    }
  };

  /**
   * Outputs warning message to the bowser console.
   *
   * @param  {String} msg
   * @return {Void}
   */
  function warn(msg) {
    console.error("[Glide warn]: " + msg);
  }

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var get$3 = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  var inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  var possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  /**
   * Converts value entered as number
   * or string to integer value.
   *
   * @param {String} value
   * @returns {Number}
   */
  function toInt(value) {
    return parseInt(value);
  }

  /**
   * Converts value entered as number
   * or string to flat value.
   *
   * @param {String} value
   * @returns {Number}
   */
  function toFloat(value) {
    return parseFloat(value);
  }

  /**
   * Indicates whether the specified value is a string.
   *
   * @param  {*}   value
   * @return {Boolean}
   */
  function isString$1(value) {
    return typeof value === 'string';
  }

  /**
   * Indicates whether the specified value is an object.
   *
   * @param  {*} value
   * @return {Boolean}
   *
   * @see https://github.com/jashkenas/underscore
   */
  function isObject$3(value) {
    var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);

    return type === 'function' || type === 'object' && !!value; // eslint-disable-line no-mixed-operators
  }

  /**
   * Indicates whether the specified value is a number.
   *
   * @param  {*} value
   * @return {Boolean}
   */
  function isNumber$1(value) {
    return typeof value === 'number';
  }

  /**
   * Indicates whether the specified value is a function.
   *
   * @param  {*} value
   * @return {Boolean}
   */
  function isFunction$3(value) {
    return typeof value === 'function';
  }

  /**
   * Indicates whether the specified value is undefined.
   *
   * @param  {*} value
   * @return {Boolean}
   */
  function isUndefined$1(value) {
    return typeof value === 'undefined';
  }

  /**
   * Indicates whether the specified value is an array.
   *
   * @param  {*} value
   * @return {Boolean}
   */
  function isArray$3(value) {
    return value.constructor === Array;
  }

  /**
   * Creates and initializes specified collection of extensions.
   * Each extension receives access to instance of glide and rest of components.
   *
   * @param {Object} glide
   * @param {Object} extensions
   *
   * @returns {Object}
   */
  function mount(glide, extensions, events) {
    var components = {};

    for (var name in extensions) {
      if (isFunction$3(extensions[name])) {
        components[name] = extensions[name](glide, components, events);
      } else {
        warn('Extension must be a function');
      }
    }

    for (var _name in components) {
      if (isFunction$3(components[_name].mount)) {
        components[_name].mount();
      }
    }

    return components;
  }

  /**
   * Defines getter and setter property on the specified object.
   *
   * @param  {Object} obj         Object where property has to be defined.
   * @param  {String} prop        Name of the defined property.
   * @param  {Object} definition  Get and set definitions for the property.
   * @return {Void}
   */
  function define(obj, prop, definition) {
    Object.defineProperty(obj, prop, definition);
  }

  /**
   * Sorts aphabetically object keys.
   *
   * @param  {Object} obj
   * @return {Object}
   */
  function sortKeys(obj) {
    return Object.keys(obj).sort().reduce(function (r, k) {
      r[k] = obj[k];

      return r[k], r;
    }, {});
  }

  /**
   * Merges passed settings object with default options.
   *
   * @param  {Object} defaults
   * @param  {Object} settings
   * @return {Object}
   */
  function mergeOptions(defaults, settings) {
    var options = _extends({}, defaults, settings);

    // `Object.assign` do not deeply merge objects, so we
    // have to do it manually for every nested object
    // in options. Although it does not look smart,
    // it's smaller and faster than some fancy
    // merging deep-merge algorithm script.
    if (settings.hasOwnProperty('classes')) {
      options.classes = _extends({}, defaults.classes, settings.classes);

      if (settings.classes.hasOwnProperty('direction')) {
        options.classes.direction = _extends({}, defaults.classes.direction, settings.classes.direction);
      }
    }

    if (settings.hasOwnProperty('breakpoints')) {
      options.breakpoints = _extends({}, defaults.breakpoints, settings.breakpoints);
    }

    return options;
  }

  var EventsBus = function () {
    /**
     * Construct a EventBus instance.
     *
     * @param {Object} events
     */
    function EventsBus() {
      var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      classCallCheck(this, EventsBus);

      this.events = events;
      this.hop = events.hasOwnProperty;
    }

    /**
     * Adds listener to the specifed event.
     *
     * @param {String|Array} event
     * @param {Function} handler
     */


    createClass(EventsBus, [{
      key: 'on',
      value: function on(event, handler) {
        if (isArray$3(event)) {
          for (var i = 0; i < event.length; i++) {
            this.on(event[i], handler);
          }
        }

        // Create the event's object if not yet created
        if (!this.hop.call(this.events, event)) {
          this.events[event] = [];
        }

        // Add the handler to queue
        var index = this.events[event].push(handler) - 1;

        // Provide handle back for removal of event
        return {
          remove: function remove() {
            delete this.events[event][index];
          }
        };
      }

      /**
       * Runs registered handlers for specified event.
       *
       * @param {String|Array} event
       * @param {Object=} context
       */

    }, {
      key: 'emit',
      value: function emit(event, context) {
        if (isArray$3(event)) {
          for (var i = 0; i < event.length; i++) {
            this.emit(event[i], context);
          }
        }

        // If the event doesn't exist, or there's no handlers in queue, just leave
        if (!this.hop.call(this.events, event)) {
          return;
        }

        // Cycle through events queue, fire!
        this.events[event].forEach(function (item) {
          item(context || {});
        });
      }
    }]);
    return EventsBus;
  }();

  var Glide = function () {
    /**
     * Construct glide.
     *
     * @param  {String} selector
     * @param  {Object} options
     */
    function Glide(selector) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      classCallCheck(this, Glide);

      this._c = {};
      this._t = [];
      this._e = new EventsBus();

      this.disabled = false;
      this.selector = selector;
      this.settings = mergeOptions(defaults$1, options);
      this.index = this.settings.startAt;
    }

    /**
     * Initializes glide.
     *
     * @param {Object} extensions Collection of extensions to initialize.
     * @return {Glide}
     */


    createClass(Glide, [{
      key: 'mount',
      value: function mount$$1() {
        var extensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        this._e.emit('mount.before');

        if (isObject$3(extensions)) {
          this._c = mount(this, extensions, this._e);
        } else {
          warn('You need to provide a object on `mount()`');
        }

        this._e.emit('mount.after');

        return this;
      }

      /**
       * Collects an instance `translate` transformers.
       *
       * @param  {Array} transformers Collection of transformers.
       * @return {Void}
       */

    }, {
      key: 'mutate',
      value: function mutate() {
        var transformers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        if (isArray$3(transformers)) {
          this._t = transformers;
        } else {
          warn('You need to provide a array on `mutate()`');
        }

        return this;
      }

      /**
       * Updates glide with specified settings.
       *
       * @param {Object} settings
       * @return {Glide}
       */

    }, {
      key: 'update',
      value: function update() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        this.settings = mergeOptions(this.settings, settings);

        if (settings.hasOwnProperty('startAt')) {
          this.index = settings.startAt;
        }

        this._e.emit('update');

        return this;
      }

      /**
       * Change slide with specified pattern. A pattern must be in the special format:
       * `>` - Move one forward
       * `<` - Move one backward
       * `={i}` - Go to {i} zero-based slide (eq. '=1', will go to second slide)
       * `>>` - Rewinds to end (last slide)
       * `<<` - Rewinds to start (first slide)
       *
       * @param {String} pattern
       * @return {Glide}
       */

    }, {
      key: 'go',
      value: function go(pattern) {
        this._c.Run.make(pattern);

        return this;
      }

      /**
       * Move track by specified distance.
       *
       * @param {String} distance
       * @return {Glide}
       */

    }, {
      key: 'move',
      value: function move(distance) {
        this._c.Transition.disable();
        this._c.Move.make(distance);

        return this;
      }

      /**
       * Destroy instance and revert all changes done by this._c.
       *
       * @return {Glide}
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this._e.emit('destroy');

        return this;
      }

      /**
       * Start instance autoplaying.
       *
       * @param {Boolean|Number} interval Run autoplaying with passed interval regardless of `autoplay` settings
       * @return {Glide}
       */

    }, {
      key: 'play',
      value: function play() {
        var interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        if (interval) {
          this.settings.autoplay = interval;
        }

        this._e.emit('play');

        return this;
      }

      /**
       * Stop instance autoplaying.
       *
       * @return {Glide}
       */

    }, {
      key: 'pause',
      value: function pause() {
        this._e.emit('pause');

        return this;
      }

      /**
       * Sets glide into a idle status.
       *
       * @return {Glide}
       */

    }, {
      key: 'disable',
      value: function disable() {
        this.disabled = true;

        return this;
      }

      /**
       * Sets glide into a active status.
       *
       * @return {Glide}
       */

    }, {
      key: 'enable',
      value: function enable() {
        this.disabled = false;

        return this;
      }

      /**
       * Adds cuutom event listener with handler.
       *
       * @param  {String|Array} event
       * @param  {Function} handler
       * @return {Glide}
       */

    }, {
      key: 'on',
      value: function on(event, handler) {
        this._e.on(event, handler);

        return this;
      }

      /**
       * Checks if glide is a precised type.
       *
       * @param  {String} name
       * @return {Boolean}
       */

    }, {
      key: 'isType',
      value: function isType(name) {
        return this.settings.type === name;
      }

      /**
       * Gets value of the core options.
       *
       * @return {Object}
       */

    }, {
      key: 'settings',
      get: function get$$1() {
        return this._o;
      }

      /**
       * Sets value of the core options.
       *
       * @param  {Object} o
       * @return {Void}
       */
      ,
      set: function set$$1(o) {
        if (isObject$3(o)) {
          this._o = o;
        } else {
          warn('Options must be an `object` instance.');
        }
      }

      /**
       * Gets current index of the slider.
       *
       * @return {Object}
       */

    }, {
      key: 'index',
      get: function get$$1() {
        return this._i;
      }

      /**
       * Sets current index a slider.
       *
       * @return {Object}
       */
      ,
      set: function set$$1(i) {
        this._i = toInt(i);
      }

      /**
       * Gets type name of the slider.
       *
       * @return {String}
       */

    }, {
      key: 'type',
      get: function get$$1() {
        return this.settings.type;
      }

      /**
       * Gets value of the idle status.
       *
       * @return {Boolean}
       */

    }, {
      key: 'disabled',
      get: function get$$1() {
        return this._d;
      }

      /**
       * Sets value of the idle status.
       *
       * @return {Boolean}
       */
      ,
      set: function set$$1(status) {
        this._d = !!status;
      }
    }]);
    return Glide;
  }();

  function Run (Glide, Components, Events) {
    var Run = {
      /**
       * Initializes autorunning of the glide.
       *
       * @return {Void}
       */
      mount: function mount() {
        this._o = false;
      },


      /**
       * Makes glides running based on the passed moving schema.
       *
       * @param {String} move
       */
      make: function make(move) {
        var _this = this;

        if (!Glide.disabled) {
          Glide.disable();

          this.move = move;

          Events.emit('run.before', this.move);

          this.calculate();

          Events.emit('run', this.move);

          Components.Transition.after(function () {
            if (_this.isStart()) {
              Events.emit('run.start', _this.move);
            }

            if (_this.isEnd()) {
              Events.emit('run.end', _this.move);
            }

            if (_this.isOffset('<') || _this.isOffset('>')) {
              _this._o = false;

              Events.emit('run.offset', _this.move);
            }

            Events.emit('run.after', _this.move);

            Glide.enable();
          });
        }
      },


      /**
       * Calculates current index based on defined move.
       *
       * @return {Void}
       */
      calculate: function calculate() {
        var move = this.move,
            length = this.length;
        var steps = move.steps,
            direction = move.direction;


        var countableSteps = isNumber$1(toInt(steps)) && toInt(steps) !== 0;

        switch (direction) {
          case '>':
            if (steps === '>') {
              Glide.index = length;
            } else if (this.isEnd()) {
              if (!(Glide.isType('slider') && !Glide.settings.rewind)) {
                this._o = true;

                Glide.index = 0;
              }
            } else if (countableSteps) {
              Glide.index += Math.min(length - Glide.index, -toInt(steps));
            } else {
              Glide.index++;
            }
            break;

          case '<':
            if (steps === '<') {
              Glide.index = 0;
            } else if (this.isStart()) {
              if (!(Glide.isType('slider') && !Glide.settings.rewind)) {
                this._o = true;

                Glide.index = length;
              }
            } else if (countableSteps) {
              Glide.index -= Math.min(Glide.index, toInt(steps));
            } else {
              Glide.index--;
            }
            break;

          case '=':
            Glide.index = steps;
            break;

          default:
            warn('Invalid direction pattern [' + direction + steps + '] has been used');
            break;
        }
      },


      /**
       * Checks if we are on the first slide.
       *
       * @return {Boolean}
       */
      isStart: function isStart() {
        return Glide.index === 0;
      },


      /**
       * Checks if we are on the last slide.
       *
       * @return {Boolean}
       */
      isEnd: function isEnd() {
        return Glide.index === this.length;
      },


      /**
       * Checks if we are making a offset run.
       *
       * @param {String} direction
       * @return {Boolean}
       */
      isOffset: function isOffset(direction) {
        return this._o && this.move.direction === direction;
      }
    };

    define(Run, 'move', {
      /**
       * Gets value of the move schema.
       *
       * @returns {Object}
       */
      get: function get() {
        return this._m;
      },


      /**
       * Sets value of the move schema.
       *
       * @returns {Object}
       */
      set: function set(value) {
        var step = value.substr(1);

        this._m = {
          direction: value.substr(0, 1),
          steps: step ? toInt(step) ? toInt(step) : step : 0
        };
      }
    });

    define(Run, 'length', {
      /**
       * Gets value of the running distance based
       * on zero-indexing number of slides.
       *
       * @return {Number}
       */
      get: function get() {
        var settings = Glide.settings;
        var length = Components.Html.slides.length;

        // If the `bound` option is acitve, a maximum running distance should be
        // reduced by `perView` and `focusAt` settings. Running distance
        // should end before creating an empty space after instance.

        if (Glide.isType('slider') && settings.focusAt !== 'center' && settings.bound) {
          return length - 1 - (toInt(settings.perView) - 1) + toInt(settings.focusAt);
        }

        return length - 1;
      }
    });

    define(Run, 'offset', {
      /**
       * Gets status of the offsetting flag.
       *
       * @return {Boolean}
       */
      get: function get() {
        return this._o;
      }
    });

    return Run;
  }

  /**
   * Returns a current time.
   *
   * @return {Number}
   */
  function now$1() {
    return new Date().getTime();
  }

  /**
   * Returns a function, that, when invoked, will only be triggered
   * at most once during a given window of time.
   *
   * @param {Function} func
   * @param {Number} wait
   * @param {Object=} options
   * @return {Function}
   *
   * @see https://github.com/jashkenas/underscore
   */
  function throttle$2(func, wait, options) {
    var timeout = void 0,
        context = void 0,
        args = void 0,
        result = void 0;
    var previous = 0;
    if (!options) options = {};

    var later = function later() {
      previous = options.leading === false ? 0 : now$1();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function throttled() {
      var at = now$1();
      if (!previous && options.leading === false) previous = at;
      var remaining = wait - (at - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = at;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };

    throttled.cancel = function () {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  }

  var MARGIN_TYPE = {
    ltr: ['marginLeft', 'marginRight'],
    rtl: ['marginRight', 'marginLeft']
  };

  function Gaps (Glide, Components, Events) {
    var Gaps = {
      /**
       * Applies gaps between slides. First and last
       * slides do not receive it's edge margins.
       *
       * @param {HTMLCollection} slides
       * @return {Void}
       */
      apply: function apply(slides) {
        for (var i = 0, len = slides.length; i < len; i++) {
          var style = slides[i].style;
          var direction = Components.Direction.value;

          if (i !== 0) {
            style[MARGIN_TYPE[direction][0]] = this.value / 2 + 'px';
          } else {
            style[MARGIN_TYPE[direction][0]] = '';
          }

          if (i !== slides.length - 1) {
            style[MARGIN_TYPE[direction][1]] = this.value / 2 + 'px';
          } else {
            style[MARGIN_TYPE[direction][1]] = '';
          }
        }
      },


      /**
       * Removes gaps from the slides.
       *
       * @param {HTMLCollection} slides
       * @returns {Void}
      */
      remove: function remove(slides) {
        for (var i = 0, len = slides.length; i < len; i++) {
          var style = slides[i].style;

          style.marginLeft = '';
          style.marginRight = '';
        }
      }
    };

    define(Gaps, 'value', {
      /**
       * Gets value of the gap.
       *
       * @returns {Number}
       */
      get: function get() {
        return toInt(Glide.settings.gap);
      }
    });

    define(Gaps, 'grow', {
      /**
       * Gets additional dimentions value caused by gaps.
       * Used to increase width of the slides wrapper.
       *
       * @returns {Number}
       */
      get: function get() {
        return Gaps.value * (Components.Sizes.length - 1);
      }
    });

    define(Gaps, 'reductor', {
      /**
       * Gets reduction value caused by gaps.
       * Used to subtract width of the slides.
       *
       * @returns {Number}
       */
      get: function get() {
        var perView = Glide.settings.perView;

        return Gaps.value * (perView - 1) / perView;
      }
    });

    /**
     * Apply calculated gaps:
     * - after building, so slides (including clones) will receive proper margins
     * - on updating via API, to recalculate gaps with new options
     */
    Events.on(['build.after', 'update'], throttle$2(function () {
      Gaps.apply(Components.Html.wrapper.children);
    }, 30));

    /**
     * Remove gaps:
     * - on destroying to bring markup to its inital state
     */
    Events.on('destroy', function () {
      Gaps.remove(Components.Html.wrapper.children);
    });

    return Gaps;
  }

  /**
   * Finds siblings nodes of the passed node.
   *
   * @param  {Element} node
   * @return {Array}
   */
  function siblings(node) {
    if (node && node.parentNode) {
      var n = node.parentNode.firstChild;
      var matched = [];

      for (; n; n = n.nextSibling) {
        if (n.nodeType === 1 && n !== node) {
          matched.push(n);
        }
      }

      return matched;
    }

    return [];
  }

  /**
   * Checks if passed node exist and is a valid element.
   *
   * @param  {Element} node
   * @return {Boolean}
   */
  function exist(node) {
    if (node && node instanceof window.HTMLElement) {
      return true;
    }

    return false;
  }

  var TRACK_SELECTOR = '[data-glide-el="track"]';

  function Html (Glide, Components) {
    var Html = {
      /**
       * Setup slider HTML nodes.
       *
       * @param {Glide} glide
       */
      mount: function mount() {
        this.root = Glide.selector;
        this.track = this.root.querySelector(TRACK_SELECTOR);
        this.slides = Array.prototype.slice.call(this.wrapper.children).filter(function (slide) {
          return !slide.classList.contains(Glide.settings.classes.cloneSlide);
        });
      }
    };

    define(Html, 'root', {
      /**
       * Gets node of the glide main element.
       *
       * @return {Object}
       */
      get: function get() {
        return Html._r;
      },


      /**
       * Sets node of the glide main element.
       *
       * @return {Object}
       */
      set: function set(r) {
        if (isString$1(r)) {
          r = document.querySelector(r);
        }

        if (exist(r)) {
          Html._r = r;
        } else {
          warn('Root element must be a existing Html node');
        }
      }
    });

    define(Html, 'track', {
      /**
       * Gets node of the glide track with slides.
       *
       * @return {Object}
       */
      get: function get() {
        return Html._t;
      },


      /**
       * Sets node of the glide track with slides.
       *
       * @return {Object}
       */
      set: function set(t) {
        if (exist(t)) {
          Html._t = t;
        } else {
          warn('Could not find track element. Please use ' + TRACK_SELECTOR + ' attribute.');
        }
      }
    });

    define(Html, 'wrapper', {
      /**
       * Gets node of the slides wrapper.
       *
       * @return {Object}
       */
      get: function get() {
        return Html.track.children[0];
      }
    });

    return Html;
  }

  function Peek (Glide, Components, Events) {
    var Peek = {
      /**
       * Setups how much to peek based on settings.
       *
       * @return {Void}
       */
      mount: function mount() {
        this.value = Glide.settings.peek;
      }
    };

    define(Peek, 'value', {
      /**
       * Gets value of the peek.
       *
       * @returns {Number|Object}
       */
      get: function get() {
        return Peek._v;
      },


      /**
       * Sets value of the peek.
       *
       * @param {Number|Object} value
       * @return {Void}
       */
      set: function set(value) {
        if (isObject$3(value)) {
          value.before = toInt(value.before);
          value.after = toInt(value.after);
        } else {
          value = toInt(value);
        }

        Peek._v = value;
      }
    });

    define(Peek, 'reductor', {
      /**
       * Gets reduction value caused by peek.
       *
       * @returns {Number}
       */
      get: function get() {
        var value = Peek.value;
        var perView = Glide.settings.perView;

        if (isObject$3(value)) {
          return value.before / perView + value.after / perView;
        }

        return value * 2 / perView;
      }
    });

    /**
     * Recalculate peeking sizes on:
     * - when resizing window to update to proper percents
     */
    Events.on(['resize', 'update'], function () {
      Peek.mount();
    });

    return Peek;
  }

  function Move (Glide, Components, Events) {
    var Move = {
      /**
       * Constructs move component.
       *
       * @returns {Void}
       */
      mount: function mount() {
        this._o = 0;
      },


      /**
       * Calculates a movement value based on passed offset and currently active index.
       *
       * @param  {Number} offset
       * @return {Void}
       */
      make: function make() {
        var _this = this;

        var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

        this.offset = offset;

        Events.emit('move', {
          movement: this.value
        });

        Components.Transition.after(function () {
          Events.emit('move.after', {
            movement: _this.value
          });
        });
      }
    };

    define(Move, 'offset', {
      /**
       * Gets an offset value used to modify current translate.
       *
       * @return {Object}
       */
      get: function get() {
        return Move._o;
      },


      /**
       * Sets an offset value used to modify current translate.
       *
       * @return {Object}
       */
      set: function set(value) {
        Move._o = !isUndefined$1(value) ? toInt(value) : 0;
      }
    });

    define(Move, 'translate', {
      /**
       * Gets a raw movement value.
       *
       * @return {Number}
       */
      get: function get() {
        return Components.Sizes.slideWidth * Glide.index;
      }
    });

    define(Move, 'value', {
      /**
       * Gets an actual movement value corrected by offset.
       *
       * @return {Number}
       */
      get: function get() {
        var offset = this.offset;
        var translate = this.translate;

        if (Components.Direction.is('rtl')) {
          return translate + offset;
        }

        return translate - offset;
      }
    });

    /**
     * Make movement to proper slide on:
     * - before build, so glide will start at `startAt` index
     * - on each standard run to move to newly calculated index
     */
    Events.on(['build.before', 'run'], function () {
      Move.make();
    });

    return Move;
  }

  function Sizes (Glide, Components, Events) {
    var Sizes = {
      /**
       * Setups dimentions of slides.
       *
       * @return {Void}
       */
      setupSlides: function setupSlides() {
        var width = this.slideWidth + 'px';
        var slides = Components.Html.slides;

        for (var i = 0; i < slides.length; i++) {
          slides[i].style.width = width;
        }
      },


      /**
       * Setups dimentions of slides wrapper.
       *
       * @return {Void}
       */
      setupWrapper: function setupWrapper(dimention) {
        Components.Html.wrapper.style.width = this.wrapperSize + 'px';
      },


      /**
       * Removes applied styles from HTML elements.
       *
       * @returns {Void}
       */
      remove: function remove() {
        var slides = Components.Html.slides;

        for (var i = 0; i < slides.length; i++) {
          slides[i].style.width = '';
        }

        Components.Html.wrapper.style.width = '';
      }
    };

    define(Sizes, 'length', {
      /**
       * Gets count number of the slides.
       *
       * @return {Number}
       */
      get: function get() {
        return Components.Html.slides.length;
      }
    });

    define(Sizes, 'width', {
      /**
       * Gets width value of the glide.
       *
       * @return {Number}
       */
      get: function get() {
        return Components.Html.root.offsetWidth;
      }
    });

    define(Sizes, 'wrapperSize', {
      /**
       * Gets size of the slides wrapper.
       *
       * @return {Number}
       */
      get: function get() {
        return Sizes.slideWidth * Sizes.length + Components.Gaps.grow + Components.Clones.grow;
      }
    });

    define(Sizes, 'slideWidth', {
      /**
       * Gets width value of the single slide.
       *
       * @return {Number}
       */
      get: function get() {
        return Sizes.width / Glide.settings.perView - Components.Peek.reductor - Components.Gaps.reductor;
      }
    });

    /**
     * Apply calculated glide's dimensions:
     * - before building, so other dimentions (e.g. translate) will be calculated propertly
     * - when resizing window to recalculate sildes dimensions
     * - on updating via API, to calculate dimensions based on new options
     */
    Events.on(['build.before', 'resize', 'update'], function () {
      Sizes.setupSlides();
      Sizes.setupWrapper();
    });

    /**
     * Remove calculated glide's dimensions:
     * - on destoting to bring markup to its inital state
     */
    Events.on('destroy', function () {
      Sizes.remove();
    });

    return Sizes;
  }

  function Build (Glide, Components, Events) {
    var Build = {
      /**
       * Init glide building. Adds classes, sets
       * dimensions and setups initial state.
       *
       * @return {Void}
       */
      mount: function mount() {
        Events.emit('build.before');

        this.typeClass();
        this.activeClass();

        Events.emit('build.after');
      },


      /**
       * Adds `type` class to the glide element.
       *
       * @return {Void}
       */
      typeClass: function typeClass() {
        Components.Html.root.classList.add(Glide.settings.classes[Glide.settings.type]);
      },


      /**
       * Sets active class to current slide.
       *
       * @return {Void}
       */
      activeClass: function activeClass() {
        var classes = Glide.settings.classes;
        var slide = Components.Html.slides[Glide.index];

        if (slide) {
          slide.classList.add(classes.activeSlide);

          siblings(slide).forEach(function (sibling) {
            sibling.classList.remove(classes.activeSlide);
          });
        }
      },


      /**
       * Removes HTML classes applied at building.
       *
       * @return {Void}
       */
      removeClasses: function removeClasses() {
        var classes = Glide.settings.classes;

        Components.Html.root.classList.remove(classes[Glide.settings.type]);

        Components.Html.slides.forEach(function (sibling) {
          sibling.classList.remove(classes.activeSlide);
        });
      }
    };

    /**
     * Clear building classes:
     * - on destroying to bring HTML to its initial state
     * - on updating to remove classes before remounting component
     */
    Events.on(['destroy', 'update'], function () {
      Build.removeClasses();
    });

    /**
     * Remount component:
     * - on resizing of the window to calculate new dimentions
     * - on updating settings via API
     */
    Events.on(['resize', 'update'], function () {
      Build.mount();
    });

    /**
     * Swap active class of current slide:
     * - after each move to the new index
     */
    Events.on('move.after', function () {
      Build.activeClass();
    });

    return Build;
  }

  function Clones (Glide, Components, Events) {
    var Clones = {
      /**
       * Create pattern map and collect slides to be cloned.
       */
      mount: function mount() {
        this.items = [];

        if (Glide.isType('carousel')) {
          this.items = this.collect();
        }
      },


      /**
       * Collect clones with pattern.
       *
       * @return {Void}
       */
      collect: function collect() {
        var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var slides = Components.Html.slides;
        var _Glide$settings = Glide.settings,
            perView = _Glide$settings.perView,
            classes = _Glide$settings.classes;


        var peekIncrementer = +!!Glide.settings.peek;
        var part = perView + peekIncrementer;
        var start = slides.slice(0, part);
        var end = slides.slice(-part);

        for (var r = 0; r < Math.max(1, Math.floor(perView / slides.length)); r++) {
          for (var i = 0; i < start.length; i++) {
            var clone = start[i].cloneNode(true);

            clone.classList.add(classes.cloneSlide);

            items.push(clone);
          }

          for (var _i = 0; _i < end.length; _i++) {
            var _clone = end[_i].cloneNode(true);

            _clone.classList.add(classes.cloneSlide);

            items.unshift(_clone);
          }
        }

        return items;
      },


      /**
       * Append cloned slides with generated pattern.
       *
       * @return {Void}
       */
      append: function append() {
        var items = this.items;
        var _Components$Html = Components.Html,
            wrapper = _Components$Html.wrapper,
            slides = _Components$Html.slides;


        var half = Math.floor(items.length / 2);
        var prepend = items.slice(0, half).reverse();
        var append = items.slice(half, items.length);
        var width = Components.Sizes.slideWidth + 'px';

        for (var i = 0; i < append.length; i++) {
          wrapper.appendChild(append[i]);
        }

        for (var _i2 = 0; _i2 < prepend.length; _i2++) {
          wrapper.insertBefore(prepend[_i2], slides[0]);
        }

        for (var _i3 = 0; _i3 < items.length; _i3++) {
          items[_i3].style.width = width;
        }
      },


      /**
       * Remove all cloned slides.
       *
       * @return {Void}
       */
      remove: function remove() {
        var items = this.items;


        for (var i = 0; i < items.length; i++) {
          Components.Html.wrapper.removeChild(items[i]);
        }
      }
    };

    define(Clones, 'grow', {
      /**
       * Gets additional dimentions value caused by clones.
       *
       * @return {Number}
       */
      get: function get() {
        return (Components.Sizes.slideWidth + Components.Gaps.value) * Clones.items.length;
      }
    });

    /**
     * Append additional slide's clones:
     * - while glide's type is `carousel`
     */
    Events.on('update', function () {
      Clones.remove();
      Clones.mount();
      Clones.append();
    });

    /**
     * Append additional slide's clones:
     * - while glide's type is `carousel`
     */
    Events.on('build.before', function () {
      if (Glide.isType('carousel')) {
        Clones.append();
      }
    });

    /**
     * Remove clones HTMLElements:
     * - on destroying, to bring HTML to its initial state
     */
    Events.on('destroy', function () {
      Clones.remove();
    });

    return Clones;
  }

  var EventsBinder = function () {
    /**
     * Construct a EventsBinder instance.
     */
    function EventsBinder() {
      var listeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      classCallCheck(this, EventsBinder);

      this.listeners = listeners;
    }

    /**
     * Adds events listeners to arrows HTML elements.
     *
     * @param  {String|Array} events
     * @param  {Element|Window|Document} el
     * @param  {Function} closure
     * @param  {Boolean|Object} capture
     * @return {Void}
     */


    createClass(EventsBinder, [{
      key: 'on',
      value: function on(events, el, closure) {
        var capture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

        if (isString$1(events)) {
          events = [events];
        }

        for (var i = 0; i < events.length; i++) {
          this.listeners[events[i]] = closure;

          el.addEventListener(events[i], this.listeners[events[i]], capture);
        }
      }

      /**
       * Removes event listeners from arrows HTML elements.
       *
       * @param  {String|Array} events
       * @param  {Element|Window|Document} el
       * @param  {Boolean|Object} capture
       * @return {Void}
       */

    }, {
      key: 'off',
      value: function off(events, el) {
        var capture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        if (isString$1(events)) {
          events = [events];
        }

        for (var i = 0; i < events.length; i++) {
          el.removeEventListener(events[i], this.listeners[events[i]], capture);
        }
      }

      /**
       * Destroy collected listeners.
       *
       * @returns {Void}
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        delete this.listeners;
      }
    }]);
    return EventsBinder;
  }();

  function Resize (Glide, Components, Events) {
    /**
     * Instance of the binder for DOM Events.
     *
     * @type {EventsBinder}
     */
    var Binder = new EventsBinder();

    var Resize = {
      /**
       * Initializes window bindings.
       */
      mount: function mount() {
        this.bind();
      },


      /**
       * Binds `rezsize` listener to the window.
       * It's a costly event, so we are debouncing it.
       *
       * @return {Void}
       */
      bind: function bind() {
        Binder.on('resize', window, throttle$2(function () {
          Events.emit('resize');
        }, Glide.settings.throttle));
      },


      /**
       * Unbinds listeners from the window.
       *
       * @return {Void}
       */
      unbind: function unbind() {
        Binder.off('resize', window);
      }
    };

    /**
     * Remove bindings from window:
     * - on destroying, to remove added EventListener
     */
    Events.on('destroy', function () {
      Resize.unbind();
      Binder.destroy();
    });

    return Resize;
  }

  var VALID_DIRECTIONS = ['ltr', 'rtl'];
  var FLIPED_MOVEMENTS = {
    '>': '<',
    '<': '>',
    '=': '='
  };

  function Direction (Glide, Components, Events) {
    var Direction = {
      /**
       * Setups gap value based on settings.
       *
       * @return {Void}
       */
      mount: function mount() {
        this.value = Glide.settings.direction;
      },


      /**
       * Resolves pattern based on direction value
       *
       * @param {String} pattern
       * @returns {String}
       */
      resolve: function resolve(pattern) {
        var token = pattern.slice(0, 1);

        if (this.is('rtl')) {
          return pattern.split(token).join(FLIPED_MOVEMENTS[token]);
        }

        return pattern;
      },


      /**
       * Checks value of direction mode.
       *
       * @param {String} direction
       * @returns {Boolean}
       */
      is: function is(direction) {
        return this.value === direction;
      },


      /**
       * Applies direction class to the root HTML element.
       *
       * @return {Void}
       */
      addClass: function addClass() {
        Components.Html.root.classList.add(Glide.settings.classes.direction[this.value]);
      },


      /**
       * Removes direction class from the root HTML element.
       *
       * @return {Void}
       */
      removeClass: function removeClass() {
        Components.Html.root.classList.remove(Glide.settings.classes.direction[this.value]);
      }
    };

    define(Direction, 'value', {
      /**
       * Gets value of the direction.
       *
       * @returns {Number}
       */
      get: function get() {
        return Direction._v;
      },


      /**
       * Sets value of the direction.
       *
       * @param {String} value
       * @return {Void}
       */
      set: function set(value) {
        if (VALID_DIRECTIONS.indexOf(value) > -1) {
          Direction._v = value;
        } else {
          warn('Direction value must be `ltr` or `rtl`');
        }
      }
    });

    /**
     * Clear direction class:
     * - on destroy to bring HTML to its initial state
     * - on update to remove class before reappling bellow
     */
    Events.on(['destroy', 'update'], function () {
      Direction.removeClass();
    });

    /**
     * Remount component:
     * - on update to reflect changes in direction value
     */
    Events.on('update', function () {
      Direction.mount();
    });

    /**
     * Apply direction class:
     * - before building to apply class for the first time
     * - on updating to reapply direction class that may changed
     */
    Events.on(['build.before', 'update'], function () {
      Direction.addClass();
    });

    return Direction;
  }

  /**
   * Reflects value of glide movement.
   *
   * @param  {Object} Glide
   * @param  {Object} Components
   * @return {Object}
   */
  function Rtl (Glide, Components) {
    return {
      /**
       * Negates the passed translate if glide is in RTL option.
       *
       * @param  {Number} translate
       * @return {Number}
       */
      modify: function modify(translate) {
        if (Components.Direction.is('rtl')) {
          return -translate;
        }

        return translate;
      }
    };
  }

  /**
   * Updates glide movement with a `gap` settings.
   *
   * @param  {Object} Glide
   * @param  {Object} Components
   * @return {Object}
   */
  function Gap (Glide, Components) {
    return {
      /**
       * Modifies passed translate value with number in the `gap` settings.
       *
       * @param  {Number} translate
       * @return {Number}
       */
      modify: function modify(translate) {
        return translate + Components.Gaps.value * Glide.index;
      }
    };
  }

  /**
   * Updates glide movement with width of additional clones width.
   *
   * @param  {Object} Glide
   * @param  {Object} Components
   * @return {Object}
   */
  function Grow (Glide, Components) {
    return {
      /**
       * Adds to the passed translate width of the half of clones.
       *
       * @param  {Number} translate
       * @return {Number}
       */
      modify: function modify(translate) {
        return translate + Components.Clones.grow / 2;
      }
    };
  }

  /**
   * Updates glide movement with a `peek` settings.
   *
   * @param  {Object} Glide
   * @param  {Object} Components
   * @return {Object}
   */
  function Peeking (Glide, Components) {
    return {
      /**
       * Modifies passed translate value with a `peek` setting.
       *
       * @param  {Number} translate
       * @return {Number}
       */
      modify: function modify(translate) {
        if (Glide.settings.focusAt >= 0) {
          var peek = Components.Peek.value;

          if (isObject$3(peek)) {
            return translate - peek.before;
          }

          return translate - peek;
        }

        return translate;
      }
    };
  }

  /**
   * Updates glide movement with a `focusAt` settings.
   *
   * @param  {Object} Glide
   * @param  {Object} Components
   * @return {Object}
   */
  function Focusing (Glide, Components) {
    return {
      /**
       * Modifies passed translate value with index in the `focusAt` setting.
       *
       * @param  {Number} translate
       * @return {Number}
       */
      modify: function modify(translate) {
        var gap = Components.Gaps.value;
        var width = Components.Sizes.width;
        var focusAt = Glide.settings.focusAt;
        var slideWidth = Components.Sizes.slideWidth;

        if (focusAt === 'center') {
          return translate - (width / 2 - slideWidth / 2);
        }

        return translate - slideWidth * focusAt - gap * focusAt;
      }
    };
  }

  /**
   * Applies diffrent transformers on translate value.
   *
   * @param  {Object} Glide
   * @param  {Object} Components
   * @return {Object}
   */
  function mutator (Glide, Components, Events) {
    /**
     * Merge instance transformers with collection of default transformers.
     * It's important that the Rtl component be last on the list,
     * so it reflects all previous transformations.
     *
     * @type {Array}
     */
    var TRANSFORMERS = [Gap, Grow, Peeking, Focusing].concat(Glide._t, [Rtl]);

    return {
      /**
       * Piplines translate value with registered transformers.
       *
       * @param  {Number} translate
       * @return {Number}
       */
      mutate: function mutate(translate) {
        for (var i = 0; i < TRANSFORMERS.length; i++) {
          var transformer = TRANSFORMERS[i];

          if (isFunction$3(transformer) && isFunction$3(transformer().modify)) {
            translate = transformer(Glide, Components, Events).modify(translate);
          } else {
            warn('Transformer should be a function that returns an object with `modify()` method');
          }
        }

        return translate;
      }
    };
  }

  function Translate (Glide, Components, Events) {
    var Translate = {
      /**
       * Sets value of translate on HTML element.
       *
       * @param {Number} value
       * @return {Void}
       */
      set: function set(value) {
        var transform = mutator(Glide, Components).mutate(value);

        Components.Html.wrapper.style.transform = 'translate3d(' + -1 * transform + 'px, 0px, 0px)';
      },


      /**
       * Removes value of translate from HTML element.
       *
       * @return {Void}
       */
      remove: function remove() {
        Components.Html.wrapper.style.transform = '';
      }
    };

    /**
     * Set new translate value:
     * - on move to reflect index change
     * - on updating via API to reflect possible changes in options
     */
    Events.on('move', function (context) {
      var gap = Components.Gaps.value;
      var length = Components.Sizes.length;
      var width = Components.Sizes.slideWidth;

      if (Glide.isType('carousel') && Components.Run.isOffset('<')) {
        Components.Transition.after(function () {
          Events.emit('translate.jump');

          Translate.set(width * (length - 1));
        });

        return Translate.set(-width - gap * length);
      }

      if (Glide.isType('carousel') && Components.Run.isOffset('>')) {
        Components.Transition.after(function () {
          Events.emit('translate.jump');

          Translate.set(0);
        });

        return Translate.set(width * length + gap * length);
      }

      return Translate.set(context.movement);
    });

    /**
     * Remove translate:
     * - on destroying to bring markup to its inital state
     */
    Events.on('destroy', function () {
      Translate.remove();
    });

    return Translate;
  }

  function Transition (Glide, Components, Events) {
    /**
     * Holds inactivity status of transition.
     * When true transition is not applied.
     *
     * @type {Boolean}
     */
    var disabled = false;

    var Transition = {
      /**
       * Composes string of the CSS transition.
       *
       * @param {String} property
       * @return {String}
       */
      compose: function compose(property) {
        var settings = Glide.settings;

        if (!disabled) {
          return property + ' ' + this.duration + 'ms ' + settings.animationTimingFunc;
        }

        return property + ' 0ms ' + settings.animationTimingFunc;
      },


      /**
       * Sets value of transition on HTML element.
       *
       * @param {String=} property
       * @return {Void}
       */
      set: function set() {
        var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';

        Components.Html.wrapper.style.transition = this.compose(property);
      },


      /**
       * Removes value of transition from HTML element.
       *
       * @return {Void}
       */
      remove: function remove() {
        Components.Html.wrapper.style.transition = '';
      },


      /**
       * Runs callback after animation.
       *
       * @param  {Function} callback
       * @return {Void}
       */
      after: function after(callback) {
        setTimeout(function () {
          callback();
        }, this.duration);
      },


      /**
       * Enable transition.
       *
       * @return {Void}
       */
      enable: function enable() {
        disabled = false;

        this.set();
      },


      /**
       * Disable transition.
       *
       * @return {Void}
       */
      disable: function disable() {
        disabled = true;

        this.set();
      }
    };

    define(Transition, 'duration', {
      /**
       * Gets duration of the transition based
       * on currently running animation type.
       *
       * @return {Number}
       */
      get: function get() {
        var settings = Glide.settings;

        if (Glide.isType('slider') && Components.Run.offset) {
          return settings.rewindDuration;
        }

        return settings.animationDuration;
      }
    });

    /**
     * Set transition `style` value:
     * - on each moving, because it may be cleared by offset move
     */
    Events.on('move', function () {
      Transition.set();
    });

    /**
     * Disable transition:
     * - before initial build to avoid transitioning from `0` to `startAt` index
     * - while resizing window and recalculating dimentions
     * - on jumping from offset transition at start and end edges in `carousel` type
     */
    Events.on(['build.before', 'resize', 'translate.jump'], function () {
      Transition.disable();
    });

    /**
     * Enable transition:
     * - on each running, because it may be disabled by offset move
     */
    Events.on('run', function () {
      Transition.enable();
    });

    /**
     * Remove transition:
     * - on destroying to bring markup to its inital state
     */
    Events.on('destroy', function () {
      Transition.remove();
    });

    return Transition;
  }

  /**
   * Test via a getter in the options object to see
   * if the passive property is accessed.
   *
   * @see https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
   */

  var supportsPassive = false;

  try {
    var opts = Object.defineProperty({}, 'passive', {
      get: function get() {
        supportsPassive = true;
      }
    });

    window.addEventListener('testPassive', null, opts);
    window.removeEventListener('testPassive', null, opts);
  } catch (e) {}

  var supportsPassive$1 = supportsPassive;

  var START_EVENTS = ['touchstart', 'mousedown'];
  var MOVE_EVENTS = ['touchmove', 'mousemove'];
  var END_EVENTS = ['touchend', 'touchcancel', 'mouseup', 'mouseleave'];
  var MOUSE_EVENTS = ['mousedown', 'mousemove', 'mouseup', 'mouseleave'];

  function Swipe (Glide, Components, Events) {
    /**
     * Instance of the binder for DOM Events.
     *
     * @type {EventsBinder}
     */
    var Binder = new EventsBinder();

    var swipeSin = 0;
    var swipeStartX = 0;
    var swipeStartY = 0;
    var disabled = false;
    var capture = supportsPassive$1 ? { passive: true } : false;

    var Swipe = {
      /**
       * Initializes swipe bindings.
       *
       * @return {Void}
       */
      mount: function mount() {
        this.bindSwipeStart();
      },


      /**
       * Handler for `swipestart` event. Calculates entry points of the user's tap.
       *
       * @param {Object} event
       * @return {Void}
       */
      start: function start(event) {
        if (!disabled && !Glide.disabled) {
          this.disable();

          var swipe = this.touches(event);

          swipeSin = null;
          swipeStartX = toInt(swipe.pageX);
          swipeStartY = toInt(swipe.pageY);

          this.bindSwipeMove();
          this.bindSwipeEnd();

          Events.emit('swipe.start');
        }
      },


      /**
       * Handler for `swipemove` event. Calculates user's tap angle and distance.
       *
       * @param {Object} event
       */
      move: function move(event) {
        if (!Glide.disabled) {
          var _Glide$settings = Glide.settings,
              touchAngle = _Glide$settings.touchAngle,
              touchRatio = _Glide$settings.touchRatio,
              classes = _Glide$settings.classes;


          var swipe = this.touches(event);

          var subExSx = toInt(swipe.pageX) - swipeStartX;
          var subEySy = toInt(swipe.pageY) - swipeStartY;
          var powEX = Math.abs(subExSx << 2);
          var powEY = Math.abs(subEySy << 2);
          var swipeHypotenuse = Math.sqrt(powEX + powEY);
          var swipeCathetus = Math.sqrt(powEY);

          swipeSin = Math.asin(swipeCathetus / swipeHypotenuse);

          if (swipeSin * 180 / Math.PI < touchAngle) {
            event.stopPropagation();

            Components.Move.make(subExSx * toFloat(touchRatio));

            Components.Html.root.classList.add(classes.dragging);

            Events.emit('swipe.move');
          } else {
            return false;
          }
        }
      },


      /**
       * Handler for `swipeend` event. Finitializes user's tap and decides about glide move.
       *
       * @param {Object} event
       * @return {Void}
       */
      end: function end(event) {
        if (!Glide.disabled) {
          var settings = Glide.settings;

          var swipe = this.touches(event);
          var threshold = this.threshold(event);

          var swipeDistance = swipe.pageX - swipeStartX;
          var swipeDeg = swipeSin * 180 / Math.PI;
          var steps = Math.round(swipeDistance / Components.Sizes.slideWidth);

          this.enable();

          if (swipeDistance > threshold && swipeDeg < settings.touchAngle) {
            // While swipe is positive and greater than threshold move backward.
            if (settings.perTouch) {
              steps = Math.min(steps, toInt(settings.perTouch));
            }

            if (Components.Direction.is('rtl')) {
              steps = -steps;
            }

            Components.Run.make(Components.Direction.resolve('<' + steps));
          } else if (swipeDistance < -threshold && swipeDeg < settings.touchAngle) {
            // While swipe is negative and lower than negative threshold move forward.
            if (settings.perTouch) {
              steps = Math.max(steps, -toInt(settings.perTouch));
            }

            if (Components.Direction.is('rtl')) {
              steps = -steps;
            }

            Components.Run.make(Components.Direction.resolve('>' + steps));
          } else {
            // While swipe don't reach distance apply previous transform.
            Components.Move.make();
          }

          Components.Html.root.classList.remove(settings.classes.dragging);

          this.unbindSwipeMove();
          this.unbindSwipeEnd();

          Events.emit('swipe.end');
        }
      },


      /**
       * Binds swipe's starting event.
       *
       * @return {Void}
       */
      bindSwipeStart: function bindSwipeStart() {
        var _this = this;

        var settings = Glide.settings;

        if (settings.swipeThreshold) {
          Binder.on(START_EVENTS[0], Components.Html.wrapper, function (event) {
            _this.start(event);
          }, capture);
        }

        if (settings.dragThreshold) {
          Binder.on(START_EVENTS[1], Components.Html.wrapper, function (event) {
            _this.start(event);
          }, capture);
        }
      },


      /**
       * Unbinds swipe's starting event.
       *
       * @return {Void}
       */
      unbindSwipeStart: function unbindSwipeStart() {
        Binder.off(START_EVENTS[0], Components.Html.wrapper, capture);
        Binder.off(START_EVENTS[1], Components.Html.wrapper, capture);
      },


      /**
       * Binds swipe's moving event.
       *
       * @return {Void}
       */
      bindSwipeMove: function bindSwipeMove() {
        var _this2 = this;

        Binder.on(MOVE_EVENTS, Components.Html.wrapper, throttle$2(function (event) {
          _this2.move(event);
        }, Glide.settings.throttle), capture);
      },


      /**
       * Unbinds swipe's moving event.
       *
       * @return {Void}
       */
      unbindSwipeMove: function unbindSwipeMove() {
        Binder.off(MOVE_EVENTS, Components.Html.wrapper, capture);
      },


      /**
       * Binds swipe's ending event.
       *
       * @return {Void}
       */
      bindSwipeEnd: function bindSwipeEnd() {
        var _this3 = this;

        Binder.on(END_EVENTS, Components.Html.wrapper, function (event) {
          _this3.end(event);
        });
      },


      /**
       * Unbinds swipe's ending event.
       *
       * @return {Void}
       */
      unbindSwipeEnd: function unbindSwipeEnd() {
        Binder.off(END_EVENTS, Components.Html.wrapper);
      },


      /**
       * Normalizes event touches points accorting to different types.
       *
       * @param {Object} event
       */
      touches: function touches(event) {
        if (MOUSE_EVENTS.indexOf(event.type) > -1) {
          return event;
        }

        return event.touches[0] || event.changedTouches[0];
      },


      /**
       * Gets value of minimum swipe distance settings based on event type.
       *
       * @return {Number}
       */
      threshold: function threshold(event) {
        var settings = Glide.settings;

        if (MOUSE_EVENTS.indexOf(event.type) > -1) {
          return settings.dragThreshold;
        }

        return settings.swipeThreshold;
      },


      /**
       * Enables swipe event.
       *
       * @return {self}
       */
      enable: function enable() {
        disabled = false;

        Components.Transition.enable();

        return this;
      },


      /**
       * Disables swipe event.
       *
       * @return {self}
       */
      disable: function disable() {
        disabled = true;

        Components.Transition.disable();

        return this;
      }
    };

    /**
     * Add component class:
     * - after initial building
     */
    Events.on('build.after', function () {
      Components.Html.root.classList.add(Glide.settings.classes.swipeable);
    });

    /**
     * Remove swiping bindings:
     * - on destroying, to remove added EventListeners
     */
    Events.on('destroy', function () {
      Swipe.unbindSwipeStart();
      Swipe.unbindSwipeMove();
      Swipe.unbindSwipeEnd();
      Binder.destroy();
    });

    return Swipe;
  }

  function Images (Glide, Components, Events) {
    /**
     * Instance of the binder for DOM Events.
     *
     * @type {EventsBinder}
     */
    var Binder = new EventsBinder();

    var Images = {
      /**
       * Binds listener to glide wrapper.
       *
       * @return {Void}
       */
      mount: function mount() {
        this.bind();
      },


      /**
       * Binds `dragstart` event on wrapper to prevent dragging images.
       *
       * @return {Void}
       */
      bind: function bind() {
        Binder.on('dragstart', Components.Html.wrapper, this.dragstart);
      },


      /**
       * Unbinds `dragstart` event on wrapper.
       *
       * @return {Void}
       */
      unbind: function unbind() {
        Binder.off('dragstart', Components.Html.wrapper);
      },


      /**
       * Event handler. Prevents dragging.
       *
       * @return {Void}
       */
      dragstart: function dragstart(event) {
        event.preventDefault();
      }
    };

    /**
     * Remove bindings from images:
     * - on destroying, to remove added EventListeners
     */
    Events.on('destroy', function () {
      Images.unbind();
      Binder.destroy();
    });

    return Images;
  }

  function Anchors (Glide, Components, Events) {
    /**
     * Instance of the binder for DOM Events.
     *
     * @type {EventsBinder}
     */
    var Binder = new EventsBinder();

    /**
     * Holds detaching status of anchors.
     * Prevents detaching of already detached anchors.
     *
     * @private
     * @type {Boolean}
     */
    var detached = false;

    /**
     * Holds preventing status of anchors.
     * If `true` redirection after click will be disabled.
     *
     * @private
     * @type {Boolean}
     */
    var prevented = false;

    var Anchors = {
      /**
       * Setups a initial state of anchors component.
       *
       * @returns {Void}
       */
      mount: function mount() {
        /**
         * Holds collection of anchors elements.
         *
         * @private
         * @type {HTMLCollection}
         */
        this._a = Components.Html.wrapper.querySelectorAll('a');

        this.bind();
      },


      /**
       * Binds events to anchors inside a track.
       *
       * @return {Void}
       */
      bind: function bind() {
        Binder.on('click', Components.Html.wrapper, this.click);
      },


      /**
       * Unbinds events attached to anchors inside a track.
       *
       * @return {Void}
       */
      unbind: function unbind() {
        Binder.off('click', Components.Html.wrapper);
      },


      /**
       * Handler for click event. Prevents clicks when glide is in `prevent` status.
       *
       * @param  {Object} event
       * @return {Void}
       */
      click: function click(event) {
        if (prevented) {
          event.stopPropagation();
          event.preventDefault();
        }
      },


      /**
       * Detaches anchors click event inside glide.
       *
       * @return {self}
       */
      detach: function detach() {
        prevented = true;

        if (!detached) {
          for (var i = 0; i < this.items.length; i++) {
            this.items[i].draggable = false;

            this.items[i].setAttribute('data-href', this.items[i].getAttribute('href'));

            this.items[i].removeAttribute('href');
          }

          detached = true;
        }

        return this;
      },


      /**
       * Attaches anchors click events inside glide.
       *
       * @return {self}
       */
      attach: function attach() {
        prevented = false;

        if (detached) {
          for (var i = 0; i < this.items.length; i++) {
            this.items[i].draggable = true;

            this.items[i].setAttribute('href', this.items[i].getAttribute('data-href'));
          }

          detached = false;
        }

        return this;
      }
    };

    define(Anchors, 'items', {
      /**
       * Gets collection of the arrows HTML elements.
       *
       * @return {HTMLElement[]}
       */
      get: function get() {
        return Anchors._a;
      }
    });

    /**
     * Detach anchors inside slides:
     * - on swiping, so they won't redirect to its `href` attributes
     */
    Events.on('swipe.move', function () {
      Anchors.detach();
    });

    /**
     * Attach anchors inside slides:
     * - after swiping and transitions ends, so they can redirect after click again
     */
    Events.on('swipe.end', function () {
      Components.Transition.after(function () {
        Anchors.attach();
      });
    });

    /**
     * Unbind anchors inside slides:
     * - on destroying, to bring anchors to its initial state
     */
    Events.on('destroy', function () {
      Anchors.attach();
      Anchors.unbind();
      Binder.destroy();
    });

    return Anchors;
  }

  var NAV_SELECTOR = '[data-glide-el="controls[nav]"]';
  var CONTROLS_SELECTOR = '[data-glide-el^="controls"]';

  function Controls (Glide, Components, Events) {
    /**
     * Instance of the binder for DOM Events.
     *
     * @type {EventsBinder}
     */
    var Binder = new EventsBinder();

    var capture = supportsPassive$1 ? { passive: true } : false;

    var Controls = {
      /**
       * Inits arrows. Binds events listeners
       * to the arrows HTML elements.
       *
       * @return {Void}
       */
      mount: function mount() {
        /**
         * Collection of navigation HTML elements.
         *
         * @private
         * @type {HTMLCollection}
         */
        this._n = Components.Html.root.querySelectorAll(NAV_SELECTOR);

        /**
         * Collection of controls HTML elements.
         *
         * @private
         * @type {HTMLCollection}
         */
        this._c = Components.Html.root.querySelectorAll(CONTROLS_SELECTOR);

        this.addBindings();
      },


      /**
       * Sets active class to current slide.
       *
       * @return {Void}
       */
      setActive: function setActive() {
        for (var i = 0; i < this._n.length; i++) {
          this.addClass(this._n[i].children);
        }
      },


      /**
       * Removes active class to current slide.
       *
       * @return {Void}
       */
      removeActive: function removeActive() {
        for (var i = 0; i < this._n.length; i++) {
          this.removeClass(this._n[i].children);
        }
      },


      /**
       * Toggles active class on items inside navigation.
       *
       * @param  {HTMLElement} controls
       * @return {Void}
       */
      addClass: function addClass(controls) {
        var settings = Glide.settings;
        var item = controls[Glide.index];

        if (item) {
          item.classList.add(settings.classes.activeNav);

          siblings(item).forEach(function (sibling) {
            sibling.classList.remove(settings.classes.activeNav);
          });
        }
      },


      /**
       * Removes active class from active control.
       *
       * @param  {HTMLElement} controls
       * @return {Void}
       */
      removeClass: function removeClass(controls) {
        var item = controls[Glide.index];

        if (item) {
          item.classList.remove(Glide.settings.classes.activeNav);
        }
      },


      /**
       * Adds handles to the each group of controls.
       *
       * @return {Void}
       */
      addBindings: function addBindings() {
        for (var i = 0; i < this._c.length; i++) {
          this.bind(this._c[i].children);
        }
      },


      /**
       * Removes handles from the each group of controls.
       *
       * @return {Void}
       */
      removeBindings: function removeBindings() {
        for (var i = 0; i < this._c.length; i++) {
          this.unbind(this._c[i].children);
        }
      },


      /**
       * Binds events to arrows HTML elements.
       *
       * @param {HTMLCollection} elements
       * @return {Void}
       */
      bind: function bind(elements) {
        for (var i = 0; i < elements.length; i++) {
          Binder.on('click', elements[i], this.click);
          Binder.on('touchstart', elements[i], this.click, capture);
        }
      },


      /**
       * Unbinds events binded to the arrows HTML elements.
       *
       * @param {HTMLCollection} elements
       * @return {Void}
       */
      unbind: function unbind(elements) {
        for (var i = 0; i < elements.length; i++) {
          Binder.off(['click', 'touchstart'], elements[i]);
        }
      },


      /**
       * Handles `click` event on the arrows HTML elements.
       * Moves slider in driection precised in
       * `data-glide-dir` attribute.
       *
       * @param {Object} event
       * @return {Void}
       */
      click: function click(event) {
        event.preventDefault();

        Components.Run.make(Components.Direction.resolve(event.currentTarget.getAttribute('data-glide-dir')));
      }
    };

    define(Controls, 'items', {
      /**
       * Gets collection of the controls HTML elements.
       *
       * @return {HTMLElement[]}
       */
      get: function get() {
        return Controls._c;
      }
    });

    /**
     * Swap active class of current navigation item:
     * - after mounting to set it to initial index
     * - after each move to the new index
     */
    Events.on(['mount.after', 'move.after'], function () {
      Controls.setActive();
    });

    /**
     * Remove bindings and HTML Classes:
     * - on destroying, to bring markup to its initial state
     */
    Events.on('destroy', function () {
      Controls.removeBindings();
      Controls.removeActive();
      Binder.destroy();
    });

    return Controls;
  }

  function Keyboard (Glide, Components, Events) {
    /**
     * Instance of the binder for DOM Events.
     *
     * @type {EventsBinder}
     */
    var Binder = new EventsBinder();

    var Keyboard = {
      /**
       * Binds keyboard events on component mount.
       *
       * @return {Void}
       */
      mount: function mount() {
        if (Glide.settings.keyboard) {
          this.bind();
        }
      },


      /**
       * Adds keyboard press events.
       *
       * @return {Void}
       */
      bind: function bind() {
        Binder.on('keyup', document, this.press);
      },


      /**
       * Removes keyboard press events.
       *
       * @return {Void}
       */
      unbind: function unbind() {
        Binder.off('keyup', document);
      },


      /**
       * Handles keyboard's arrows press and moving glide foward and backward.
       *
       * @param  {Object} event
       * @return {Void}
       */
      press: function press(event) {
        if (event.keyCode === 39) {
          Components.Run.make(Components.Direction.resolve('>'));
        }

        if (event.keyCode === 37) {
          Components.Run.make(Components.Direction.resolve('<'));
        }
      }
    };

    /**
     * Remove bindings from keyboard:
     * - on destroying to remove added events
     * - on updating to remove events before remounting
     */
    Events.on(['destroy', 'update'], function () {
      Keyboard.unbind();
    });

    /**
     * Remount component
     * - on updating to reflect potential changes in settings
     */
    Events.on('update', function () {
      Keyboard.mount();
    });

    /**
     * Destroy binder:
     * - on destroying to remove listeners
     */
    Events.on('destroy', function () {
      Binder.destroy();
    });

    return Keyboard;
  }

  function Autoplay (Glide, Components, Events) {
    /**
     * Instance of the binder for DOM Events.
     *
     * @type {EventsBinder}
     */
    var Binder = new EventsBinder();

    var Autoplay = {
      /**
       * Initializes autoplaying and events.
       *
       * @return {Void}
       */
      mount: function mount() {
        this.start();

        if (Glide.settings.hoverpause) {
          this.bind();
        }
      },


      /**
       * Starts autoplaying in configured interval.
       *
       * @param {Boolean|Number} force Run autoplaying with passed interval regardless of `autoplay` settings
       * @return {Void}
       */
      start: function start() {
        var _this = this;

        if (Glide.settings.autoplay) {
          if (isUndefined$1(this._i)) {
            this._i = setInterval(function () {
              _this.stop();

              Components.Run.make('>');

              _this.start();
            }, this.time);
          }
        }
      },


      /**
       * Stops autorunning of the glide.
       *
       * @return {Void}
       */
      stop: function stop() {
        this._i = clearInterval(this._i);
      },


      /**
       * Stops autoplaying while mouse is over glide's area.
       *
       * @return {Void}
       */
      bind: function bind() {
        var _this2 = this;

        Binder.on('mouseover', Components.Html.root, function () {
          _this2.stop();
        });

        Binder.on('mouseout', Components.Html.root, function () {
          _this2.start();
        });
      },


      /**
       * Unbind mouseover events.
       *
       * @returns {Void}
       */
      unbind: function unbind() {
        Binder.off(['mouseover', 'mouseout'], Components.Html.root);
      }
    };

    define(Autoplay, 'time', {
      /**
       * Gets time period value for the autoplay interval. Prioritizes
       * times in `data-glide-autoplay` attrubutes over options.
       *
       * @return {Number}
       */
      get: function get() {
        var autoplay = Components.Html.slides[Glide.index].getAttribute('data-glide-autoplay');

        if (autoplay) {
          return toInt(autoplay);
        }

        return toInt(Glide.settings.autoplay);
      }
    });

    /**
     * Stop autoplaying and unbind events:
     * - on destroying, to clear defined interval
     * - on updating via API to reset interval that may changed
     */
    Events.on(['destroy', 'update'], function () {
      Autoplay.unbind();
    });

    /**
     * Stop autoplaying:
     * - before each run, to restart autoplaying
     * - on pausing via API
     * - on destroying, to clear defined interval
     * - while starting a swipe
     * - on updating via API to reset interval that may changed
     */
    Events.on(['run.before', 'pause', 'destroy', 'swipe.start', 'update'], function () {
      Autoplay.stop();
    });

    /**
     * Start autoplaying:
     * - after each run, to restart autoplaying
     * - on playing via API
     * - while ending a swipe
     */
    Events.on(['run.after', 'play', 'swipe.end'], function () {
      Autoplay.start();
    });

    /**
     * Remount autoplaying:
     * - on updating via API to reset interval that may changed
     */
    Events.on('update', function () {
      Autoplay.mount();
    });

    /**
     * Destroy a binder:
     * - on destroying glide instance to clearup listeners
     */
    Events.on('destroy', function () {
      Binder.destroy();
    });

    return Autoplay;
  }

  /**
   * Sorts keys of breakpoint object so they will be ordered from lower to bigger.
   *
   * @param {Object} points
   * @returns {Object}
   */
  function sortBreakpoints(points) {
    if (isObject$3(points)) {
      return sortKeys(points);
    } else {
      warn('Breakpoints option must be an object');
    }

    return {};
  }

  function Breakpoints$1 (Glide, Components, Events) {
    /**
     * Instance of the binder for DOM Events.
     *
     * @type {EventsBinder}
     */
    var Binder = new EventsBinder();

    /**
     * Holds reference to settings.
     *
     * @type {Object}
     */
    var settings = Glide.settings;

    /**
     * Holds reference to breakpoints object in settings. Sorts breakpoints
     * from smaller to larger. It is required in order to proper
     * matching currently active breakpoint settings.
     *
     * @type {Object}
     */
    var points = sortBreakpoints(settings.breakpoints);

    /**
     * Cache initial settings before overwritting.
     *
     * @type {Object}
     */
    var defaults = _extends({}, settings);

    var Breakpoints = {
      /**
       * Matches settings for currectly matching media breakpoint.
       *
       * @param {Object} points
       * @returns {Object}
       */
      match: function match(points) {
        if (typeof window.matchMedia !== 'undefined') {
          for (var point in points) {
            if (points.hasOwnProperty(point)) {
              if (window.matchMedia('(max-width: ' + point + 'px)').matches) {
                return points[point];
              }
            }
          }
        }

        return defaults;
      }
    };

    /**
     * Overwrite instance settings with currently matching breakpoint settings.
     * This happens right after component initialization.
     */
    _extends(settings, Breakpoints.match(points));

    /**
     * Update glide with settings of matched brekpoint:
     * - window resize to update slider
     */
    Binder.on('resize', window, throttle$2(function () {
      Glide.settings = mergeOptions(settings, Breakpoints.match(points));
    }, Glide.settings.throttle));

    /**
     * Resort and update default settings:
     * - on reinit via API, so breakpoint matching will be performed with options
     */
    Events.on('update', function () {
      points = sortBreakpoints(points);

      defaults = _extends({}, settings);
    });

    /**
     * Unbind resize listener:
     * - on destroying, to bring markup to its initial state
     */
    Events.on('destroy', function () {
      Binder.off('resize', window);
    });

    return Breakpoints;
  }

  var COMPONENTS = {
    // Required
    Html: Html,
    Translate: Translate,
    Transition: Transition,
    Direction: Direction,
    Peek: Peek,
    Sizes: Sizes,
    Gaps: Gaps,
    Move: Move,
    Clones: Clones,
    Resize: Resize,
    Build: Build,
    Run: Run,

    // Optional
    Swipe: Swipe,
    Images: Images,
    Anchors: Anchors,
    Controls: Controls,
    Keyboard: Keyboard,
    Autoplay: Autoplay,
    Breakpoints: Breakpoints$1
  };

  var Glide$1 = function (_Core) {
    inherits(Glide$$1, _Core);

    function Glide$$1() {
      classCallCheck(this, Glide$$1);
      return possibleConstructorReturn(this, (Glide$$1.__proto__ || Object.getPrototypeOf(Glide$$1)).apply(this, arguments));
    }

    createClass(Glide$$1, [{
      key: 'mount',
      value: function mount() {
        var extensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        return get$3(Glide$$1.prototype.__proto__ || Object.getPrototypeOf(Glide$$1.prototype), 'mount', this).call(this, _extends({}, COMPONENTS, extensions));
      }
    }]);
    return Glide$$1;
  }(Glide);

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".glide{position:relative;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box}.glide *{-webkit-box-sizing:inherit;box-sizing:inherit}.glide__slides,.glide__track{overflow:hidden}.glide__slides{position:relative;width:100%;list-style:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;-ms-touch-action:pan-Y;touch-action:pan-Y;padding:0;white-space:nowrap;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:nowrap;flex-wrap:nowrap;will-change:transform}.glide__slide,.glide__slides--dragging{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.glide__slide{width:100%;height:100%;-ms-flex-negative:0;flex-shrink:0;white-space:normal;-webkit-touch-callout:none;-webkit-tap-highlight-color:transparent}.glide__slide a{-webkit-user-select:none;user-select:none;-webkit-user-drag:none;-moz-user-select:none;-ms-user-select:none}.glide__arrows,.glide__bullets{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.glide--rtl{direction:rtl}.carousel-container .arrows{top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.carousel-container .glide__arrows{pointer-events:none}html[dir=rtl] .glide__arrow.arrow-left,html[dir=rtl] .glide__arrow.arrow-right{-webkit-transform:rotate(180deg);transform:rotate(180deg)}@media (max-width:800px){.carousel-container .arrow-right{margin-right:0}.carousel-container .arrow-left{margin-left:0}}.carousel-container .arrow:before{color:#666}.carousel-container.arrows-white .arrow:before{color:#fff}.tester{background:red;width:100vw;height:100%;position:absolute}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  const options$1 = {
    PER_VIEW: 'PER_VIEW',
    FIT_CONTAINER: 'FIT_CONTAINER',
  };

  const types = {
    CAROUSEL: 'carousel',
    SLIDER: 'slider',
  };

  var CarouselContainer = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"carousel-container tw-relative",attrs:{"id":_vm.carouselName}},[_c('div',{staticClass:"carousel-list tw-w-full",class:{ 'tw-overflow-hidden': _vm.hideTrackOverflow && !_vm.visibleOnlyRange || _vm.hideScroll, },attrs:{"data-glide-el":"track"}},[_c('ul',{ref:"elementsList",staticClass:"glide__slides",class:_vm.stylesTheme.container,style:(_vm.styles)},[_vm._t("default")],2),_vm._v(" "),_c('div',{staticClass:"tw-w-full tw-flex tw-justify-center tw-items-center tw-z-10"},[(!_vm.hidePagination && _vm.getLength() > 1)?_c('Pagination',{attrs:{"states":Math.ceil(_vm.getLength() / _vm.perView),"state":_vm.currentState,"pagination-style":_vm.paginationStyle},on:{"change":_vm.go}}):_vm._e()],1)]),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(!_vm.hideControls && _vm.getLength() > _vm.perView),expression:"!hideControls && getLength() > perView"}],staticClass:"glide__arrows arrows tw-z-50 tw-absolute tw-w-full tw-flex tw-justify-between",attrs:{"data-glide-el":"controls"}},[_c('button',{staticClass:"glide__arrow arrow tw-relative arrow-left icon-arrow-left tw-cursor-pointer tw-p-0",class:[_vm.theme.class, _vm.theme.leftArrowClass],style:(_vm.leftArrow),attrs:{"type":"button","data-glide-dir":`=${(_vm.currentState - 1) * _vm.perView}`},on:{"click":_vm.onClickLeftArrow}}),_vm._v(" "),_c('button',{staticClass:"glide__arrow arrow tw-relative arrow-right icon-arrow-right tw-cursor-pointer tw-p-0",class:[_vm.theme.class, _vm.theme.rightArrowClass],style:(_vm.rightArrow),attrs:{"type":"button","data-glide-dir":`=${(_vm.currentState + 1) * _vm.perView}`},on:{"click":_vm.onClickRightArrow}})])])},staticRenderFns: [],
    name: 'CarouselContainer',
    components: { Pagination },
    mixins: [DirectionMixin$1],
    props: {
      // carouselName should be unique per page
      carouselName: {
        type: String,
        required: true,
      },
      hideControls: {
        type: Boolean,
        default: false,
      },
      paginationStyle: {
        type: String,
        default: 'blue',
      },
      hidePagination: {
        type: Boolean,
        default: false,
      },
      type: {
        type: String,
        default: types.SLIDER,
        validator(selectedOption) {
          return [types.SLIDER, types.CAROUSEL].some(
            option => option === selectedOption
          );
        },
      },
      stylesTheme: {
        type: Object,
        default: () => ({
          container: '',
        }),
      },
      styles: {
        type: Object,
        default: () => ({}),
      },
      sizingOption: {
        type: String,
        default: options$1.PER_VIEW,
        validator(selectedOption) {
          return [options$1.FIT_CONTAINER, options$1.PER_VIEW].some(
            option => option === selectedOption
          );
        },
      },
      perView: {
        type: Number,
        default: 1,
      },
      gap: {
        type: Number,
        default: 10,
      },
      hideTrackOverflow: {
        type: Boolean,
        default: false,
      },
      visibleOnlyRange: {
        type: Boolean,
        default: false,
      },
      theme: {
        type: Object,
        default: () => ({
          class: 'tw-text-xl',
          leftArrowClass: 'tw--ml-400',
          rightArrowClass: 'tw--mr-400',
          leftArrowStyles: {},
          rightArrowStyles: {},
          disabledArrowOpacity: 0,
        }),
      }
    },
    data() {
      return {
        slides: {
          items: {},
        },
        options: options$1,
        types,
        glide: {},
        currentState: 0,
        hideScroll: true,
        swipeStartIndex: -1,
      };
    },
    computed: {
      isFirstStep() {
        return this.currentState === 0;
      },
      isLastStep() {
        return this.currentState >= (this.getLength() / this.perView) - 1;
      },
      leftArrow() {
        return {
          opacity: !this.isFirstStep ? 1 : this.theme.disabledArrowOpacity,
          pointerEvents: !this.isFirstStep ? 'all' : 'none',
          ...this.theme.leftArrowStyles,
        }
      },
      rightArrow() {
        return {
          opacity: !this.isLastStep ? 1 : this.theme.disabledArrowOpacity,
          pointerEvents: !this.isLastStep ? 'all' : 'none',
          ...this.theme.rightArrowStyles,
        }
      }
    },
    watch: {
      currentState() {
        this.$emit('setCurrentState', this.currentState);
      },
      sizingOption() {
        this.updateGlide();
      },
      perView() {
        this.updateGlide();
      },
    },
    mounted() {
      this.initGlide();
    },
    methods: {
      go(page) {
        this.glide.go(`=${page * this.perView}`);
        this.currentState = page;
        this.$emit('manuallyChangeSlide');
      },
      getAllItemsWidth() {
        let sumWidth = 0;
        let numberOfItems = 0;
        for (const key in this.slides.items) {
          if (this.slides.items.hasOwnProperty(key)) {
            numberOfItems++;
            sumWidth += this.slides.items[key].width + this.gap;
          }
        }
        return {
          width: sumWidth,
          numberOfItems,
        };
      },
      prepareGlideConfig() {
        const config = {
          perView: this.perView,
          type: this.type,
          direction: this.direction,
          gap: this.gap,
          rewind: false,
          bound: true,
        };
        if (this.sizingOption === this.options.FIT_CONTAINER) {
          const containerWidth = this.$el.clientWidth;
          const { width, numberOfItems } = this.getAllItemsWidth();
          config.perView =
            Math.floor(containerWidth / (width / numberOfItems)) || 1;
        }
        return config;
      },
      isAllVisible() {
        const { width, numberOfItems } = this.getAllItemsWidth();
        return (
          (this.sizingOption === this.options.FIT_CONTAINER &&
          this.$el.clientWidth > width) ||
          (this.sizingOption === this.options.PER_VIEW &&
          numberOfItems <= this.perView)
        );
      },
      toggleGlideState() {
        if (this.isAllVisible()) {
          this.glide.disable();
        } else {
          this.glide.enable();
        }
      },
      updateGlide() {
        this.glide.update(this.prepareGlideConfig());
        this.toggleGlideState();
      },
      recreateGlide() {
        this.glide.destroy();
        this.initGlide();
      },
      initGlide() {
        this.glide = new Glide$1(`#${this.carouselName}`, this.prepareGlideConfig());
        this.glide.on('run', value => {
          this.hideScroll = true;
          if (this.visibleOnlyRange) {
            const allElements = this.$refs.elementsList.getElementsByClassName('glide__slide');
            for (let i = 0; i < allElements.length; i++) {
              allElements[i].style.opacity = 1;
            }
          }
          this.currentState = Math.floor(this.glide.index / this.perView);
        });
        this.glide.on('move.after', value => {
          this.hideScroll = false;
          if (this.visibleOnlyRange) {
            setTimeout(() => {
              const allElements = this.$refs.elementsList.getElementsByClassName('glide__slide');
              let activeIndex = -1;
              for (let i = 0; i < allElements.length; i++) {
                if (allElements[i].className.indexOf('glide__slide--active') >= 0) {
                  activeIndex = i;
                }
                if (activeIndex >= 0 && activeIndex + this.perView > i) {
                  allElements[i].style.opacity = 1;
                } else {
                  allElements[i].style.opacity = 0;
                }
              }
            }, 0);
          }
        });
        this.glide.on('swipe.start', () => {
          this.swipeStartIndex = this.glide.index;
        });
        this.glide.on('swipe.end', () => {
          if (this.swipeStartIndex !== -1) {
            this.$emit('onSwipeEnd', { index: this.glide.index, oldIndex: this.swipeStartIndex });
          }
        });
        this.glide.mount();
        this.toggleGlideState();
      },
      getLength() {
        return Object.keys(this.slides.items).length;
      },
      onClickLeftArrow() {
        this.$emit('onClickLeftArrow');
      },
      onClickRightArrow() {
        this.$emit('onClickRightArrow');
      }
    },
    provide() {
      return { slides: this.slides };
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside CarouselContainer component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();








  var CarouselItem = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('li',{staticClass:"glide__slide"},[_c('div',{ref:"container",class:_vm.containerClass,style:(_vm.containerStyles)},[_vm._t("default")],2)])},staticRenderFns: [],
    name: 'CarouselItem',
    inject: ['slides'],
    props: {
      containerClass: {
        type: String,
        default: '',
      },
      containerStyles: {
        type: Object,
        default: () => ({}),
      },
      id: {
        type: [String, Number],
        required: true,
      },
    },
    mounted() {
      this.$set(this.slides.items, this.id, {
        width: this.$refs.container.clientWidth,
      });
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside CarouselContainer component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head$$1=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css="html[dir=rtl] .stockcar-alternative-cards[data-v-36299f70]{-webkit-box-orient:horizontal;-webkit-box-direction:reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head$$1.appendChild(style); } })();

  var StockcarDetailsAlternative = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"stockcar-alternative-cards tw-w-full tw-flex tw-flex-wrap",attrs:{"data-tracking-regionid":"sl > new car stocklocator-importers > Alternatives teaser"}},[_c('h2',{staticClass:"tw-w-full tw-text-3xl tw-text-grey-300 tw-uppercase tw-font-bmw-light"},[_vm._v(" "+_vm._s(_vm.aemConfig.alternativesHeadline)+" ")]),_vm._v(" "),(_vm.modalOpened)?_c('div',{staticClass:"model-card-overlay"},[_c('div',{staticClass:"tw-flex tw-mb-200"},[_c('p',{staticClass:"model-card-title tw-text-grey-900 tw-text-m tw-w-3/5 tw-font-bold"},[_vm._v(" "+_vm._s(_vm.modelCardConfig.fullCardTitle)+" ")]),_vm._v(" "),_c('button',{staticClass:"model-card-overlay-close-button tw-absolute tw-m-200 tw-pin-t reset-button reset-button-hover tw-text-grey-800 icon-close-x",on:{"click":_vm.closeModal}})]),_vm._v(" "),_c('StockcarDisclaimer',{attrs:{"finance-disclaimer":true,"finance-data":_vm.getPriceInformation(_vm.modelCardConfig),"currency-format":_vm.aemConfig.currencyConfiguration,"co-emission":_vm.safeGet(_vm.modelCardConfig, 'nedc.co2Comb'),"i18n":_vm.i18n,"aem-config":_vm.aemConfig}})],1):_vm._e(),_vm._v(" "),_vm._l((_vm.config),function(car,index){return _c('div',{key:index,staticClass:"sm:tw-w-1/2 tw-w-full sm:tw-block tw-hidden"},[_c('ModelCard',{staticClass:"tw-px-400 tw-py-400 lg:tw-pb-600",attrs:{"url":'/details/' + car.id,"full-card-title":car.fullCardTitle,"short-card-title":car.shortCardTitle,"card-description":car.description,"car-price":car.hasDiscountedPrice ? _vm.getVehicleDicountedPrice(car) : _vm.getVehiclePrice(car),"is-duo-reverse-variant":index === 0,"brand":car.brand === 'bmwi' ? 'WBBI' : 'WBBM',"vehicle":car.vehicle,"url-i18n":_vm.aemConfig.buttonLabel,"i18n":_vm.i18n,"shown-info":_vm.aemConfig.shownInfo,"currency-format":_vm.aemConfig.currencyConfiguration,"power":[car.powerKw, car.powerPs],"info-layer":_vm.vehicleInfoLayer(car, _vm.configInfoLayer, _vm.aemInfoLayer),"disclaimers":_vm.aemDisclaimerConfig,"cosy-url":_vm.aemConfig.cosyUrl,"cosy-prefix":_vm.aemConfig.cosyPrefix,"cosy-token":_vm.aemConfig.cosyToken,"paint":car.paint,"sa":_vm.prepareSa(car.interior, car.exterior, car.options, car.packages, car.line, car.modvar),"query":_vm.filtersQuery,"has-discounted-price":car.hasDiscountedPrice,"is-preproduction":car.isPreproduction,"card-variant":"duo","tracking-satelite-name":"stock_locator_vehicle_details"},on:{"openDisclaimer":function($event){return _vm.openDisclaimer(car)}}},[_c('template',{slot:"model-card-wltp"},[(_vm.activeBreakpoint === 'lg' || _vm.activeBreakpoint === 'xl')?_c('StockcarDisclaimer',{attrs:{"wltp-disclaimer":true,"aem-config":_vm.aemConfig,"i18n":_vm.i18n}}):_vm._e()],1),_vm._v(" "),_c('template',{slot:"model-card-finance"},[(_vm.activeBreakpoint === 'lg' || _vm.activeBreakpoint === 'xl')?_c('StockcarDisclaimer',{attrs:{"finance-disclaimer":true,"currency-format":_vm.aemConfig.currencyConfiguration,"finance-data":_vm.getPriceInformation(car),"i18n":_vm.i18n,"aem-config":_vm.aemConfig,"co-emission":_vm.safeGet(car, 'nedc.co2Comb')}}):_vm._e()],1)],2)],1)}),_vm._v(" "),_c('div',{staticClass:"sm:tw-hidden tw-flex tw-justify-center tw-items-center tw-w-full"},[_c('CarouselContainer',{staticClass:"tw-w-full tw-overflow-hidden tw-mb-600",attrs:{"hide-controls":true,"per-view":1,"gap":0,"carousel-name":"stockcar_alternative_carousel","sizing-option":"PER_VIEW"}},_vm._l((_vm.config),function(car,id){return _c('CarouselItem',{key:id,attrs:{"id":id,"container-class":"tw-items-center tw-justify-center tw-flex"}},[_c('ModelCard',{staticClass:"alternative-carousel-item tw-px-300 tw-pt-300 tw-pb-0",attrs:{"url":'/details/' + car.id,"full-card-title":car.fullCardTitle,"short-card-title":car.shortCardTitle,"card-description":car.description,"car-price":car.hasDiscountedPrice ? _vm.getVehicleDicountedPrice(car) : _vm.getVehiclePrice(car),"is-duo-reverse-variant":true,"brand":car.brand === 'bmwi' ? 'WBBI' : 'WBBM',"vehicle":car.vehicle,"i18n":_vm.i18n,"shown-info":_vm.aemConfig.shownInfo,"currency-format":_vm.aemConfig.currencyConfiguration,"power":[car.powerKw, car.powerPs],"info-layer":_vm.vehicleInfoLayer(car, _vm.configInfoLayer, _vm.aemInfoLayer),"disclaimers":_vm.aemDisclaimerConfig,"cosy-url":_vm.aemConfig.cosyUrl,"cosy-prefix":_vm.aemConfig.cosyPrefix,"cosy-token":_vm.aemConfig.cosyToken,"paint":car.paint,"sa":_vm.prepareSa(car.interior, car.exterior, car.options, car.packages, car.line, car.modvar),"query":_vm.filtersQuery,"url-i18n":_vm.aemConfig.buttonLabel,"has-discounted-price":car.hasDiscountedPrice,"is-preproduction":car.isPreproduction,"card-variant":"duo","find-out-more-i18n":"findOutMore","tracking-satelite-name":"stock_locator_vehicle_details"},on:{"openDisclaimer":function($event){return _vm.openDisclaimer(car)}}},[_c('template',{slot:"model-card-wltp"},[(_vm.activeBreakpoint === 'lg' || _vm.activeBreakpoint === 'xl')?_c('StockcarDisclaimer',{attrs:{"wltp-disclaimer":true,"i18n":_vm.i18n,"aem-config":_vm.aemConfig}}):_vm._e()],1),_vm._v(" "),_c('template',{slot:"model-card-finance"},[(_vm.activeBreakpoint === 'lg' || _vm.activeBreakpoint === 'xl')?_c('StockcarDisclaimer',{attrs:{"finance-disclaimer":true,"aem-config":_vm.aemConfig,"currency-format":_vm.aemConfig.currencyConfiguration,"finance-data":_vm.getPriceInformation(car),"co-emission":_vm.safeGet(car, 'nedc.co2Comb'),"i18n":_vm.i18n}}):_vm._e()],1)],2)],1)}),1)],1)],2)},staticRenderFns: [],_scopeId: 'data-v-36299f70',
    name: 'StockcarDetailsAlternative',
    components: {
      CarouselContainer,
      CarouselItem,
      ModelCard,
      StockcarDisclaimer,
    },
    mixins: [
      stockcarListComponentMixin,
      stockcarDetecSizeMixin,
      stockcarTranslationComponent,
      PriceMixin,
    ],
    props: {
      aemConfig: {
        type: Object,
        required: true,
      },
      filtersQuery: {
        type: Object,
        required: true,
      },
    },
    data() {
      return {
        activeBreakpoint: EventBus$1.$data.activeBreakpoint,
        modelCardConfig: null,
        modalOpened: false,
        configInfoLayer,
        vehicleInfoLayer,
        aemInfoLayer: {
          co2DefaultDisplayType: this.aemConfig.co2DefaultDisplayType,
          fuelConsumptionDefaultDisplayType: this.aemConfig
            .fuelConsumptionDefaultDisplayType,
          rangeDefaultDisplayType: this.aemConfig.rangeDefaultDisplayType,
        },
        aemDisclaimerConfig: {
          nefzDisclaimerEnable: this.aemConfig.nefzDisclaimerEnable,
          nefzCorrelatedDisclaimerEnable: this.aemConfig
            .nefzCorrelatedDisclaimerEnable,
          wltpDisclaimerEnable: this.aemConfig.wltpDisclaimerEnable,
          emissionIconDisclaimerEnable: this.aemConfig
            .emissionIconDisclaimerEnable,
        },
      };
    },
    computed: {
      option() {
        return this.breakpoint !== 'lg' && this.breakpoint !== 'xl'
          ? 'default'
          : 'duo';
      },
    },
    methods: {
      closeModal() {
        this.modalOpened = false;
      },
      openDisclaimer(modelCardConfig) {
        this.modalOpened = true;
        this.modelCardConfig = modelCardConfig;
      },
      safeGet(object, path) {
        return get(object, path);
      },
      prepareSa(interior, exterior, options, packages = [], line = [], modvar = []) {
        let sa = [];
        return sa.concat(interior, exterior, options, packages, line, modvar).join();
      },
    },
    mounted() {
      EventBus$1.$on('breakpointChange', (breakpoint) => {
        this.activeBreakpoint = breakpoint;
      });
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".options-overlay[data-v-9afb24e0]{-webkit-box-shadow:0 10px 17px 0 rgba(0,0,0,.12),0 4px 8px 0 rgba(0,0,0,.15);box-shadow:0 10px 17px 0 rgba(0,0,0,.12),0 4px 8px 0 rgba(0,0,0,.15)}.black-overlay[data-v-9afb24e0]{background:rgba(0,0,0,.7)}.options-thumbnail-container[data-v-9afb24e0]{-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.options-thumbnail-container[data-v-9afb24e0]:hover{-webkit-box-shadow:0 8px 15px 0 rgba(0,0,0,.15),0 2px 8px 0 rgba(0,0,0,.15);box-shadow:0 8px 15px 0 rgba(0,0,0,.15),0 2px 8px 0 rgba(0,0,0,.15)}.option-card-title[data-v-9afb24e0]{min-height:70px}.disclaimer-icon[data-v-9afb24e0]{z-index:1}.disclaimer-info-icon[data-v-9afb24e0]:hover{background:transparent;border:2px solid transparent;-webkit-box-shadow:0 1px 2px 0 rgba(0,0,0,.1),0 2px 5px 0 rgba(0,0,0,.2);box-shadow:0 1px 2px 0 rgba(0,0,0,.1),0 2px 5px 0 rgba(0,0,0,.2);-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}html[dir=rtl] .option-card-title .tw-pl-300[data-v-9afb24e0]{padding-right:15px;padding-left:0}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var TitledOptionCard = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-w-full options-thumbnail-container tw-mb-700 tw-border-grey-300 tw-border-100 tw-border-solid"},[_c('BaseImageCard',{scopedSlots:_vm._u([{key:"image",fn:function(scopeContent){return [(scopeContent.sizes.width > 0)?_c('div',{staticClass:"tw-w-full tw-inline-block border-b-200 tw-border-grey-300"},[_c('ThumbnailCosyImage',{staticClass:"tw-w-full",attrs:{"sa":_vm.config.sa,"brand":_vm.config.brand === 'bmwi' ? 'WBBI' : 'WBBM',"vehicle":_vm.config.vehicle,"width":scopeContent.sizes.width,"height":scopeContent.sizes.height,"background":"ORIGINAL","angle":"0","client":"static","view":"static_1560x880"}})],1):_vm._e()]}}])},[_vm._v(" "),_c('div',{staticClass:"option-card-title tw-flex tw-p-300 tw-items-center tw-border-grey-300 tw-border-t-100 tw-border-solid"},[_c('div',{staticClass:"disclaimer-icon tw-inline-block"},[_c('div',{staticClass:"disclaimer-info-icon tw-relative tw-cursor-pointer tw-border-solid tw-rounded-full tw-border-200 tw-border-grey-300 tw-ml-200 tw-inline-block tw-text-m",on:{"click":function($event){return _vm.openOverlay()}}},[_c('i',{staticClass:"icon-info-i tw-text-grey-600 tw-flex"})])]),_vm._v(" "),_c('div',{staticClass:"tw-inline-block"},[_c('span',{staticClass:"tw-pl-300 tw-min-h-300 tw-font-bmw-light tw-text-black tw-inline-block tw-text-2xs"},[_vm._v(" "+_vm._s(_vm.title)+" ("+_vm._s(_vm._f("capitalize")(_vm.config.sa))+") ")])]),_vm._v(" "),_c('transition-group',{attrs:{"name":"fade"}},[(_vm.overlay)?_c('div',{key:"options-overlay",staticClass:"options-overlay tw-z-200 tw-w-full tw-pin-l tw-absolute tw-z-20 tw-p-600 tw-bg-white",style:({
              top: `${_vm.overlayTopPosition}px`,
            })},[_c('div',{staticClass:"tw-text-2xl tw-mb-500 tw-font-light"},[_vm._v(" "+_vm._s(_vm.title)+" ("+_vm._s(_vm._f("capitalize")(_vm.config.sa))+") ")]),_vm._v(" "),_c('ThumbnailCosyImage',{staticClass:"tw-w-full tw-mb-500",attrs:{"sa":_vm.config.sa,"brand":_vm.config.brand === 'bmwi' ? 'WBBI' : 'WBBM',"vehicle":_vm.config.vehicle,"width":_vm.sizes.width,"height":_vm.sizes.height,"background":"ORIGINAL","angle":"0","client":"static","view":"static_1560x880"}}),_vm._v(" "),_c('div',{staticClass:"tw-text-xs"},[_vm._v(" "+_vm._s(_vm.config.desc)+" ")]),_vm._v(" "),_c('button',{staticClass:"close-button tw-absolute tw-mt-200 tw-mr-200 tw-pin-r tw-pin-t reset-button reset-button-hover tw-text-grey-900 icon-close-x",class:_vm.buttonStyle,on:{"click":_vm.closeOverlay}})],1):_vm._e(),_vm._v(" "),(_vm.overlay)?_c('div',{key:"black-overlay",staticClass:"black-overlay tw-pin-l tw-pin-t tw-block tw-fixed tw-w-full tw-h-full tw-z-100"}):_vm._e()])],1)])],1)},staticRenderFns: [],_scopeId: 'data-v-9afb24e0',
    name: 'TitledOptionCard',
    components: { BaseImageCard, ColorThumbnail, ThumbnailCosyImage },
    filters: {
      capitalize (value) {
        return value.toUpperCase();
      }
    },
    props: {
      config: {
        type: Object,
        default() {
          return {};
        },
      },
      title: {
        type: String,
        default: '',
      },
    },

    data() {
      return {
        overlay: false,
        overlayTopPosition: 0,
        sizes: {
          width: 0,
          height: 0,
        },
      };
    },
    methods: {
      closeOverlay() {
        this.overlay = false;

      },
      trackTogglingOverlayEvent() {
        TrackingEventHandler.dispatchEvent(TRACKING_EVENT_EQUIPMENT_LAYER_OPENED, { saCode: this.config.sa });
      },
      openOverlay() {
        this.overlayTopPosition = Math.round(window.pageYOffset) + 50;
        this.overlay = true;
        this.trackTogglingOverlayEvent();
      },
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".icon-arrow-down[data-v-53ee6839]:before,.icon-arrow-up[data-v-53ee6839]:before{color:#262626}@media (min-width:576px) and (max-width:768px){.option-card[data-v-53ee6839]:nth-child(2n){padding-right:0}}html[dir=rtl] .option-card-title .tw-pl-300[data-v-53ee6839]{padding-right:15px;padding-left:0}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var StockcarDetailsOptions = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-w-full"},[_c('div',{staticClass:"option-list tw-flex tw-flex-wrap"},_vm._l((_vm.getConfig()),function(option,key){return _c('div',{key:key,staticClass:"lg:tw-w-1/4 md:tw-w-1/2 tw-w-full md:tw-pr-300 tw-flex option-card tw-inline-block tw-align-top sm:tw-pt-200 tw-pb-400 sm:tw-pb-0",class:{ 'lg:sm:tw-pb-800': key < _vm.config.length - 4 }},[_c('TitledOptionCard',{attrs:{"title":option.title,"config":option.config}})],1)}),0),_vm._v(" "),(_vm.config.length > 8)?_c('div',{staticClass:"tw-flex tw-justify-center tw-items-center tw-font-bmw-bold tw--mt-600 tw-text-2xs tw-pt-500"},[_c('a',{staticClass:"tw-flex tw-items-center",on:{"click":_vm.toggleDropdown}},[_c('i',{staticClass:"tw-text-xl tw-text-grey-900",class:{ 'icon-arrow-up': !_vm.isToggled, 'icon-arrow-down': _vm.isToggled }}),_vm._v(" "),(_vm.isToggled)?_c('span',{staticClass:"tw-text-grey-900 tw-font-bmw-bold tw-text-s"},[_vm._v(" "+_vm._s(_vm.i18n.showMore)+" ")]):_c('span',{staticClass:"tw-text-grey-900 tw-font-bmw-bold tw-text-s"},[_vm._v(" "+_vm._s(_vm.i18n.showLess)+" ")])])]):_vm._e()])},staticRenderFns: [],_scopeId: 'data-v-53ee6839',
    name: 'StockcarDetailsOptions',
    components: { TitledOptionCard },
    mixins: [stockcarListComponentMixin, stockcarDetecSizeMixin, stockcarTranslationComponent],
    provide: {
      injectedFallbackImagePath: `${CLIENTLIBS_RESOURCES_PATH}${EQUIPMENT_IMAGE_FALLBACK_FILENAME}`,
    },
    data() {
      return {
        limit: 8,
        isToggled: true,
      };
    },
    watch: {
      device() {
        this.limit = this.limitOptions();
      },
    },
    created() {
      this.limit = this.limitOptions();
    },
    methods: {
      limitOptions() {
        switch (this.device) {
        case 'desktop':
          return 8;
        case 'tablet':
          return 6;
        case 'mobile':
          return 2;
        default:
          return 8;
        }
      },
      getConfig() {
        return this.config.slice(0, this.limit);
      },
      toggleDropdown() {
        this.isToggled = !this.isToggled;
        this.limit = this.isToggled ? this.limitOptions() : this.config.length;
      },
    },
  };

  /*
  @bmwkit/cta-button
  Version: 0.0.1
  (c) Interone
  */
  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".cta-button[data-v-2576ecb9]{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;color:#fff}.cta-button.full-width[data-v-2576ecb9]{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1;flex:1;width:100%}.cta-button.anchor[data-v-2576ecb9]{color:#262626;cursor:pointer;background-color:#fff}.cta-button.anchor[data-v-2576ecb9]:hover{color:#0653b6}.cta-button.anchor .icon-arrow-right[data-v-2576ecb9]:before{color:#1c69d4}.cta-button.anchor:hover .icon-arrow-right[data-v-2576ecb9]:before{color:#0653b6}.cta-button-content[data-v-2576ecb9]{-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-ms-flex-negative:0;flex-shrink:0;-ms-flex-preferred-size:auto;flex-basis:auto;margin:0 auto;white-space:nowrap}.anchor .cta-button-content[data-v-2576ecb9]{-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();


















  var CtaButton = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(_vm.rootTag,{tag:"component",staticClass:"cta-button tw-text-button tw-justify-center tw-pt-0 tw-pb-0 tw-align-middle tw-items-center tw-overflow-hidden tw-font-bmw-bold",class:[_vm.elementClasses, _vm.backgroundClasses],attrs:{"href":_vm.href,"target":_vm.target},on:{"click":_vm.propagateEvent}},[(_vm.$slots['default'])?_c('div',{staticClass:"cta-button-content tw-h-600 tw-flex tw-relative tw-items-center tw-justify-center tw-whitespace-no-wrap tw-font-bmw-bold"},[_vm._t("default")],2):_vm._e()])},staticRenderFns: [],_scopeId: 'data-v-2576ecb9',
    name: 'CtaButton',
    props: {
      fullWidth: {
        type: Boolean,
        default: false,
      },
      backgroundClasses: {
        type: String,
        default: 'tw-bg-primary-500 hover:tw-bg-primary-900',
      },
      href: {
        type: String,
        default: undefined,
        required: false,
      },
      type: {
        type: String,
        default: 'button',
        required: false,
        validator: (value) => {
          return ['button', 'anchor'].indexOf(value) > -1;
        },
      },
      target: {
        type: String,
        default: null,
        required: false,
      },
    },
    computed: {
      elementClasses() {
        return {
          'full-width': this.fullWidth,
          anchor: this.type === 'anchor',
        };
      },
      rootTag() {
        if (this.href) {
          return 'a';
        }
        return 'button';
      },
    },

    methods: {
      bodyContainsClass(className) {
        return document.body.classList.contains(className);
      },
      propagateEvent($event) {
        this.$emit('click', $event);
        if (this.type === 'button' && this.bodyContainsClass('ds2-page--h5vco')) {
          window.location.href = this.href;
          location.reload();
        }
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(`${err.stack}\n\nfound in ${info} inside CtaButton component`);
      this.$emit('error', err);
      return false;
    },
  };

  /*
  @bmwkit/google-map
  Version: 0.0.1
  (c) Interone
  */
  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();







  var GoogleMap = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:"googleMap",style:(_vm.style)})},staticRenderFns: [],
    name: 'GoogleMap',
    props: {
      height: {
        type: String,
        default: '400px'
      },
      width: {
        type: String,
        default: '100%'
      },
      lat: {
        type: Number,
        default: 0
      },
      lng: {
        type: Number,
        default: 0
      },
      zoom: {
        type: Number,
        default: 8
      },
      fullscreenControl: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        map: null
      }
    },
    computed: {
      style() {
        return {
          height: this.height,
          width: this.width
        }
      },
    },
    watch: {
      lat() {
        return this.renderMap();
      },
      lng() {
        return this.renderMap();
      }
    },
    mounted() {
      // TODO: fix eslint error and import google object as part of this component
      /* eslint-disable */
      this.map = new google.maps.Map(this.$refs.googleMap, {
        center: { lat: this.lat, lng: this.lng },
        zoom: this.zoom,
        fullscreenControl: this.fullscreenControl
      });
      this.renderMap();
    },
    methods: {
      renderMap() {
        // TODO: fix eslint error and import google object as part of this component
        /* eslint-disable */

        let marker = new google.maps.Marker({
          position: { lat:this.lat, lng: this.lng },
          map: this.map,
        });
        this.map.setCenter(marker.getPosition());
        return marker
        /* eslint-enable */
      }
    },
    errorCaptured(err, vm, info) {
      console.warn(`${err.stack}\n\nfound in ${info} inside GoogleMap component`);
      this.$emit('error', err);
      return false
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".map-disclaimer>a{font-family:bmwTypeNextWeb,Arial,Helvetica,Roboto,sans-serif;font-weight:700}.icon-location[data-v-2e92a418]{width:51px;height:51px;font-size:26px;line-height:51px;text-align:center}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var StockcarDetailsDealerLocator = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.config)?_c('div',{staticClass:"tw-w-full"},[(!_vm.hasMoreOptions)?_c('div',[_c('h3',{staticClass:"tw-mb-200 tw-font-bmw-light"},[_vm._v(" "+_vm._s(_vm.config[0].dealerName)+" ")])]):_vm._e(),_vm._v(" "),(_vm.hasMoreOptions)?_c('div',{staticClass:"tw-flex tw-flex-row tw-items-center tw-justify-between tw-pb-500"},[_c('div',{staticClass:"tw-w-full md:tw-w-1/2 lg:tw-w-1/4"},[_c('BaseSelect',{staticClass:"tw-border-300 tw-border-solid",attrs:{"items":_vm.config,"events":['click'],"show-value":false,"title":_vm.selectTitle,"shadow-button":true,"direct-value-to-title":_vm.selectedDealer ? _vm.selectedDealer.dealerName : ''},on:{"select":_vm.selectObject},scopedSlots:_vm._u([{key:"default",fn:function({ item }){return _c('div',{},[_vm._v(" "+_vm._s(item.dealerName)+" ")])}}],null,false,1330476675)})],1),_vm._v(" "),(_vm.selectedDealer)?_c('div',{staticClass:"tw-flex tw-flex-row tw-items-center tw-font-bmw-bold tw-text-xs tw-cursor-pointer",on:{"click":_vm.toggleMap}},[_c('span',{staticClass:"tw-hidden md:tw-block"},[_vm._v(" "+_vm._s(_vm.showMapText)+" ")]),_vm._v(" "),_c('div',{staticClass:"map-icon",class:{ 'tw-text-2xl icon-close-x': _vm.showMap, 'icon-location tw-text-xl tw-text-grey-300 tw-bg-grey-800 tw-ml-200': !_vm.showMap }})]):_vm._e()]):_vm._e(),_vm._v(" "),(_vm.selectedDealer)?_c('div',{staticClass:"tw-w-full",attrs:{"id":"stockcar__dealer-section"}},[_c('div',{staticClass:"tw-flex tw-flex-row tw-flex-wrap tw-mb-300 lg:tw-mb-500"},[_c('div',{class:_vm.containerClasses},[_c('div',{class:_vm.labelClasses},[_vm._v(" "+_vm._s(_vm.i18n.address)+" ")]),_vm._v(" "),_c('div',{class:_vm.textClasses},[_vm._v(" "+_vm._s(_vm.address)+" ")])]),_vm._v(" "),(_vm.currentGeolocation)?_c('div',{class:_vm.containerClasses},[_c('div',{class:_vm.labelClasses},[_vm._v(" "+_vm._s(_vm.i18n.distance)+" ")]),_vm._v(" "),_c('div',{class:_vm.textClasses},[_vm._v(" "+_vm._s(_vm.distance)+" ")])]):_vm._e(),_vm._v(" "),_c('div',{class:_vm.containerClasses},[_c('div',{class:_vm.labelClasses},[_vm._v(" "+_vm._s(_vm.i18n.phone)+" ")]),_vm._v(" "),_c('div',{class:_vm.textClasses},[_c('bdi',[_vm._v(" "+_vm._s(_vm.selectedDealer.phone)+" ")])])]),_vm._v(" "),_c('div',{class:_vm.containerClasses},[_c('div',{class:_vm.labelClasses},[_vm._v(" "+_vm._s(_vm.i18n.email)+" ")]),_vm._v(" "),_c('div',{class:_vm.textClasses},[_vm._v(" "+_vm._s(_vm.selectedDealer.email)+" ")])])]),_vm._v(" "),_c('div',{staticClass:"tw-flex tw-flex-row tw-flex-wrap tw-mb-300 lg:tw-mb-500"},[(_vm.showMap)?_c('GoogleMap',{attrs:{"lat":_vm.coords.lat,"lng":_vm.coords.lng,"zoom":10}}):_vm._e()],1),_vm._v(" "),_c('p',{staticClass:"map-disclaimer tw-font-bmw-light",domProps:{"innerHTML":_vm._s(_vm.i18n.DLO_Maps_Disclaimer_Google)}}),_vm._v(" "),_c('div',{staticClass:"tw-flex tw-flex-row tw-flex-wrap"},[(_vm.aemConfig.ctaBuyNow)?_c('CtaButton',{staticClass:"tw-w-full md:tw-w-1/2 lg:tw-w-1/4 tw-mr-200 tw-mb-0 tw-mt-200 tw-text-2xs",attrs:{"href":_vm.ctaBuyNowPath,"target":_vm.aemConfig.ctaBuyNowTarget},on:{"click":function($event){$event.preventDefault();return _vm.changeURL(_vm.ctaBuyNowPath, _vm.aemConfig.ctaBuyNowTarget, 'Buy Now')}}},[_vm._v(" "+_vm._s(_vm.i18n.buyNow)+" ")]):_vm._e(),_vm._v(" "),(_vm.aemConfig.ctaRFO)?_c('CtaButton',{staticClass:"tw-w-full md:tw-w-1/2 lg:tw-w-1/4 tw-mr-200 tw-mb-0 tw-mt-200 tw-text-2xs",attrs:{"background-classes":_vm.aemConfig.ctaBuyNow ? 'tw-bg-grey-800 hover:tw-bg-grey-900' : 'tw-bg-primary-500 hover:tw-bg-primary-900',"href":_vm.ctaRfoPath,"target":_vm.aemConfig.ctaRFOTarget},on:{"click":function($event){$event.preventDefault();return _vm.changeURL(_vm.ctaRfoPath, _vm.aemConfig.ctaRFOTarget, 'RFO')}}},[_vm._v(" "+_vm._s(_vm.i18n.rfo)+" ")]):_vm._e(),_vm._v(" "),(_vm.aemConfig.ctaTDA)?_c('CtaButton',{staticClass:"tw-w-full md:tw-w-1/2 lg:tw-w-1/4 tw-mr-200 tw-mb-0 tw-mt-200 tw-text-2xs",attrs:{"background-classes":_vm.aemConfig.ctaBuyNow || _vm.aemConfig.ctaRFO ? 'tw-bg-grey-800 hover:tw-bg-grey-900' : 'tw-bg-primary-500 hover:tw-bg-primary-900',"href":_vm.ctaTdaPath,"target":_vm.aemConfig.ctaTDATarget},on:{"click":function($event){$event.preventDefault();return _vm.changeURL(_vm.ctaTdaPath, _vm.aemConfig.ctaTDATarget, 'TDA')}}},[_vm._v(" "+_vm._s(_vm.i18n.tda)+" ")]):_vm._e()],1)]):_vm._e()]):_vm._e()},staticRenderFns: [],_scopeId: 'data-v-2e92a418',
    name: 'StockcarDetailsDealerLocator',
    components: { BaseSelect, GoogleMap, CtaButton },
    mixins: [stockcarListComponentMixin, stockcarTranslationComponent],
    props: {
      selectTitle: {
        type: String,
        default: 'Please select a dealer',
      },
      currentGeolocation: {
        type: Object,
        default: () => null,
      },
      aemConfig: {
        type: Object,
        required: true,
      },
      ctaBuyNowPath: {
        type: String,
        default: '',
      },
      ctaRfoPath: {
        type: String,
        default: '',
      },
      ctaTdaPath: {
        type: String,
        default: '',
      },
    },
    data() {
      return {
        showMap: true,
        containerClasses:
          'tw-w-full sm:tw-w-1/2 lg:tw-w-1/4 tw-mb-300 sm:tw-mb-500 lg:tw-mb-0',
        labelClasses:
          'tw-text-xs tw-font-bmw-light tw-text-grey-500 tw-w-full sm:tw-w-4/5',
        textClasses:
          'tw-text-xs tw-font-bmw-light tw-text-grey-900 tw-w-full sm:tw-w-4/5',
        selectedDealer: null,
      };
    },
    computed: {
      distance() {
        return `${getDistanceFromCurrentPos(
        this.coords,
        this.currentGeolocation
      )} km`;
      },
      showMapText() {
        return this.showMap ? this.i18n.hideMapText : this.i18n.showMapText;
      },
      address() {
        if (this.selectedDealer && this.selectedDealer.dealerLocation) {
          const { address } = this.selectedDealer.dealerLocation;

          return `${address.street} ${address.postalCode} ${
          address.city
        }`;
        }
        return '';
      },
      coords() {
        return {
          lng: this.selectedDealer.dealerLocation.coordinates.lon,
          lat: this.selectedDealer.dealerLocation.coordinates.lat,
        };
      },
      hasMoreOptions() {
        return this.config.length > 1;
      },
    },
    mounted() {
      if (Array.isArray(this.config) && !this.hasMoreOptions) {
        this.selectObject(0);
      }
    },
    methods: {
      selectObject(index) {
        if (
          this.config[index] &&
          this.config[index].hasOwnProperty('dealerLocation')
        ) {
          this.selectedDealer = this.config[index];
          this.$emit('onChangeDealer', {
            dealer: this.config[index],
            index: index,
          });
        }
      },
      changeURL(url, target, type) {
        TrackingEventHandler.dispatchEvent(TRACKING_EVENT_RFX_CLICK, { type, url });
        if (target === '_blank') {
          window.open(url, target);
        } else {
          window.location = url;
        }
      },
      toggleMap() {
        this.showMap = !this.showMap;
      },
    },
  };

  /*
  @bmwkit/base-icon
  Version: 0.0.1
  (c) Interone
  */
  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".base-icon[data-v-63ba6ee3]{font-size:45px;vertical-align:text-bottom}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();









  var BaseIcon = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('i',{staticClass:"base-icon tw-absolute tw-items-center tw-inline-flex tw-justify-center",class:_vm.iconClass,style:({'color': _vm.color}),attrs:{"aria-hidden":"true"}})},staticRenderFns: [],_scopeId: 'data-v-63ba6ee3',
    name: 'BaseIcon',
    props: {
      right: {
        type: Boolean
      },
      left: {
        type: Boolean
      },
      iconClass: {
        type: String,
        default: 'icon-info-i'
      },
      color: {
        type: String,
        default: "#262626"
      }
    },
    errorCaptured (err, vm, info) {
      console.warn(`${err.stack}\n\nfound in ${info} inside BaseIcon component`);
      this.$emit('error', err);
      return false
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();














  var ArrowRight = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('svg',{attrs:{"width":"12","height":"13","viewBox":"0 0 12 13","fill":"none","xmlns":"http://www.w3.org/2000/svg"}},[_c('path',{attrs:{"d":"M9.78916 6.28955L3.78991 12.2896L2.21045 10.7101L6.63174 6.28955L2.21045 1.86901L3.78991 0.289551L9.78916 6.28955Z"}})])},staticRenderFns: [],
    name: 'ArrowRight',
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".arrow-icon[data-v-7a136422]{fill:currentColor}.subtitle-2[data-v-7a136422]{font-size:14px;font-size:.875rem;line-height:20px;line-height:1.25rem}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var FinanceLabel = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-text-grey-900 hover:tw-text-grey-800 tw-cursor-pointer",on:{"click":function($event){return _vm.handleFinanceLabelClick()}}},[_c('ArrowRight',{staticClass:"arrow-icon tw-inline"}),_vm._v(" "),_c('span',{staticClass:"tw-font-bmw-bold tw-inline subtitle-2"},[_vm._v(_vm._s(_vm.i18n.financeRate))])],1)},staticRenderFns: [],_scopeId: 'data-v-7a136422',
    name: 'FinanceLabel',
    components: {
      ArrowRight,
    },
    props: {
      i18n: {
        type: Object,
      }
    },
    methods: {
      scrollToElement(element, offset = 120) {
        const finalOffset = element.offsetTop - offset;
        window.scrollTo(0, finalOffset);
      },
      handleFinanceLabelClick() {
        const financeSectionElement = document.getElementById(
          'stockcar__finance-section'
        );
        this.scrollToElement(financeSectionElement);
      }
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();













  var ModelName = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h1',{staticClass:"tw-m-0 tw-font-bmw-light headline-3"},[_vm._v(" "+_vm._s(_vm.modelName)+" ")]),_vm._v(" "),_c('div',{staticClass:"tw-text-grey-600 tw-font-bmw-light caption"},[_c('span',[_vm._v(_vm._s(_vm.referenceNumber))]),_vm._v(" "+_vm._s(_vm.carReferenceNumber)+" ")])])},staticRenderFns: [],
    name: 'ModelName',
    props: {
      modelName: {
        type: String,
      },
      referenceNumber: {
        type: String,
      },
      carReferenceNumber: {
        type: String,
      }
    }
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".body-2[data-v-bd5972b8]{font-size:14px;font-size:.875rem;line-height:20px;line-height:1.25rem}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();










  var DealerLocatorIntro = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.selectedDealer)?_c('div',[_c('span',{staticClass:"tw-font-bmw-light body-2"},[_vm._v(_vm._s(_vm.i18n.availableLabel))]),_vm._v(" "),_c('span',{staticClass:"tw-font-bmw-bold link-2 hover:tw-text-grey-800 tw-cursor-pointer",attrs:{"selectedDealer":_vm.selectedDealer},on:{"click":function($event){return _vm.handleDealerNameClick()}}},[_vm._v(" "+_vm._s(_vm.selectedDealer.dealerName))])]):_vm._e()},staticRenderFns: [],_scopeId: 'data-v-bd5972b8',
    name: 'ModelName',
    props: {
      currentCar: {
        type: Object,
      },
      i18n: {
        type: Object,
      },
      selectedDealer: {
        type: Object,
      }
    },
    methods: {
      scrollToElement(element, offset = 120) {
        const finalOffset = element.offsetTop - offset;
        window.scrollTo(0, finalOffset);
      },
      handleDealerNameClick() {
        const dealerSectionElement = document.getElementById(
          'stockcar__dealer-section'
        );
        this.scrollToElement(dealerSectionElement);
      },
    }
  };

  const cosyConfig  = {
    constantsConfig: {
      width: 1200,
      height: 500,
      scale: {
        desktop: 1,
        tablet: 0.7,
        mobile: 0.5,
      },
    },
    sliderCosyConfig: [
      {
        angle: 40,
        pov: 'WALKAROUND',
        w: 12000,
        h: 12000,
        x: -1000,
        y: -500,
        cut: 1,
      },
      {
        angle: 180,
        pov: 'WALKAROUND',
        w: 12000,
        h: 12000,
        x: -1000,
        y: -500,
        cut: 1,
      },
      {
        angle: 0,
        pov: 'WALKAROUND',
        w: 12000,
        h: 12000,
        x: -1000,
        y: -500,
        cut: 1,
      },
      {
        angle: 90,
        pov: 'WALKAROUND',
        w: 12000,
        h: 12000,
        x: -1000,
        y: -500,
        cut: 1,
      },
      {
        angle: 150,
        pov: 'WALKAROUND',
        w: 12000,
        h: 12000,
        x: -1000,
        y: -500,
        cut: 1,
      },
      {
        pov: 'DRIVERDOOR',
        bkgnd: 'SKYNCC',
        client: 'NVCO',
        cut: 1,
      },
      {
        pov: 'CLOSEUPPOLSTER',
        bkgnd: 'SKYNCC',
        client: 'NVCO',
        cut: 1,
      },
      {
        pov: 'DASHBOARD',
        bkgnd: 'SKYNCC',
        client: 'NVCO',
        cut: 1,
      },
    ],
  };

  (function(){ if(typeof document !== 'undefined'){ var head$$1=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".stockcar-details-disclaimer{line-height:.5}.disclaimer-icon{width:23px;height:23px}.icon-info-i{width:19px;height:19px}.icon-info-i:before{width:100%;height:100%;line-height:19px;text-align:center}.stockcar-details-carousel .pagination-controls{width:10px;height:10px}.stockcar-details-carousel .pagination-controls.active{width:12px;height:12px;background:#262626}.stockcar-details-carousel-container .details-card-disclaimer{width:385px;border:1px solid #e6e6e6}.details-card-disclaimer.left-arrow:after,.details-card-disclaimer.left-arrow:before{position:absolute;top:55px;right:100%;width:0;height:0;pointer-events:none;content:\" \";border:solid transparent}.details-card-disclaimer.left-arrow:after{margin-top:-14px;border-width:14px;border-color:hsla(0,0%,100%,0) #fff hsla(0,0%,100%,0) hsla(0,0%,100%,0)}.details-card-disclaimer.left-arrow:before{margin-top:-15px;border-width:15px;border-color:transparent #e6e6e6 transparent transparent}.details-card-disclaimer-icon{line-height:.5}.disclaimer-info-icon:hover{background:transparent;border:2px solid transparent;-webkit-box-shadow:0 1px 2px 0 rgba(0,0,0,.1),0 2px 5px 0 rgba(0,0,0,.2);box-shadow:0 1px 2px 0 rgba(0,0,0,.1),0 2px 5px 0 rgba(0,0,0,.2);-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.close-button{font-size:50px}.headline-3{font-size:24px;font-size:1.5rem;line-height:32px;line-height:2rem}.caption{font-size:12px;font-size:.75rem;line-height:16px;line-height:1rem;margin-bottom:12px}.label-1{font-size:12px;font-size:.75rem;line-height:16px;line-height:1rem}.link-2{font-size:14px;font-size:.875rem;line-height:20px;line-height:1.25rem;text-decoration:underline}.flex-order-carousel{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}@media (min-width:1025px){.stockcar-details-carousel-container .details-card-disclaimer{position:absolute;z-index:100}.headline-3{font-size:1.5rem;line-height:2rem}}@media (max-width:1024px){.stockcar-details-carousel-container .details-card-disclaimer{position:fixed;top:0!important;left:0!important;z-index:1000000;width:100vw!important;height:100vh}}@media (max-width:992px){.stockcar-details-disclaimer-container{height:100%;max-height:100%;overflow:auto}.flex-order-carousel{-webkit-box-ordinal-group:1;-ms-flex-order:0;order:0}}.stage-flag{margin-bottom:24px!important}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head$$1.appendChild(style); } })();

  var StockcarDetailsCarousel = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"click-outside",rawName:"v-click-outside",value:(_vm.closeDisclaimer),expression:"closeDisclaimer"}],ref:"detailsCarousel",staticClass:"stockcar-details-carousel-container tw-w-full tw-flex lg:tw-flex-row md:tw-flex-col tw-flex-col"},[(this.shouldShowFlag || this.shouldShowComingSoonFlag)?_c('div',{staticClass:"lg:tw-hidden"},[_c('ModelCardFlag',{staticClass:"stage-flag",attrs:{"label-text":this.shouldShowComingSoonFlag
            ? _vm.i18n.comingSoonLabel
            : _vm.i18n.specialOfferLabel,"is-coming-soon-flag":this.shouldShowComingSoonFlag}})],1):_vm._e(),_vm._v(" "),_c('ModelName',{staticClass:"md:tw-block tw-hidden lg:tw-hidden",attrs:{"model-name":_vm.currentCar.modelName,"reference-number":_vm.i18n.referenceNumber,"car-reference-number":_vm.currentCar.carReferenceNumber}}),_vm._v(" "),(!_vm.hasPreprodImages && _vm.config.length)?_c('div',{staticClass:"lg:tw-w-2/3 tw-w-full tw-overflow-hidden flex-order-carousel lg:tw-mb-0 tw-mb-300"},[_c('CarouselContainer',{staticClass:"stockcar-details-carousel",attrs:{"gap":0,"hide-controls":false,"per-view":1,"theme":_vm.carouselTheme,"carousel-name":"stockcar_carousel","sizing-option":"PER_VIEW"},on:{"manuallyChangeSlide":function($event){return _vm.changeSlide('pagination')},"onClickLeftArrow":function($event){return _vm.changeSlide('left')},"onClickRightArrow":function($event){return _vm.changeSlide('right')},"setCurrentState":_vm.setCurrentState}},_vm._l((_vm.sliderCosyConfig),function(item,id){return _c('CarouselItem',{key:id,attrs:{"id":id,"container-class":"tw-items-center tw-justify-center tw-flex"}},[_c('BaseImageCard',{scopedSlots:_vm._u([{key:"image",fn:function(scopeContent){return [(scopeContent.sizes.width > 0)?_c('div',{staticClass:"tw-w-full tw-inline-block"},[_c('CosyImage',{attrs:{"angle":item.angle,"brand":_vm.config[0].brand === 'bmwi' ? 'WBBI' : 'WBBM',"cosy-prefix":_vm.aemConfig.cosyPrefix,"cosy-token":_vm.aemConfig.cosyToken,"cosy-url":_vm.aemConfig.cosyUrl,"cut":item.cut,"fabric":_vm.getFabricCode(_vm.config[0].interior),"h":item.h,"height":_vm.constantsConfig.height * _vm.constantsConfig.scale[_vm.device],"paint":_vm.config[0].paint,"pov":item.pov,"sa":_vm.prepareSa(
                      _vm.config[0].interior,
                      _vm.config[0].exterior,
                      _vm.config[0].options,
                      _vm.config[0].packages,
                      _vm.config[0].line,
                      _vm.config[0].modvar
                    ),"tilt":item.tilt,"vehicle":_vm.config[0].vehicle,"view":item.view,"w":item.w,"width":_vm.constantsConfig.width * _vm.constantsConfig.scale[_vm.device],"x":item.x,"y":item.y,"client":"NVCO","alt":"Car not found"}})],1):_vm._e()]}}],null,true)})],1)}),1)],1):_vm._e(),_vm._v(" "),(_vm.hasPreprodImages)?_c('div',{staticClass:"lg:tw-w-2/3 tw-w-full tw-overflow-hidden flex-order-carousel lg:tw-mb-0 tw-mb-300"},[_c('CarouselContainer',{staticClass:"stockcar-details-carousel",attrs:{"gap":0,"hide-controls":false,"per-view":1,"theme":_vm.carouselTheme,"carousel-name":"stockcar_carousel","sizing-option":"PER_VIEW"},on:{"manuallyChangeSlide":function($event){return _vm.changeSlide('pagination')},"onClickLeftArrow":function($event){return _vm.changeSlide('left')},"onClickRightArrow":function($event){return _vm.changeSlide('right')},"setCurrentState":_vm.setCurrentState}},_vm._l((_vm.preprodImages),function(item,id){return _c('CarouselItem',{key:id,attrs:{"id":id,"container-class":"tw-items-center tw-justify-center tw-flex"}},[_c('BaseImageCard',{scopedSlots:_vm._u([{key:"image",fn:function(scopeContent){return [(scopeContent.sizes.width > 0)?_c('div',{staticClass:"tw-w-full tw-inline-block"},[(item)?_c('img',{attrs:{"src":item.url,"alt":_vm.currentCar.modelName}}):_vm._e()]):_vm._e()]}}],null,true)})],1)}),1)],1):_vm._e(),_vm._v(" "),_c('div',{staticClass:"lg:tw-w-1/3 tw-w-full tw-flex-col tw-justify-center tw-flex"},[_c('div',{staticClass:"tw-hidden lg:tw-block"},[(this.shouldShowFlag || this.shouldShowComingSoonFlag)?_c('ModelCardFlag',{staticClass:"stage-flag",attrs:{"label-text":this.shouldShowComingSoonFlag
              ? _vm.i18n.comingSoonLabel
              : _vm.i18n.specialOfferLabel,"is-coming-soon-flag":this.shouldShowComingSoonFlag}}):_vm._e()],1),_vm._v(" "),_c('ModelName',{staticClass:"tw-block lg:tw-block md:tw-hidden",attrs:{"model-name":_vm.currentCar.modelName,"reference-number":_vm.i18n.referenceNumber,"car-reference-number":_vm.currentCar.carReferenceNumber}}),_vm._v(" "),(_vm.carPrice !== 0)?[_c('div',{staticClass:"tw-uppercase tw-font-bmw-bold label-1"},[_c('span',[_vm._v(_vm._s(_vm.i18n.priceLabel))])]),_vm._v(" "),_c('h3',{staticClass:"tw-text-m tw-font-bmw-light"},[_c('div',{staticClass:"tw-flex tw-items-center"},[(_vm.isGroup(_vm.carPrice))?_c('span',{staticClass:"tw-mr-100"},[_vm._v(" "+_vm._s(_vm.i18n.from)+" ")]):_vm._e(),_vm._v(" "),_c('span',{attrs:{"dir":"ltr"}},[_vm._v(" "+_vm._s(_vm.priceFormat(_vm.carPrice))+" ")]),_vm._v(" "),(!_vm.isGroup(_vm.carPrice))?_c('div',{ref:"disclaimerIcon",staticClass:"tw-cursor-pointer disclaimer-icon tw-mx-200",on:{"click":function($event){return _vm.openDisclaimer()}}},[_c('InfoIconButton')],1):_vm._e()])])]:_vm._e(),_vm._v(" "),(_vm.selectedDealer)?_c('DealerLocatorIntro',{attrs:{"selected-dealer":_vm.selectedDealer,"current-car":_vm.currentCar,"i18n":_vm.i18n}}):_vm._e(),_vm._v(" "),_c('transition',{attrs:{"name":"fade"}},[(_vm.open)?_c('div',{ref:"detailsDisclaimer",staticClass:"details-card-disclaimer left-arrow tw-p-500 tw-bg-white",style:({
            left: _vm.tooltipStyles.left,
            top: _vm.tooltipStyles.top,
            right: _vm.tooltipStyles.right,
            width: _vm.tooltipStyles.width,
          })},[_c('div',{staticClass:"stockcar-details-disclaimer-container"},[_c('div',{staticClass:"tw-flex tw-mb-200"},[_c('p',{staticClass:"tw-text-grey-900 tw-text-m tw-w-3/5 tw-font-bmw-bold tw-mr-auto"},[_vm._v(" "+_vm._s(_vm.modelName)+" ")]),_vm._v(" "),_c('button',{staticClass:"close-button tw-absolute tw-mt-200 tw-mr-200 tw-pin-r tw-pin-t reset-button reset-button-hover tw-text-grey-900 icon-close-x",on:{"click":_vm.closeDisclaimer}})]),_vm._v(" "),_c('StockcarDisclaimer',{attrs:{"aem-config":_vm.aemConfig,"co-emission":_vm.coEmissionComputed,"currency-format":_vm.currencyFormat,"finance-data":_vm.financeData,"finance-disclaimer":true,"i18n":_vm.i18n}})],1)]):_vm._e()]),_vm._v(" "),_c('div',{staticClass:"tw-flex tw-justify-center tw-w-full md:tw-w-2/3 md:tw-justify-start"},[(_vm.aemConfig.ctaBuyNow)?_c('CtaButton',{staticClass:"tw-w-full tw-mb-0 tw-mt-400 tw-text-2xs md:tw-w-1/2 lg:tw-w-full",attrs:{"href":_vm.ctaBuyNowPath,"target":_vm.aemConfig.ctaBuyNowTarget},on:{"click":function($event){$event.preventDefault();return _vm.changeURL(_vm.ctaBuyNowPath, _vm.aemConfig.ctaBuyNowTarget, 'Buy Now')}}},[_vm._v(" "+_vm._s(_vm.i18n.buyNow)+" ")]):(_vm.aemConfig.ctaRFO)?_c('CtaButton',{staticClass:"tw-w-full tw-mb-0 tw-mt-200 tw-text-2xs md:tw-w-1/2 lg:tw-w-full",attrs:{"background-classes":_vm.aemConfig.ctaBuyNow
              ? 'tw-bg-grey-800 hover:tw-bg-grey-900'
              : 'tw-bg-primary-500 hover:tw-bg-primary-900',"href":_vm.ctaRfoPath,"target":_vm.aemConfig.ctaRFOTarget},on:{"click":function($event){$event.preventDefault();return _vm.changeURL(_vm.ctaRfoPath, _vm.aemConfig.ctaRFOTarget, 'RFO')}}},[_vm._v(" "+_vm._s(_vm.i18n.rfo)+" ")]):(_vm.aemConfig.ctaTDA)?_c('CtaButton',{staticClass:"tw-w-full tw-mb-0 tw-mt-200 tw-text-2xs md:tw-w-1/2 lg:tw-w-full",attrs:{"background-classes":_vm.aemConfig.ctaBuyNow || _vm.aemConfig.ctaRFO
              ? 'tw-bg-grey-800 hover:tw-bg-grey-900'
              : 'tw-bg-primary-500 hover:tw-bg-primary-900',"href":_vm.ctaTdaPath,"target":_vm.aemConfig.ctaTDATarget},on:{"click":function($event){$event.preventDefault();return _vm.changeURL(_vm.ctaTdaPath, _vm.aemConfig.ctaTDATarget, 'TDA')}}},[_vm._v(" "+_vm._s(_vm.i18n.tda)+" ")]):_vm._e()],1)],2)],1)},staticRenderFns: [],
    name: 'StockcarDetailsCarousel',
    components: {
      BaseImageCard,
      CosyImage,
      CarouselContainer,
      CarouselItem,
      StockcarDisclaimer,
      BaseIcon,
      FinanceLabel,
      InfoIconButton,
      CtaButton,
      ModelName,
      DealerLocatorIntro,
      ModelCardFlag,
    },
    directives: {
      'click-outside': {
        bind(el, binding, vnode) {
          let event = function (event) {
            if (!(el === event.target || el.contains(event.target))) {
              vnode.context[binding.expression](event);
            }
          };
          document.body.addEventListener('click', event);
        },
        unbind(el) {
          document.body.removeEventListener('click', event);
        },
      },
    },
    mixins: [
      stockcarListComponentMixin,
      stockcarTranslationComponent,
      TrackingMixin,
      stockcarDetecSizeMixin,
      PriceFormatMixin,
      ModelFlagMixin,
      preprodImagesMixin,
      preprodImagesPropsMixin,
    ],
    props: {
      coEmission: {
        type: [String, Number, Object],
        default: '',
      },
      isRtl: {
        type: Boolean,
        default: false,
      },
      modelName: {
        type: String,
        default: '',
      },
      priceDisclaimer: {
        type: String,
        default: '',
      },
      aemConfig: {
        type: Object,
        required: true,
      },
      carPrice: {
        type: [Number, Object],
        required: true,
        default: 100000,
      },
      financeData: {
        type: Object,
        default: () => ({}),
      },
      currentCar: {
        type: Object,
      },
      selectedDealer: {
        type: Object,
      },
      ctaBuyNowPath: {
        type: String,
        default: '',
      },
      ctaRfoPath: {
        type: String,
        default: '',
      },
      ctaTdaPath: {
        type: String,
        default: '',
      },
    },
    data() {
      return {
        shouldShowArrow: false,
        showPriceDisclaimer: false,
        tooltipStyles: {
          left: '0px',
          top: '0px',
          right: 'auto',
          width: '400px',
        },
        carouselTheme: {
          class: 'tw-text-2xl',
          disabledArrowOpacity: 0.3,
          leftArrowClass: '',
          rightArrowClass: '',
          leftArrowStyles: {
            top: '-34px',
            background: 'rgba(255, 255, 255, 0.6)',
          },
          rightArrowStyles: {
            top: '-34px',
            background: 'rgba(255, 255, 255, 0.6)',
          },
        },
        constantsConfig: cosyConfig.constantsConfig,
        sliderCosyConfig: cosyConfig.sliderCosyConfig,
        open: false,
        activeBreakpoint: EventBus$1.$data.activeBreakpoint,
        shouldShowComingSoonFlag: this.shouldDisplayComingSoonFlagVariant(),
        shouldShowFlag: this.shouldDisplayModelCardFlag(),
      };
    },
    computed: {
      direction() {
        if (this.isRtl) {
          return 'rtl';
        }
        return 'ltr';
      },
      coEmissionComputed() {
        if (isObject(this.coEmission)) {
          return this.coEmission.max;
        }
        return this.coEmission;
      },
      isMobile() {
        return this.device === 'mobile';
      },
      isTablet() {
        return this.device === 'tablet';
      },
      isDesktop() {
        return this.device === 'desktop';
      },
    },
    methods: {
      isGroup(price) {
        return isObject(price);
      },
      prepareSa(interior, exterior, options, packages = [], line = [], modvar = []) {
        let sa = [];
        return sa
          .concat(interior, exterior, options, packages, line, modvar)
          .filter((code) => code.startsWith('s') || code.startsWith('S'))
          .join();
      },
      getFabricCode(interior) {
        return interior.find(
          (code) => code.startsWith('f') || code.startsWith('F')
        );
      },
      closeDisclaimer() {
        this.open = false;
      },
      openDisclaimer() {
        if (!this.isMobile) {
          const containerWidth = window.innerWidth;
          const wrapperWidth = this.$refs.detailsCarousel.getBoundingClientRect()
            .width;
          const iconSize = this.$refs.disclaimerIcon.getBoundingClientRect();
          const iconTopPosition = this.$refs.disclaimerIcon.offsetTop;
          const iconLeftPosition = this.$refs.disclaimerIcon.offsetLeft;
          const iconRightPosition = wrapperWidth - iconLeftPosition;

          this.tooltipStyles.left = `${
          Math.round(iconLeftPosition) + iconSize.width + 30
        }px`;
          this.tooltipStyles.top = `${
          Math.round(iconTopPosition) + iconSize.height - 67
        }px`;

          this.open = true;

          this.$nextTick(() => {
            const disclaimerRightPosition = this.$refs.detailsDisclaimer.getBoundingClientRect()
              .right;
            if (disclaimerRightPosition > containerWidth) {
              this.tooltipStyles.left = 'auto';
              this.tooltipStyles.right = `${Math.round(iconRightPosition)}px`;
            }
          });
        } else {
          this.tooltipStyles = {
            top: 0,
            left: 0,
            right: 'auto',
            width: '100%',
          };

          this.open = true;
        }
      },
      changeSlide(dir) {
        this.trackAction('next_image', {
          dir,
        });
      },
      setCurrentState(state) {
        this.$emit('setCurrentState', state);
      },
      changeURL(url, target, type) {
        TrackingEventHandler.dispatchEvent(TRACKING_EVENT_RFX_CLICK, {
          type,
          url,
        });
        if (target === '_blank') {
          window.open(url, target);
        } else {
          window.location = url;
        }
      },
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var TwoColumnCard = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-flex-col md:tw-flex-row tw-flex"},[_c('div',{staticClass:"tw-w-full md:tw-w-1/2 lg:tw-w-1/3 tw-mb-500"},[_c('CosyImage',{attrs:{"alt":_vm.config.alt,"angle":_vm.config.angle,"pov":_vm.config.pov,"client":_vm.config.client,"background":_vm.config.background,"market":_vm.config.market,"tilt":_vm.config.tilt,"height":_vm.config.calcHeight,"brand":_vm.config.brand,"sa":_vm.config.sa,"vehicle":_vm.config.vehicle,"view":_vm.config.view,"width":_vm.config.calcWidth,"resp":_vm.config.resp,"x":_vm.config.x,"w":_vm.config.w,"h":_vm.config.h,"y":_vm.config.y,"paint":_vm.config.paint}})],1),_vm._v(" "),_c('div',{staticClass:"tw-w-full md:tw-w-1/2 lg:tw-w-2/3 tw-px-400"},[(_vm.config.description)?_c('p',{staticClass:"tw-full tw-text-s tw-mb-500 tw-font-bmw-light",domProps:{"innerHTML":_vm._s(_vm.config.description)}}):_vm._e(),_vm._v(" "),(_vm.config.includeLabel)?_c('p',{staticClass:"tw-text-s tw-mb-300 tw-font-bmw-light"},[_vm._v(" "+_vm._s(_vm.config.includeLabel)+" ")]):_vm._e(),_vm._v(" "),_c('p',{staticClass:"tw-mb-300 tw-font-bold"},[_vm._v(_vm._s(_vm.i18n.packagesIncludingText))]),_vm._v(" "),_c('ul',{staticClass:"tw-p-0 tw-font-bold"},_vm._l((_vm.config.includeList),function(item,index){return _c('li',{key:index,staticClass:"tw-list-reset tw-pt-100 tw-pb-100 tw-text-s tw-font-bmw-light"},[_vm._v(" + "+_vm._s(item)+" ")])}),0)])])},staticRenderFns: [],
    name: 'TwoColumnCard',
    components: { CosyImage },
    props: {
      config: {
        type: Object,
        required: true,
      },
      i18n: {
        type: Object,
        required: true,
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside TwoColumnCard component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var StockcarDetailsAccordionsContainer = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-w-full tw-border-grey-300 tw-border-b-100",class:{ 'tw-border-b-100': _vm.config.length > 1 }},_vm._l((_vm.config),function(config,key){return _c('Accordion',{key:key,attrs:{"title":config.title}},[_c('TwoColumnCard',{attrs:{"config":_vm.configAdapted(config),"i18n":_vm.i18n}})],1)}),1)},staticRenderFns: [],
    name: 'AccordionsContainer',
    components: { Accordion, TwoColumnCard },
    mixins: [stockcarListComponentMixin],
    props: {
      i18n: {
        type: Object,
        required: true,
      },
    },
    methods: {
      configAdapted(config) {
        let brand = config.card.brand === 'bmwi' ? 'WBBI' : 'WBBM';
        return {
          ...config.card,
          brand,
          view:'static_1560x880',
          client:'STATIC',
          pov:''
        }
      }
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();












  var StockcarDetailsSectionContainer = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-w-full tw-mb-700 lg:tw-mb-900 tw-inline-block"},[(_vm.title.length > 1)?_c('h2',{staticClass:"tw-mb-600 tw-font-bmw-light"},[_vm._v(" "+_vm._s(_vm.title)+". ")]):_vm._e(),_vm._v(" "),_vm._t("default")],2)},staticRenderFns: [],
    name: 'StockcarDetailsSectionContainer',
    props: {
      title: {
        type: String,
        default: '',
      },
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var StockcarDetailsEngine = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-w-full lg:tw-flex md:tw-block"},[_c('div',{staticClass:"md:tw-w-full tw-flex tw-flex-wrap"},[(_vm.aemConfig.engineInfo.power)?_c('div',{class:_vm.groupClasses},[_c('div',{class:_vm.labelClasses},[_vm._v(" "+_vm._s(_vm.i18n.enginePower)+" ")]),_vm._v(" "),_c('div',{class:_vm.textClasses},[_vm._v(" "+_vm._s(_vm.translateLabel('power', [ _vm.dataConfig.attributes.powerKw, _vm.dataConfig.attributes.powerPs, ]))+" "),(_vm.isPowerDisclaimerEnabled)?_c('InfoIconButton',{on:{"click":_vm.handleOpenCloseModal}}):_vm._e()],1)]):_vm._e(),_vm._v(" "),(_vm.aemConfig.engineInfo.acceleration)?_c('div',{class:_vm.groupClasses},[_c('div',{class:_vm.labelClasses},[_vm._v(" "+_vm._s(_vm.i18n.accelerationLabel)+" ")]),_vm._v(" "),_c('div',{class:_vm.textClasses},[_vm._v(" "+_vm._s(_vm.translateLabel( 'accelerationValue', _vm.dataConfig.attributes.acceleration ))+" ")])]):_vm._e(),_vm._v(" "),(
          _vm.aemConfig.engineInfo.capacity &&
          _vm.dataConfig.attributes.engineCapacity &&
          _vm.dataConfig.attributes.brand !== 'bmwi'
        )?_c('div',{class:_vm.groupClasses},[_c('div',{class:_vm.labelClasses},[_vm._v(" "+_vm._s(_vm.i18n.engineCapacityLabel)+" ")]),_vm._v(" "),_c('div',{class:_vm.textClasses},[_vm._v(" "+_vm._s(_vm.translateLabel( 'engineCapacityValue', _vm.dataConfig.attributes.engineCapacity ))+" ")])]):_vm._e(),_vm._v(" "),_vm._l((_vm.infoLayerComputed),function(item,key){return _c('div',{key:key,staticClass:"tw-text-xs",class:_vm.groupClasses},[_c('div',[_c('div',{class:_vm.labelClasses},[_vm._v(" "+_vm._s(_vm.i18n[item.label])+" ")]),_vm._v(" "),(item.key !== 'pollutionLevel' && item.key !== 'safetyLevel')?_c('div',{staticClass:"tw-inline",class:_vm.textClasses},[_vm._v(" "+_vm._s(_vm.translateLabel(item.valueTemplate, item.value))+" ")]):_c('EmissionCube',{staticClass:"tw-inline-block",attrs:{"value":item.value,"type":item.key}}),_vm._v(" "),_c('a',{staticClass:"tw-relative tw-z-10 tw-inline-block",attrs:{"href":_vm.disclaimer(item.disclaimer, true)}},[_c('sup',[_vm._v(_vm._s(_vm.disclaimer(item.disclaimer, false)))])])],1)])})],2),_vm._v(" "),(_vm.isDisclaimerLayerOpen)?_c('StockcarDisclaimerLayer',{attrs:{"name":_vm.dataConfig.attributes.model,"config":_vm.aemConfig,"vehicle":_vm.dataConfig.attributes,"disclaimer-reference":_vm.getDisclaimerReference(_vm.dataConfig)},on:{"close":_vm.handleOpenCloseModal}}):_vm._e()],1)},staticRenderFns: [],
    name: 'StockcarDetailsEngine',
    components: { EmissionCube, InfoIconButton, StockcarDisclaimerLayer },
    mixins: [stockcarConfiguredComponentMixin],
    props: {
      dataConfig: {
        type: Object,
        default: () => ({}),
      },
      aemConfig: {
        type: Object,
        default: () => ({}),
      },
      i18n: {
        type: Object,
        required: true,
      },
    },
    data() {
      return {
        groupClasses:
          'lg:tw-w-1/4 sm:tw-w-1/2 tw-w-full tw-mb-300 tw-pb-300 tw-border-b-100 sm:tw-border-b-0 tw-border-grey-300',
        labelClasses:
          'tw-text-s tw-text-grey-500 tw-font-bmw-bold tw-pb-100 lg:tw-pb-300',
        textClasses: 'tw-text-l tw-font-bmw-light',
        configInfoLayer,
        vehicleInfoLayer,
        aemInfoLayer: {
          co2DefaultDisplayType: this.aemConfig.co2DefaultDisplayType,
          fuelConsumptionDefaultDisplayType: this.aemConfig
            .fuelConsumptionDefaultDisplayType,
          rangeDefaultDisplayType: this.aemConfig.rangeDefaultDisplayType,
        },
        aemDisclaimerConfig: {
          nefzDisclaimerEnable: this.aemConfig.nefzDisclaimerEnable,
          nefzCorrelatedDisclaimerEnable: this.aemConfig
            .nefzCorrelatedDisclaimerEnable,
          wltpDisclaimerEnable: this.aemConfig.wltpDisclaimerEnable,
          emissionIconDisclaimerEnable: this.aemConfig
            .emissionIconDisclaimerEnable,
        },
        infoLayer: [],
        isDisclaimerLayerOpen: false,
      };
    },
    computed: {
      infoLayerComputed() {
        const data = [
          ...this.infoLayer,
          {
            label: 'transmissionLabel',
            key: 'transmission',
            value:
              this.dataConfig.attributes.transmission === 'AUT'
                ? this.i18n.transmissionAut
                : this.i18n.transmissionMan,
          },
          {
            label: 'driveType',
            key: 'driveType',
            value: this.dataConfig.attributes.driveType,
          },
        ];
        const order = [
          {
            key: 'emission',
            label: 'emissionLabel',
            valueTemplate: 'emissionValue',
            show: this.aemConfig.engineInfo.co2,
          },
          {
            key: 'electricRange',
            label: 'electricRangeLabel',
            valueTemplate: 'electricRangeValue',
            show: this.aemConfig.engineInfo.electricRange,
          },
          {
            key: 'meanCustomerElRange',
            label: 'meanCustomerElRangeLabel',
            valueTemplate: 'meanCustomerElRangeValue',
            show: this.aemConfig.engineInfo.electricRangeMean,
          },
          {
            key: 'meanCustomerRange',
            label: 'meanCustomerRangeLabel',
            valueTemplate: 'meanCustomerRangeValue',
            show: this.aemConfig.engineInfo.electricRangeTotal,
          },
          {
            key: 'driveType',
            label: 'driveType',
            show: this.aemConfig.engineInfo.driveTrain,
            valueTemplate: '',
          },
          {
            key: 'transmission',
            label: 'transmissionLabel',
            show: this.aemConfig.engineInfo.transmission,
            valueTemplate: '',
          },
          {
            key: 'electricityConsumption',
            label: 'electricConsumptionLabel',
            valueTemplate: 'electricConsumptionValue',
            show: this.aemConfig.engineInfo.energyConsumption,
          },
          {
            key: 'consumption',
            label: 'consumptionLabel',
            valueTemplate: 'consumptionValue',
            show: this.aemConfig.engineInfo.fuelConsumption,
          },
          {
            key: 'pollutionLevel',
            label: 'pollutionLevel',
            valueTemplate: 'pollutionLevel',
            show: this.aemConfig.engineInfo.pollutionLevel,
          },
          {
            key: 'safetyLevel',
            label: 'safetyLevel',
            valueTemplate: 'safetyLevel',
            show: this.aemConfig.engineInfo.safetyLevel,
          },
        ];
        return order
          .map(({ key, label, show, valueTemplate }) => {
            return {
              ...data.find((infoLayerData) => infoLayerData.key === key),
              label,
              show,
              valueTemplate,
            };
          })
          .filter((a) => a.value || a.value === 0)
          .filter((a) => a.show === true);
      },
      disclaimerNumbers() {
        return [
          this.aemDisclaimerConfig.nefzDisclaimerEnable,
          this.aemDisclaimerConfig.nefzCorrelatedDisclaimerEnable,
          this.aemDisclaimerConfig.wltpDisclaimerEnable,
          this.aemDisclaimerConfig.emissionIconDisclaimerEnable,
        ]
          .map((isEnabled) => (isEnabled ? 1 : 0))
          .reduce(
            (acc, value, idx) => {
              const previous = acc[`disc${idx}`] || 0;
              acc[`disc${idx + 1}`] = previous + value;
              return acc;
            },
            {
              disc1: 0,
              disc2: 0,
              disc3: 0,
              disc4: 0,
              disc5: 0,
            }
          );
      },
      isPowerDisclaimerEnabled() {
        return (
          (this.dataConfig.attributes.vehicleType === 'PHEV' &&
            this.aemConfig.engineInfo.phevDisclaimer) ||
          (this.dataConfig.attributes.vehicleType === 'MHEV' &&
            this.aemConfig.engineInfo.mhevDisclaimer)
        );
      },
    },
    mounted() {
      this.dataConfig.attributes.type = this.dataConfig.attributes.vehicleType;
      this.infoLayer = vehicleInfoLayer(
        this.dataConfig.attributes,
        this.configInfoLayer,
        this.aemInfoLayer
      );
    },
    methods: {
      disclaimer(disclaimer, link) {
        if (
          disclaimer === 'nefz' &&
          this.aemDisclaimerConfig.nefzDisclaimerEnable
        ) {
          if (link) {
            return '#nefzDisclaimer';
          }
          return `[${this.disclaimerNumbers.disc1}]`;
        }

        if (
          disclaimer === 'nefzCorelated' &&
          this.aemDisclaimerConfig.nefzCorrelatedDisclaimerEnable
        ) {
          if (link) {
            return '#nefzCorrelatedDisclaimer';
          }
          return `[${this.disclaimerNumbers.disc2}]`;
        }

        if (
          disclaimer === 'wltp' &&
          this.aemDisclaimerConfig.wltpDisclaimerEnable
        ) {
          if (link) {
            return '#wltpDisclaimer';
          }
          return `[${this.disclaimerNumbers.disc3}]`;
        }

        if (
          disclaimer === 'emissionIcon' &&
          this.aemDisclaimerConfig.emissionIconDisclaimerEnable
        ) {
          if (link) {
            return '#emissionIconDisclaimer';
          }
          return `[${this.disclaimerNumbers.disc4}]`;
        }

        return '';
      },
      toFixed(label, value) {
        const parsedValue = +value;
        if (
          (parsedValue || parsedValue === 0) &&
          parsedValue.toFixed &&
          label !== 'power' &&
          label !== 'electricRange' &&
          label !== 'meanCustomerElRange' &&
          label !== 'electricRangeValue' &&
          label !== 'electricRangeValue' &&
          label !== 'meanCustomerElRangeValue' &&
          label !== 'engineCapacityValue' &&
          label !== 'meanCustomerRangeValue' &&
          label !== 'meanCustomerRange'
        ) {
          return parsedValue.toFixed(1);
        }
        return parsedValue;
      },
      translateLabel(label, value) {
        let translation = this.i18n[label];
        if (
          !translation ||
          label === 'transmissionLabel' ||
          label === 'driveType' ||
          label === 'pollutionLevel' ||
          label === 'safetyLevel'
        ) {
          return value;
        }
        if (Array.isArray(value)) {
          value.forEach((currVal, index) => {
            translation = translation.replace(
              `{${index}}`,
              this.toFixed(label, currVal)
            );
          });
          return translation;
        }
        if (translation.indexOf('{0}') >= 0) {
          return translation.replace(/\{0\}/g, this.toFixed(label, value));
        }

        return `${translation} - ${this.toFixed(label, value)}`;
      },
      isOptionSelected(option) {
        let mappedConfig = Object.keys(this.aemConfig.engineInfo).reduce(
          (acc, key) => {
            let newKey = key;
            if (
              key === 'fuel' ||
              key === 'fuelCons' ||
              key === 'fuelConsumption'
            ) {
              newKey = 'consumption';
            }
            if (key === 'electricRangeMean') {
              newKey = 'meanCustomerElRange';
            }
            if (key === 'totalRange' || key === 'electricRangeTotal') {
              newKey = 'meanCustomerRange';
            }
            if (key === 'co2') {
              newKey = 'emission';
            }
            if (key === 'electricConsumption') {
              newKey = 'electricityConsumption';
            }
            acc[newKey] = this.aemConfig.engineInfo[key];
            return acc;
          },
          {}
        );
        mappedConfig.transmission = true;
        mappedConfig.driveType = true;
        return mappedConfig[option];
      },
      getDisclaimerReference(vehicle) {
        switch (vehicle.attributes.vehicleType) {
          case 'PHEV':
            return this.aemConfig.engineInfo.phevDisclaimer;
            break;
          case 'MHEV':
            return this.aemConfig.engineInfo.mhevDisclaimer;
            break;
          default:
            return;
        }
      },
      handleOpenCloseModal() {
        return (this.isDisclaimerLayerOpen = !this.isDisclaimerLayerOpen);
      },
    },
  };

  const prepareList = (list, callback) => {
    const collection = [];
    if (Array.isArray(list)) {
      for (let i = 0; i < list.length; i++) {
        collection.push(callback(list[i]));
      }
    }

    return collection;
  };

  const prepareEquipment = (object, list) => {
    return prepareList(list, element => {
      return {
        title: element.shortText,
        config: {
          category: element.subCategory && element.subCategory.toLowerCase(),
          code: element.code,
          brand: object.brand,
        },
      };
    });
  };

  const preparePackages = (object, list) => {
    return prepareList(list, element => ({
      title: element.shortText,
      card: {
        description: element.longText || '',
        includeList: prepareComponents(object, element.components),
        brand: object.brand,
        vehicle: object.modelValue,
        sa: element.code,
      },
    }));
  };

  const prepareOptions = (object, list) => {
    return prepareList(list, element => ({
      title: element.shortText,
      config: {
        brand: object.brand,
        vehicle: object.modelValue,
        sa: element.code,
        desc: element.longText,
      },
    }));
  };

  const prepareLines = (object, list) => {
    return prepareList(list, element => ({
      title: element.shortText,
      card: {
        description: element.longText || '',
        includeList: prepareComponents(object, element.components),
        brand: object.brand,
        sa: element.code,
        vehicle: object.modelValue,
      },
    }));
  };

  const prepareModvar = (object, list) => {
    return prepareList(list, element => ({
      title: element.shortText,
      card: {
        description: element.longText || '',
        includeList: prepareComponents(object, element.components),
        brand: object.brand,
        sa: element.code,
        vehicle: object.modelValue,
      },
    }));
  };

  const preparePriceInformation = (object, vehicleIndex) => {
    if (object.attributes.vehicles.length > 1 && vehicleIndex !== null) {
      return object.attributes.vehicles[vehicleIndex].priceInformation;
    }
    if (object.attributes.vehicles.length > 1 && vehicleIndex === null) {
      return object.attributes.priceInformation;
    }
    return object.attributes.vehicles[0].priceInformation;
  };

  const prepareVehicleCarousel = (
    list,
    vehicle,
    colorCode,
    interior,
    exterior,
    options,
    packages,
    modvar,
    lines,
    unassignable,
    brandCode
  ) => {
    const getCodes = list => list.map(({ code }) => code);
    return prepareList(list, element => ({
      dealer: Object.assign({}, element.dealer),
      price: element.priceInformation.priceWithoutTax,
      vehicle,
      paint: colorCode,
      interior: getCodes(interior),
      exterior: getCodes(exterior),
      options: getCodes(options),
      packages: getCodes(packages),
      modvar: getCodes(modvar),
      lines: getCodes(lines),
      unassignable: getCodes(unassignable),
      brand: brandCode,
    }));
  };

  const prepareComponents = (object, components) => {
    const array = [
      ...object.interior,
      ...object.exterior,
      ...object.unassignable,
      ...object.options,
    ];

    return Array.isArray(components)
      ? array
        .map(component => {
          if (
            components.findIndex(element => component.code.toLowerCase() === element.toLowerCase()) !== -1
          ) {
            return component.shortText || '';
          }
          return '';
        })
        .filter(component => component.length > 0)
      : [];
  };

  var detailModelParser = (object, aemConfig, i18n, vehicleIndex) => {
    return {
      carsCarouselItems: prepareVehicleCarousel(
        object.attributes.vehicles,
        object.attributes.modelValue,
        object.attributes.colorCode,
        object.attributes.interior,
        object.attributes.exterior,
        object.attributes.options,
        object.attributes.packages,
        object.attributes.modvar,
        object.attributes.lines,
        object.attributes.unassignable,
        object.attributes.brand
      ),
      preprodImages: object.attributes.preprodImages || [],
      promotionalSettings: object.attributes.promotionalSettings || {},
      isPromotional: object.attributes.isPromotional || false,
      carReferenceNumber: object.attributes.groupReference.toString(),
      modelName: `${object.attributes.model || ''}`,
      description: `${object.attributes.power} kW,`,
      exterior: prepareEquipment(object.attributes, object.attributes.exterior),
      interior: prepareEquipment(object.attributes, object.attributes.interior),
      engine: getEngineData(
        object.attributes,
        aemConfig.engineInfo,
        i18n,
        vehicleIndex
      ),
      line: prepareLines(object.attributes, object.attributes.lines),
      language: aemConfig.languagePageName,
      market: aemConfig.domainPageName,
      packages: preparePackages(object.attributes, object.attributes.packages),
      options: prepareOptions(object.attributes, object.attributes.options),
      modvar: prepareModvar(object.attributes, object.attributes.modvar),
      wltp: object.attributes.wltp,
      nedc: object.attributes.nedcCorrelated,
      isPreproduction: isPreproductionVehicle(object),
      hasDiscountedPrice: hasDiscountedPrice(
        setDiscountPricesInPriceInformation(
          object.attributes.priceInformation,
          object
        ),
        aemConfig
      ),
      priceInformation: setDiscountPricesInPriceInformation(
        preparePriceInformation(object, vehicleIndex),
        object
      ),
    };
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".service-packages[data-v-2d180792]{display:grid;grid-template-columns:1fr 1fr 1fr;-webkit-column-gap:32px;column-gap:32px}.radio-button__input[data-v-2d180792]{height:20px;width:20px;cursor:pointer;position:relative}.radio-button__input[data-v-2d180792]:before{content:\"\";position:absolute;width:20px;height:20px;border:2px solid #bbb;-webkit-transition:all .2s ease;transition:all .2s ease;border-radius:100%;background-color:#fff}.radio-button__input[data-v-2d180792]:after{content:\"\";width:20px;height:20px;background-color:#fff;position:absolute;border-radius:100%;-webkit-transition:all .2s ease;transition:all .2s ease;opacity:0;-webkit-transform:scale(1);transform:scale(1)}.radio-button__input[disabled][data-v-2d180792]{opacity:.3}.radio-button__input[disabled]+span[data-v-2d180792]{opacity:.3}.radio-button__input[data-v-2d180792]:checked:before{background-color:#4d4d4d;border:2px solid #4d4d4d}.radio-button__input[data-v-2d180792]:checked:after{opacity:1;-webkit-transform:scale(.35);transform:scale(.35)}@media (max-width:1024px){.service-packages[data-v-2d180792]{display:grid;grid-template-columns:1fr 1fr;-webkit-column-gap:32px;column-gap:32px}}@media (max-width:600px){.service-packages[data-v-2d180792]{display:grid;grid-template-columns:1fr}.radio-button__input[data-v-2d180792]{height:20px;width:20px}.radio-button__input[data-v-2d180792]:before{left:-2px;top:-2px;width:24px;height:24px}.radio-button__input[data-v-2d180792]:after{left:-2px;top:-2px;width:24px;height:24px}}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();





























  var StockcarDetailsBsiServicePackages = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-mb-400"},[_c('p',{staticClass:"tw-text-2xs tw-text-grey-600 tw-font-bmw-bold tw-mb-400 tw-uppercase"},[_vm._v(" "+_vm._s(_vm.i18n.bsiServicePackage)+" ")]),_vm._v(" "),_c('div',{staticClass:"service-packages"},_vm._l((_vm.servicePackages),function(packages,index){return _c('label',{staticClass:"tw-mb-200"},[_c('input',{staticClass:"radio-button__input tw-mr-200 tw-align-middle",attrs:{"type":"radio","name":"servicesPackage","id":packages.id},domProps:{"value":packages.name,"checked":index === 0},on:{"change":function($event){return _vm.changePackage(packages.id)}}}),_vm._v(" "),_c('span',{staticClass:"tw-text-m tw-font-bmw-light tw-align-middle"},[_vm._v(_vm._s(packages.name))])])}),0)])},staticRenderFns: [],_scopeId: 'data-v-2d180792',
    name: 'StockcarDetailsBsiServicePackages',
    props: {
      servicePackages: {
        type: Array,
        required: true,
      },
      i18n: {
        type: Object,
      },
    },
    methods: {
      changePackage(value) {
        this.$emit('update', value);
      },
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".tooltip[data-v-493e2794]{position:relative;display:inline-block}.tooltipText[data-v-493e2794]{padding:20px;visibility:hidden;background-color:#fff;text-align:left;border-radius:6px;position:absolute;bottom:30px;right:0;z-index:1}@media (max-width:1024px){.tooltipText[data-v-493e2794]{width:250px}.validity-description-container[data-v-493e2794]{-webkit-box-pack:left;-ms-flex-pack:left;justify-content:left}}@media (min-width:1760px){.tooltipText[data-v-493e2794]{width:400px}}@media (min-width:1024px){.tooltipText[data-v-493e2794]{width:345px;width:400px}}.tooltipText[data-v-493e2794]:after{content:\"\";position:absolute;top:100%;right:0;margin-left:-5px;border:5px solid transparent;border-top-color:#fff}.tooltip:hover .tooltipText[data-v-493e2794]{visibility:visible}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var StockcarDetailsBsiValidityAndPeriod = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"lg:tw-w-1/3 md:tw-w-1/2 sm:tw-w-full tw-mb-600"},[_c('div',{staticClass:"tw-flex tw-justify-between validity-description-container"},[_c('p',{staticClass:"tw-text-2xs tw-text-grey-600 tw-font-bmw-bold tw-uppercase tw-pr-100"},[_vm._v(" "+_vm._s(_vm.i18n.bsiValidity)+"* ")]),_vm._v(" "),_c('div',{staticClass:"tooltip"},[_c('InfoIconButton',{attrs:{"width":"16","height":"16"}}),_vm._v(" "),_c('span',{staticClass:"tooltipText tw-shadow"},[_vm._v(" "+_vm._s(_vm.aemConfig.bsiInfoI))])],1)]),_vm._v(" "),_c('BaseSelect',{attrs:{"items":_vm.list,"direct-value-to-title":_vm.selectedValue,"events":['click']},on:{"select":_vm.setSortingField}})],1)},staticRenderFns: [],_scopeId: 'data-v-493e2794',
    name: 'StockcarDetailsBsiValidityAndPeriod',
    components: {
      BaseDropdown,
      BaseSelect,
      InfoIconButton,
    },
    props: {
      list: {
        type: Array,
        required: true,
      },
      selectedValue: {
        type: String,
        required: true,
        default: '',
      },
      i18n: {
        type: Object,
      },
      aemConfig: {
        type: Object,
      },
    },
    methods: {
      setSortingField(field) {
        this.changeValidityAndPeriod(this.list[field]);
      },
      changeValidityAndPeriod(value) {
        this.$emit('update', value);
      },
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head$$1=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css="@media (min-width:1024px){.bsi-results[data-v-b2f72a34]{display:grid;grid-template-columns:1fr 1fr 1fr;-webkit-column-gap:32px;column-gap:32px}}.service-list[data-v-b2f72a34]{list-style-position:outside}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head$$1.appendChild(style); } })();

  var StockCarDetailsBsiResults = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-w-full tw-mb-600 bsi-results"},[(!_vm.isDesktop)?_c('div',{staticClass:"tw-border-grey-300 tw-border-b-100 tw-mb-600"},[_c('p',{staticClass:"tw-text-xs tw-text-grey-600"},[_vm._v(_vm._s(_vm.i18n.bsiScope))]),_vm._v(" "),_vm._l((_vm.services),function(service,index){return _c('Accordion',{key:index,attrs:{"title":service.name}},[(service.highlights.length > 0)?_c('div',[_c('ul',{staticClass:"tw-ml-400"},_vm._l((service.highlights),function(highlight){return _c('li',{staticClass:"service-list tw-mb-200 tw-pl-300"},[_vm._v(" "+_vm._s(highlight)+" ")])}),0)]):_vm._e()])})],2):_vm._e(),_vm._v(" "),_c('div',[_c('div',{staticClass:"tw-w-full tw-mb-400"},[_c('TextBlock',{staticClass:"tw-mb-100 tw-text-grey-600",attrs:{"typo":"body-2"}},[_vm._v(_vm._s(_vm.i18n.bsiModel))]),_vm._v(" "),_c('TextBlock',{staticClass:"tw-uppercase",attrs:{"typo":"body-1"}},[_vm._v(_vm._s(_vm.modelName))]),_vm._v(" "),_c('TextBlock',{staticClass:"tw-uppercase",attrs:{"typo":"body-1"}},[_vm._v(_vm._s(_vm.priceFormat(_vm.carPrice)))])],1),_vm._v(" "),_c('div',{staticClass:"tw-w-full tw-mb-400"},[_c('TextBlock',{staticClass:"tw-mb-100 tw-text-grey-600",attrs:{"typo":"body-2"}},[_vm._v(_vm._s(_vm.i18n.bsiPackagePrice))]),_vm._v(" "),_c('TextBlock',{staticClass:"tw-uppercase",attrs:{"typo":"body-1"}},[_vm._v(_vm._s(_vm.priceFormat(_vm.priceLocal)))])],1),_vm._v(" "),_c('div',{staticClass:"tw-w-full tw-mb-400"},[_c('TextBlock',{staticClass:"tw-mb-100 tw-text-grey-600",attrs:{"typo":"body-2"}},[_vm._v(_vm._s(_vm.i18n.bsiTotalPrice))]),_vm._v(" "),_c('TextBlock',{staticClass:"tw-uppercase",attrs:{"typo":"headline-4"}},[_vm._v(_vm._s(_vm.formattedTotalPrice))])],1),_vm._v(" "),_c('CtaButton',{staticClass:"tw-w-2/3 tw-mb-0 tw-mt-200 tw-text-2xs",attrs:{"href":_vm.ctaRfoPath,"target":_vm.aemConfig.ctaRFOTarget},on:{"click":function($event){$event.preventDefault();return _vm.changeURL(_vm.ctaRfoPath, _vm.aemConfig.ctaRFOTarget)}}},[_vm._v(_vm._s(_vm.i18n.rfo))])],1),_vm._v(" "),_vm._l((_vm.services),function(service,index){return (_vm.services.length > 0 && _vm.isDesktop)?_c('div',[(index === 0)?_c('TextBlock',{staticClass:"tw-mb-100 tw-text-grey-600",attrs:{"typo":"body-2"}},[_vm._v(" "+_vm._s(_vm.i18n.bsiScope)+" ")]):_c('br'),_vm._v(" "),_c('TextBlock',{staticClass:"tw-mb-100",attrs:{"typo":"body-1"}},[_vm._v(" "+_vm._s(service.name)+" ")]),_vm._v(" "),_c('ul',{staticClass:"tw-ml-400"},_vm._l((service.highlights),function(highlight){return _c('li',{staticClass:"service-list"},[_vm._v(" "+_vm._s(highlight)+" ")])}),0)],1):_vm._e()})],2)},staticRenderFns: [],_scopeId: 'data-v-b2f72a34',
    name: 'StockCarDetailsBsiResults',
    components: { TextBlock, CtaButton, Accordion },
    mixins: [stockcarDetecSizeMixin],
    props: {
      modelName: {
        type: String,
        required: true,
      },
      carPrice: {
        type: [Number, Object],
        required: true,
        default: 100000,
      },
      priceLocal: {
        type: Number,
        required: true,
      },
      priceEuro: {
        type: Number,
        required: true,
      },
      services: {
        type: Array,
        required: true,
      },
      i18n: {
        type: Object,
      },
      aemConfig: {
        type: Object,
      },
      validity: {
        type: String,
        required: true,
      },
      package: {
        type: String,
        required: true,
      },
      ctaRfoPath: {
        type: String,
        default: '',
      },
    },
    computed: {
      totalPrice() {
        // round price to 2 decimal places. Otherwise we might have cases where the price ends up something like 79025.95999999999
        return Math.round((this.carPrice + this.priceLocal + Number.EPSILON) * 100) / 100;
      },
      formattedTotalPrice() {
        return this.priceFormat(this.totalPrice);
      },
      isDesktop() {
        return this.device === 'desktop';
      },
    },
    methods: {
      correctPlaceholders(linkParameters) {
        return linkParameters != null
          ? linkParameters
              .replace(`$\{validityPeriod}`, this.validity)
              .replace(`$\{packageName}`, this.package)
              .replace(`$\{priceInEur}`, this.priceEuro)
              .replace(`$\{priceInLocal}`, this.priceLocal)
          : '';
      },
      changeURL(url, target) {
        if (target === '_blank') {
          window.open(url, target);
        } else {
          window.location = url;
        }
      },
      priceFormat(price) {
        let carPrice = 0;
        if (isObject(price)) {
          carPrice = price.min;
        } else {
          carPrice = price;
        }

        let numberPattern = '###,###';
        let numberWithSeparator = carPrice
          .toString()
          .replace(
            /\B(?=(\d{3})+(?!\d))/g,
            this.aemConfig.currencyConfiguration.separator
          );
        let numberWithCurrency = this.aemConfig.currencyConfiguration.format.replace(
          numberPattern,
          numberWithSeparator
        );
        return numberWithCurrency;
      },
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css="@media (max-width:600px){.bsi-component[data-v-c11aab80]{padding-left:15px;padding-right:15px}}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var StockcarDetailsBsi = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.servicePriceInLocal)?_c('div',{staticClass:"bsi-component"},[_c('h3',{staticClass:"tw-text-l tw-font-bmw-light tw-mb-500 tw-uppercase"},[_vm._v(" "+_vm._s(_vm.aemConfig.bsiHeadline)+" ")]),_vm._v(" "),_c('p',{staticClass:"tw-text-s tw-mb-600"},[_vm._v(" "+_vm._s(_vm.aemConfig.bsiSubHeadline)+" ")]),_vm._v(" "),_c('StockcarDetailsBsiServicePackages',{attrs:{"service-packages":_vm.servicePackages,"i18n":_vm.i18n},on:{"update":_vm.updateServicePackage}}),_vm._v(" "),_c('StockcarDetailsBsiValidityAndPeriod',{attrs:{"list":_vm.validityPeriodList,"selected-value":_vm.selectedValidityPeriod,"aem-config":_vm.aemConfig,"i18n":_vm.i18n},on:{"update":_vm.updateValidityPeriod}}),_vm._v(" "),_c('StockCarDetailsBsiResults',{attrs:{"model-name":_vm.modelName,"car-price":_vm.carPrice,"price-euro":_vm.servicePriceInEur,"price-local":_vm.servicePriceInLocal,"services":_vm.selectedPackageScopes,"i18n":_vm.i18n,"aem-config":_vm.aemConfig,"validity":_vm.selectedValidityPeriod,"cta-rfo-path":_vm.ctaRfoPath,"package":_vm.selectedPackageName}}),_vm._v(" "),_c('p',{staticClass:"tw-text-2xs tw-text-grey-600 tw-mb-900"},[_vm._v(" "+_vm._s(_vm.aemConfig.bsiFootnote)+" ")])],1):_vm._e()},staticRenderFns: [],_scopeId: 'data-v-c11aab80',
    name: 'StockcarDetailsBsi',
    components: {
      StockCarDetailsBsiResults,
      StockcarDetailsBsiServicePackages,
      StockcarDetailsBsiValidityAndPeriod,
    },
    props: {
      bsiData: {
        type: Object,
        required: true,
      },
      modelName: {
        type: String,
        required: true,
      },
      seriesId: {
        type: String,
        required: true,
      },
      carPrice: {
        type: [Number, Object],
        required: true,
        default: 100000,
      },
      i18n: {
        type: Object,
      },
      aemConfig: {
        type: Object,
      },
      ctaRfoPath: {
        type: String,
        default: '',
      },
    },
    data() {
      return {
        selectedPackageId: '',
        selectedValidityPeriod: '',
      };
    },
    computed: {
      series() {
        const seriesList = get(this.bsiData, 'data.attributes.series', []);
        const series = seriesList.find(
          (series) => series.seriesId === this.seriesId
        );

        return series || {};
      },
      seriesPackages() {
        const packages = this.series.packages || [];
        return packages.filter((entry) => {
          return (
            !Number.isNaN(Number(entry.priceInEur)) &&
            !Number.isNaN(Number(entry.priceInLocal))
          );
        });
      },
      servicePackagesIds() {
        const id = [];
        this.seriesPackages.forEach((entry) => {
          return id.push(entry.packageId);
        });
        return [...new Set(id)];
      },
      servicePackages() {
        const packages = get(this.bsiData, 'data.attributes.packages', []);

        return packages.filter((el) =>
          this.servicePackagesIds.find((entry) => el.id === entry)
        );
      },
      validityPeriodList() {
        return this.seriesPackages
          .filter((el) => el.packageId === this.selectedPackageId)
          .map((el) => el.validityPeriod);
      },
      selectedPackageScopes() {
        return this.servicePackages.find(
          (option) => option.id === this.selectedPackageId
        ).scopes;
      },
      selectedPackage() {
        if (!this.selectedPackageId || !this.selectedValidityPeriod) {
          return;
        }

        return this.seriesPackages.find(
          (el) =>
            el.packageId === this.selectedPackageId &&
            el.validityPeriod === this.selectedValidityPeriod
        );
      },
      selectedPackageName() {
        if (!this.selectedPackage) {
          return '';
        }
        return this.selectedPackage.packageName;
      },
      servicePriceInEur() {
        if (!this.selectedPackage) {
          return NaN;
        }
        return Number(this.selectedPackage.priceInEur);
      },
      servicePriceInLocal() {
        if (!this.selectedPackage) {
          return NaN;
        }
        return Number(this.selectedPackage.priceInLocal);
      },
    },
    mounted() {
      this.selectedPackageId =
        this.seriesPackages[0] && this.seriesPackages[0].packageId;
      this.selectedValidityPeriod = this.validityPeriodList[0];
      this.fireBSIPropertiesChangedEvent();
    },
    methods: {
      fireBSIPropertiesChangedEvent(){
        this.$emit('bsi-properties-changed', {
          validity: this.selectedValidityPeriod,
          packageName: this.selectedPackageName,
          priceEuro: this.servicePriceInEur,
          priceLocal: this.servicePriceInLocal,
        });
      },
      updateServicePackage(option) {
        this.selectedPackageId = option;

        if (
          !this.validityPeriodList.find(
            (el) => el === this.selectedValidityPeriod
          )
        ) {
          this.selectedValidityPeriod = this.validityPeriodList[0];
        }

        this.fireBSIPropertiesChangedEvent();
      },
      updateValidityPeriod(option) {
        this.selectedValidityPeriod = option;
        this.fireBSIPropertiesChangedEvent();
      },
    },
  };

  // eslint-disable-next-line no-template-curly-in-string
  const PLACEHOLDER_REGEX = new RegExp('\\${([\\w.[\\]"]+)}', 'g');

  function replaceUrlPlaceholders(format, context) {
    return format.replace(PLACEHOLDER_REGEX, (match, path) => {
      return get(context, path, '');
    });
  }


  const replacePlaceholders = (url, placeholders, car, carId, cosyImage) => {
    if (!placeholders) {
      return url;
    }
    const item = car.carsCarouselItems[0];

    const context = {
      dealerID: get(car, `dealerLocator[${carId}].dealerCode`, ''),
      stockID: car.carReferenceNumber || '',
      modelCode: item.vehicle || '',
      language: car.language || '',
      market: car.market || '',
      options: [
        ...item.exterior,
        ...item.interior,
        ...item.packages,
        ...item.options,
        ...item.unassignable,
      ],
      cosyUrl: encodeURIComponent(cosyImage),
    };

    const qs = replaceUrlPlaceholders(placeholders, context);

    return `${url}${qs}`;
  };

  const replaceBSIPlaceholders = (url, placeholdersRaw, data) => {
    if (data === null || !url) {
      return url;
    }

    // was written in the config before with a leading '?'
    // to be compatible we remove it here because we do not need it.
    const placeholders = placeholdersRaw.substring(0, 1) === '?' ? placeholdersRaw.substring(1) : placeholdersRaw;

    if (!placeholders) {
      return url;
    }

    const delimiter = url.indexOf('?') !== -1 ? '&' : '?';
    const { validity, packageName, priceEuro, priceLocal } = data;
    const context = {
      validityPeriod: validity || '',
      packageName: packageName || '',
      priceInEur: priceEuro || '',
      priceInLocal: priceLocal || '',
    };

    const qs = replaceUrlPlaceholders(placeholders, context);
    return `${url}${delimiter}${qs}`;
  };

  const getPathParams = (config, type) => {
    let res = { path: '', params: '' };

    const pathName = `${type}Path`;
    const placeholders = `${type}Parameters`;

    if (config[pathName]) {
      res.path = config[pathName];
    }

    if (config[placeholders]) {
      res.placeholders = config[placeholders];
    }

    return res;
  };

  var getCTAPath = (
    type,
    config,
    car,
    carId,
    cosyImage,
    bsiData
  ) => {
    const { path, placeholders } = getPathParams(config, type);

    let url = path;
    url = replacePlaceholders(url, placeholders, car, carId, cosyImage);
    url = replaceBSIPlaceholders(url, config.bsiCtaRFOParameters || '', bsiData);
    return url;
  };

  (function(){ if(typeof document !== 'undefined'){ var head$$1=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head$$1.appendChild(style); } })();

  var StockcarDetailsContent = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('StockcarFetchJson',{attrs:{"parameters":{ id: _vm.carId },"api-config":_vm.aemConfig.apiConfiguration,"transforming-function":_vm.getConfig,"market":_vm.aemConfig.domainPageName,"locale":_vm.aemConfig.languagePageName,"url-type":"details"},on:{"onResponse":_vm.onResponse},scopedSlots:_vm._u([{key:"default",fn:function({ fetchedJson }){return (_vm.registerData(fetchedJson))?_c('div',{},[_c('div',{staticClass:"tw-w-full tw-mb-700"},[(_vm.currentCar.carsCarouselItems)?_c('StockcarDetailsCarousel',{attrs:{"i18n":_vm.i18n,"aem-config":_vm.aemConfig,"config":_vm.currentCar.carsCarouselItems,"co-emission":(_vm.currentCar.engine.co2Emission &&
                _vm.currentCar.engine.co2Emission.value) ||
              _vm.dataConfig.attributes.nedc.co2Comb,"is-rtl":_vm.aemConfig.RTLTextDirection,"car-price":_vm.currentCar.hasDiscountedPrice
                ? _vm.getVehicleDicountedPrice(_vm.currentCar)
                : _vm.getVehiclePrice(_vm.currentCar),"model-name":_vm.currentCar.modelName,"preprodImages":_vm.detailedPreprodImage(_vm.currentCar),"car-reference-number":_vm.currentCar.carReferenceNumber,"currency-format":_vm.aemConfig.currencyConfiguration,"finance-data":_vm.getPriceInformation(_vm.currentCar),"currentCar":_vm.currentCar,"selectedDealer":_vm.selectedDealer,"cta-buy-now-path":_vm.ctaBuyNowPath,"cta-rfo-path":_vm.ctaRfoPath,"cta-tda-path":_vm.ctaTdaPath,"is-preproduction":_vm.currentCar.isPreproduction,"has-discounted-price":_vm.currentCar.hasDiscountedPrice},on:{"onChangeDealer":_vm.setCurrentCarId}}):_vm._e()],1),_vm._v(" "),(_vm.hasAnyDealerLocation(_vm.currentCar))?_c('StockcarDetailsSectionContainer',{attrs:{"title":_vm.i18n.dealer}},[_c('StockcarDetailsDealerLocator',{attrs:{"config":_vm.currentCar.dealerLocator,"current-geolocation":_vm.currentGeolocation,"select-title":_vm.i18n.selectDealerTitle,"aem-config":_vm.aemConfig,"i18n":_vm.i18n,"cta-buy-now-path":_vm.ctaBuyNowPath,"cta-rfo-path":_vm.ctaRfoPath,"cta-tda-path":_vm.ctaTdaPath},on:{"onChangeDealer":_vm.setCurrentCarId}})],1):_vm._e(),_vm._v(" "),(_vm.currentCar.engine)?_c('StockcarDetailsSectionContainer',{attrs:{"title":_vm.i18n.engine}},[_c('StockcarDetailsEngine',{attrs:{"config":_vm.currentCar.engine,"data-config":_vm.dataConfig,"aem-config":_vm.aemConfig,"i18n":_vm.i18n}})],1):_vm._e(),_vm._v(" "),_c('div',{staticClass:"w-full lg:tw-flex tw-block"},[_c('div',{staticClass:"lg:tw-w-1/2 tw-w-full"},[(_vm.currentCar.exterior.length > 0)?_c('StockcarDetailsSectionContainer',{attrs:{"title":_vm.i18n.exterior}},[_c('StockcarDetailsEquipment',{attrs:{"config":_vm.currentCar.exterior,"i18n":_vm.i18n}})],1):_vm._e()],1),_vm._v(" "),_c('div',{staticClass:"lg:tw-w-1/2 tw-w-full"},[(_vm.currentCar.interior.length > 0)?_c('StockcarDetailsSectionContainer',{attrs:{"title":_vm.i18n.interior}},[_c('StockcarDetailsEquipment',{attrs:{"config":_vm.currentCar.interior,"i18n":_vm.i18n}})],1):_vm._e()],1)]),_vm._v(" "),(_vm.currentCar.line.length > 0)?_c('StockcarDetailsSectionContainer',{attrs:{"title":_vm.i18n.line}},[_c('StockcarDetailsAccordionsContainer',{attrs:{"config":_vm.currentCar.line,"i18n":_vm.i18n}})],1):_vm._e(),_vm._v(" "),(_vm.currentCar.packages.length > 0)?_c('StockcarDetailsSectionContainer',{attrs:{"title":_vm.i18n.packages}},[_c('StockcarDetailsAccordionsContainer',{attrs:{"config":_vm.currentCar.packages,"i18n":_vm.i18n}})],1):_vm._e(),_vm._v(" "),(_vm.currentCar.options.length > 0)?_c('StockcarDetailsSectionContainer',{attrs:{"title":_vm.i18n.options}},[_c('StockcarDetailsOptions',{attrs:{"config":_vm.currentCar.options,"i18n":_vm.i18n}})],1):_vm._e()],1):_vm._e()}}],null,true)}),_vm._v(" "),(_vm.aemConfig.bsiActivated && _vm.carDataLoaded)?_c('div',{staticClass:"tw-relative"},[_c('StockcarFetchJson',{attrs:{"url-type":"bsi","api-config":_vm.aemConfig.apiConfiguration,"market":_vm.aemConfig.domainPageName,"locale":_vm.aemConfig.languagePageName},scopedSlots:_vm._u([{key:"default",fn:function({ fetchedJson }){return _c('div',{},[_c('StockcarDetailsBsi',{attrs:{"bsi-data":fetchedJson,"model-name":_vm.currentCar.modelName,"series-id":_vm.seriesId,"car-price":_vm.currentCar.hasDiscountedPrice
                ? _vm.getVehicleDicountedPrice(_vm.currentCar)
                : _vm.getVehiclePrice(_vm.currentCar),"aem-config":_vm.aemConfig,"i18n":_vm.i18n,"cta-rfo-path":_vm.ctaRfoPath},on:{"bsi-properties-changed":_vm.onBSIPropertiesChange}})],1)}}],null,false,4158412485)})],1):_vm._e(),_vm._v(" "),_c('div',{staticClass:"tw-relative tw-min-h-500"},[_c('StockcarFetchJson',{attrs:{"url-type":"list","api-config":_vm.aemConfig.apiConfiguration,"market":_vm.aemConfig.domainPageName,"locale":_vm.aemConfig.languagePageName,"parameters":{
          sorting: _vm.sorting,
          filters: _vm.filters,
        }},scopedSlots:_vm._u([{key:"default",fn:function({ fetchedJson }){return _c('div',{},[_c('StockcarDetailsAlternative',{attrs:{"config":_vm.getAlternativeConfig(fetchedJson),"aem-config":_vm.aemConfig,"filters-query":_vm.alternativeCarsFiltersQuery,"i18n":_vm.i18n}})],1)}}])},[_c('div',{attrs:{"id":"stockcar__finance-section"}},[_vm._v("Finance Section")])])],1),_vm._v(" "),_c('StockcarDetailsBackButton',{attrs:{"label":_vm.i18n.backToResults,"filters":_vm.filters,"sorting":_vm.sorting}})],1)},staticRenderFns: [],
    name: 'StockcarDetailsContent',
    components: {
      StockcarDetailsBsi,
      StockcarDetailsSectionContainer,
      StockcarDetailsEquipment,
      StockcarDetailsOptions,
      StockcarDetailsAccordionsContainer,
      StockcarDetailsDealerLocator,
      StockcarDetailsCarousel,
      StockcarDetailsAlternative,
      StockcarDetailsEngine,
      StockcarDetailsBackButton,
      StockcarFetchJson,
    },
    mixins: [stockcarContentMixin, PriceMixin, preprodImagesMixin],
    props: {
      carId: {
        type: Number,
        required: true,
      },
      currentGeolocation: {
        type: Object,
        default: () => null,
      },
      filters: {
        type: Object,
        default: () => ({}),
      },
      sorting: {
        type: Object,
        default: () => ({}),
      },
    },
    data() {
      return {
        currentCarId: null,
        dataConfig: [],
        carDataLoaded: false,
        sliderCosyConfig: cosyConfig.sliderCosyConfig,
        bsiProperties: null,
        dealerFromSelector: null,
      };
    },
    computed: {
      currentCar() {
        const carDetail = detailModelParser(
          this.dataConfig,
          this.aemConfig,
          this.i18n,
          this.currentCarId
        );
        carDetail.dealerLocator = carDetail.carsCarouselItems.map(
          ({ dealer }) => dealer
        );

        if (this.aemConfig.isDealerMarket) {
          const marketDealers = Vue.prototype.$marketDealers;

          if (marketDealers.length > 0) {
            const vehicleDealersIds = carDetail.dealerLocator.map(
              (dealer) => dealer.id
            );
            const additionalDealers = marketDealers.filter(
              (dealer) => !vehicleDealersIds.includes(dealer.id)
            );

            carDetail.dealerLocator.push(...additionalDealers);
          }
        }
        return carDetail;
      },
      selectedDealer() {
        if (!this.dealerFromSelector) return this.currentCar.dealerLocator[0];

        return this.dealerFromSelector;
      },
      ctaBuyNowPath() {
        return getCTAPath(
          'ctaBuyNow',
          this.aemConfig,
          this.currentCar,
          this.currentCarId,
          this.cosyImageEncoded,
          this.bsiProperties
        );
      },
      ctaRfoPath() {
        return getCTAPath(
          'ctaRFO',
          this.aemConfig,
          this.currentCar,
          this.currentCarId,
          this.cosyImageEncoded,
          this.bsiProperties
        );
      },
      ctaTdaPath() {
        return getCTAPath(
          'ctaTDA',
          this.aemConfig,
          this.currentCar,
          this.currentCarId,
          this.cosyImageEncoded,
          this.bsiProperties
        );
      },
      alternativeCarsFiltersQuery() {
        return {
          filters: JSON.stringify(this.filters),
          sorting: JSON.stringify(this.sorting),
        };
      },
      seriesId() {
        return this.dataConfig.attributes.seriesId || '';
      },
      cosyImageEncoded() {
        const item = this.currentCar.carsCarouselItems[0];

        return prepareCosyImageUrl({
          cosyUrl: this.aemConfig.cosyUrl,
          cosyToken: this.aemConfig.cosyToken,
          cosyPrefix: this.aemConfig.cosyPrefix,
          background: 'WHITE',
          client: 'NVCO',
          resp: 'JPEG',
          brand: item.brand === 'bmwi' ? 'WBBI' : 'WBBM',
          paint: item.paint,
          fabric: this.getFabricCode(item.interior),
          sa: this.prepareSa(
            item.interior,
            item.exterior,
            item.options,
            item.packages,
            item.line,
            item.modvar
          ),
          vehicle: item.vehicle,
          angle: this.sliderCosyConfig[0].angle,
          pov: this.sliderCosyConfig[0].pov,
          w: this.sliderCosyConfig[0].w,
          h: this.sliderCosyConfig[0].h,
          x: this.sliderCosyConfig[0].x,
          y: this.sliderCosyConfig[0].y,
          cut: this.sliderCosyConfig[0].cut,
        });
      },
    },
    created() {
      TrackingEventHandler.dispatchEvent(TRACKING_EVENT_ENTER_PAGE, {
        name: PAGE_TYPE_DETAILS_PAGE,
      });
    },
    methods: {
      prepareSa(
        interior,
        exterior,
        options,
        packages = [],
        line = [],
        modvar = []
      ) {
        let sa = [];
        return sa
          .concat(interior, exterior, options, packages, line, modvar)
          .filter((code) => code.startsWith('s') || code.startsWith('S'))
          .join();
      },
      getFabricCode(interior) {
        return interior.find(
          (code) => code.startsWith('f') || code.startsWith('F')
        );
      },
      onResponse(response) {
        if (!response.data) {
          return;
        }
        const allVehicles = this.prepareAllVehicles([response.data]);
        TrackingEventHandler.dispatchEvent(TRACKING_EVENT_DETAILS_PAGE_DATA, {
          vehicles: allVehicles,
        });
      },

      onBSIPropertiesChange(data) {
        this.bsiProperties = data;
      },
      prepareAllVehicles(allModels = []) {
        return allModels.reduce((allVehicles, model) => {
          if (model && model.attributes && model.attributes.vehicles) {
            const transformedVehicles = model.attributes.vehicles.map(
              (vehicle) => {
                return {
                  ...model,
                  ...vehicle,
                };
              }
            );
            allVehicles.push(...transformedVehicles);
          }
          return allVehicles;
        }, []);
      },
      getAlternativeConfig(config) {
        const newList = singleModelList(config.data, this.aemConfig).data;
        const currentCarIndex = newList.findIndex((car) => car.id === this.carId);

        let firstCarIndex = currentCarIndex + 1;
        let secondCarIndex = currentCarIndex + 2;

        if (!isObject(newList[firstCarIndex])) {
          firstCarIndex = currentCarIndex - 1;
          secondCarIndex = currentCarIndex - 2;
        }

        if (!isObject(newList[secondCarIndex])) {
          secondCarIndex = currentCarIndex - 1;
        }

        return [newList[firstCarIndex], newList[secondCarIndex]];
      },
      hasAnyDealerLocation(config) {
        return (
          config.dealerLocator &&
          config.dealerLocator.filter(
            (element) =>
              element.dealerLocation && element.dealerLocation.coordinates
          ).length > 0
        );
      },
      getConfig(config) {
        if (!config) {
          return null;
        }
        return config.data;
      },
      registerData(config) {
        this.dataConfig = config;
        this.carDataLoaded = true;
        return this.dataConfig;
      },
      setCurrentCarId(dealerSelectionObject) {
        this.dealerFromSelector = dealerSelectionObject.dealer;
        this.currentCarId = dealerSelectionObject.index;
      },
    },
  };

  var GoogleMapConfig = {
    load: {
      googleMapApiUrl: 'https://maps.googleapis.com/maps/api/js?key=AIzaSyBK0mTIpEkai5lSU7igkjMhUfa0mYLtjCU',
      libraries: 'places', // necessary for places input
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var StockcarDetailsPage = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-container",attrs:{"data-tailwind":""}},[_c('GoogleApiWrapper',{attrs:{"google-map-api-url":_vm.googleMapApiUrl},on:{"loaded":_vm.loaded}}),_vm._v(" "),(_vm.loadedMaps)?_c('div',{staticClass:"tw-w-full tw-px-200 sm:tw-px-0 tw-relative"},[_c('StockcarDetailsBackButton',{attrs:{"label":_vm.i18n.backToResults,"filters":_vm.filtersFromQuery,"sorting":_vm.sortingFromQuery}}),_vm._v(" "),_c('div',{staticClass:"tw-w-full"},[_c('StockcarDetailsContent',{attrs:{"aem-config":_vm.aemConfig,"i18n":_vm.i18n,"car-id":+_vm.getId(),"current-geolocation":_vm.currentGeolocation,"filters":_vm.filtersFromQuery,"sorting":_vm.sortingFromQuery}})],1)],1):_vm._e()],1)},staticRenderFns: [],
    name: 'StockcarDetailsPage',
    components: {
      StockcarDetailsBackButton,
      StockcarDetailsContent,
      GoogleApiWrapper,
    },
    mixins: [stockcarPageMixin],
    data() {
      return {
        loadedMaps: false,
        googleMapApiUrl:
          this.aemConfig.googleMapApiUrl.replace(
            '{0}',
            this.aemConfig.languagePageName
          ) || GoogleMapConfig.load.googleMapApiUrl,
        filtersFromQuery: {},
        sortingFromQuery: defaultSorting,
        currentGeolocation: null,
      };
    },
    created() {
      if (this.$router.currentRoute.query.filters) {
        this.filtersFromQuery = JSON.parse(
          this.$router.currentRoute.query.filters
        );
      }

      if (this.$router.currentRoute.query.sorting) {
        this.sortingFromQuery = JSON.parse(
          this.$router.currentRoute.query.sorting
        );
      }

      navigator.permissions &&
        navigator.permissions
          .query({ name: 'geolocation' })
          .then(PermissionStatus => {
            if (PermissionStatus.state === 'granted') {
              initGeoLocation().then(position => {
                this.currentGeolocation = position;
              });
            }
      });
    },
    methods: {
      getId() {
        return this.$router.currentRoute && this.$router.currentRoute.params
          ? this.$router.currentRoute.params.id
          : 0;
      },
      loaded(status) {
        this.loadedMaps = status;
      },
    },
  };

  /*
  @bmwkit/lazy-image
  Version: 0.0.1
  (c) Interone
  */

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var LazyImage = {
    name: 'LazyImage',
    props: {
      alt: {
        type: String,
        required: true,
      },
      title: {
        type: String,
        required: true,
      },
      srcSmall: {
        type: String,
        required: true,
      },
      srcMedium: {
        type: String,
        required: true,
      },
      srcLarge: {
        type: String,
        required: true,
      },
      intersectionOptions: {
        type: Object,
        default: () => {},
      },
      emitUpdatedImgHeight: {
        type: Function,
        default: () => {},
      },
    },
    data: () => ({ observer: null, intersected: false, loaded: false }),
    mounted() {
      const imgElement = this.$el.lastElementChild;

      imgElement.addEventListener('load', ev => {
        this.loaded = true;
        this.emitUpdatedImgHeight(imgElement);
      });

      this.observer = new IntersectionObserver(entries => {
        const image = entries[0];
        if (image.isIntersecting) {
          this.intersected = true;
          this.observer.disconnect();
          this.$emit('intersect', image.target);
        }
      }, this.intersectionOptions);

      this.observer.observe(this.$el.parentElement);

      EventBus$1.$on('windowResize', () => this.emitUpdatedImgHeight(imgElement));
    },
    destroyed() {
      this.observer.disconnect();
    },
    render(h) {
      return h(
        'picture',
        {
          class: {
            block: true,
            'v-lazy-image': true,
            'v-lazy-image-loaded': this.loaded,
          },
        },
        [
          h('source', {
            attrs: {
              srcset: this.intersected ? this.srcSmall : '',
              media: '(max-width: 575px)',
            },
          }),
          h('source', {
            attrs: {
              srcset: this.intersected ? this.srcMedium : '',
              media: '(max-width: 991px)',
            },
          }),
          h('source', {
            attrs: {
              srcset: this.intersected ? this.srcLarge : '',
              media: '(min-width: 992px)',
            },
          }),
          h('img', {
            attrs: {
              src: this.intersected ? this.srcLarge : '',
              alt: this.alt,
              title: this.title,
            },
          }),
        ]
      );
    },
    errorCaptured(err, vm, info) {
      console.warn(`${err.stack}\n\nfound in ${info} inside LazyImage component`);
      this.$emit('error', err);
      return false;
    },
  };

  /*
  @bmwkit/teaser-item
  Version: 0.0.1
  (c) Interone
  */

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css="a.tw-font-bmw-bold[data-v-2bc208bc]{font-family:bmwTypeNextWeb,Arial,Helvetica,Roboto,sans-serif;font-weight:700}@media (min-width:992px){.teaser-text-container[data-v-2bc208bc]{bottom:25%;left:5%}html[dir=rtl] .teaser-text-container[data-v-2bc208bc]{right:5%;left:auto}}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var TeaserItem = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"teaser-container tw-relative"},[(_vm.lazyImage)?_c('LazyImage',{attrs:{"alt":_vm.imgAltText,"title":_vm.imgTitle,"src-small":_vm.imgSmall,"src-medium":_vm.imgMedium,"src-large":_vm.imgLarge,"emit-updated-img-height":_vm.emitUpdatedImgHeight}}):_vm._e(),_vm._v(" "),(!_vm.lazyImage)?_c('picture',{staticClass:"tw-block"},[_c('source',{attrs:{"srcset":_vm.imgSmall,"media":"(max-width: 575px)"}}),_vm._v(" "),_c('source',{attrs:{"srcset":_vm.imgMedium,"media":"(max-width: 991px)"}}),_vm._v(" "),_c('source',{attrs:{"srcset":_vm.imgLarge,"media":"(min-width: 992px)"}}),_vm._v(" "),_c('img',{ref:"img",staticClass:"tw-w-full",attrs:{"src":_vm.imgLarge,"alt":_vm.imgAltText,"title":_vm.imgTitle}})]):_vm._e(),_vm._v(" "),(_vm.textContainer)?_c('div',{staticClass:"teaser-text-container tw-pt-400 tw-pl-300 md:tw-pr-300 sm:tw-pt-400 tw-relative lg:tw-absolute lg:tw-p-0 lg:tw-w-3/5"},[_c('h1',{staticClass:"break-words tw-mb-300 tw-text-xl",class:{ 'lg:tw-text-white': !_vm.invertedFontColor, 'lg:tw-text-grey-900': _vm.invertedFontColor, 'tw-font-bmw-light tracking-tight': !_vm.slimFont, 'tw-font-bmw-light': _vm.slimFont, }},[_vm._v(" "+_vm._s(_vm.largeHeadingText)+" ")]),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.smallHeadingText),expression:"smallHeadingText"}],staticClass:"ds2-subbrand-icon--container"},[_c('h3',{staticClass:"break-words tw-mb-300 tw-text-l",class:{ 'lg:tw-text-white': !_vm.invertedFontColor, 'lg:tw-text-grey-900': _vm.invertedFontColor, 'tw-font-bmw-light tracking-tight': !_vm.slimFont, 'tw-font-bmw-light': _vm.slimFont, }},[_vm._v(" "+_vm._s(_vm.smallHeadingText)+" ")])]),_vm._v(" "),_c('div',{staticClass:"tw-font-bmw-bold sm:tw-flex lg:tw-block"},[(_vm.primaryButtonLabel)?_c('a',{staticClass:"tw-text-button tw-bg-primary-500 tw-p-300 tw-w-full tw-block tw-mb-200 tw-text-white tw-text-center tw-no-underline lg:tw-max-w-xs sm:tw-mr-200 sm:tw-mb-0 lg:tw-mb-200 tw-font-bmw-bold",attrs:{"href":_vm.primaryButtonUrl,"title":_vm.primaryButtonLabel,"target":"_self","role":"button"},on:{"click":function($event){return _vm.emitClick($event, 'primary');}}},[_vm._v(" "+_vm._s(_vm.primaryButtonLabel)+" ")]):_vm._e(),_vm._v(" "),(_vm.secondaryButtonLabel)?_c('a',{staticClass:"teaser-secondary-button tw-text-button tw-bg-grey-600 tw-p-300 tw-w-full tw-block tw-text-white tw-text-center tw-no-underline lg:tw-max-w-xs tw-font-bmw-bold",attrs:{"href":_vm.secondaryButtonUrl,"title":_vm.secondaryButtonLabel,"target":"_self","role":"button"},on:{"click":function($event){return _vm.emitClick($event, 'secondary');}}},[_vm._v(" "+_vm._s(_vm.secondaryButtonLabel)+" ")]):_vm._e()])]):_vm._e(),_vm._v(" "),(_vm.textContainer)?_c('div',{staticClass:"tw-pt-400 tw-pb-400 tw-pl-300 tw-pr-300 tw-text-s tw-text-grey-900 sm:tw-pl-500 sm:tw-pr-500 tw-font-bmw-light ds2-cms-output"},[_c('p',[_vm._v(_vm._s(_vm.copyText))])]):_vm._e()],1)},staticRenderFns: [],_scopeId: 'data-v-2bc208bc',
    name: 'TeaserItem',
    components: {
      LazyImage,
    },
    props: {
      lazyImage: {
        type: Boolean,
        default: false,
      },
      ssr: {
        type: Boolean,
        default: false,
      },
      slimFont: {
        type: Boolean,
        default: false,
      },
      invertedFontColor: {
        type: Boolean,
        default: false,
      },
      imgSmall: {
        type: String,
        default: '',
      },
      imgMedium: {
        type: String,
        default: '',
      },
      imgLarge: {
        type: String,
        default: '',
      },
      imgAltText: {
        type: String,
        default: '',
      },
      imgTitle: {
        type: String,
        default: '',
      },
      largeHeadingText: {
        type: String,
        default: '',
      },
      smallHeadingText: {
        type: String,
        default: '',
      },
      primaryButtonLabel: {
        type: String,
        default: '',
      },
      primaryButtonUrl: {
        type: String,
        default: '#',
      },
      secondaryButtonLabel: {
        type: String,
        default: '',
      },
      secondaryButtonUrl: {
        type: String,
        default: '#',
      },
      copyText: {
        type: String,
        default: '',
      },
      textContainer: {
        type: Boolean,
        default: true,
      }
    },
    mounted() {
      if (this.ssr || this.lazyImage) return;
      this.imgHeight = parseInt(getComputedStyle(this.$refs.img).height);
      this.$refs.img.addEventListener('load', () => this.emitUpdatedImgHeight());
      EventBus$1.$on('windowResize', () => this.emitUpdatedImgHeight());

      if (this.$refs.img.complete) {
        this.emitUpdatedImgHeight();
      }
    },
    beforeDestroy() {
      EventBus$1.$off('windowResize', () => this.emitUpdatedImgHeight());
    },
    methods: {
      debug(e) {
        console.log(e);
      },
      emitClick($event, name) {
        this.$emit(name, $event);
      },
      emitUpdatedImgHeight(imgElement) {
        const img = imgElement || this.$refs.img;
        const newImgHeight = img
          ? parseInt(getComputedStyle(img).height)
          : this.imgHeight;

        if (newImgHeight !== this.imgHeight) {
          this.imgHeight = newImgHeight;
          this.$parent.$emit('slideHeightUpdate', { height: newImgHeight });
        }
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside TeaserItem component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head$$1=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".stockcar-carousel .pagination-controls{width:10px;height:10px}.stockcar-carousel .pagination-controls.active{width:12px;height:12px}.stockcar-carousel .carousel-list{position:relative;z-index:10}.stockcar-carousel .glide__slides{z-index:100;overflow:visible}html[dir=rtl] .glide__arrow.arrow-left.tw--ml-700{margin-right:-60px}html[dir=rtl] .glide__arrow.arrow-right.tw--mr-700{margin-left:-60px}.model-card-overlay-close-button{right:0;font-size:50px}.model-card-overlay{position:fixed;top:0;left:0;z-index:100000;width:100vw;height:100vh;padding:30px;background:#fff}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head$$1.appendChild(style); } })();

  var StockcarHomePageBestsellersCarousel = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-w-full",attrs:{"data-tracking-regionid":"sl > new car stocklocator-importers > best sellers teaser"}},[_c('h2',{staticClass:"tw-mb-300 tw-font-bmw-light tw-text-2xl tw-text-grey-300 tw-uppercase"},[_vm._v(" "+_vm._s(_vm.title)+" ")]),_vm._v(" "),(_vm.modalOpened)?_c('div',{staticClass:"model-card-overlay"},[_c('div',{staticClass:"tw-flex tw-mb-200"},[_c('p',{staticClass:"model-card-title tw-text-grey-900 tw-text-m tw-w-3/5 tw-font-bmw-bold"},[_vm._v(" "+_vm._s(_vm.modelCardConfig.fullCardTitle)+" ")]),_vm._v(" "),_c('button',{staticClass:"model-card-overlay-close-button tw-absolute tw-m-200 tw-pin-t reset-button reset-button-hover tw-text-grey-800 icon-close-x",on:{"click":_vm.closeModal}})]),_vm._v(" "),_c('StockcarDisclaimer',{attrs:{"finance-disclaimer":true,"finance-data":_vm.getPriceInformation(_vm.modelCardConfig),"currency-format":_vm.aemConfig.currencyConfiguration,"co-emission":_vm.safeGet(_vm.modelCardConfig, 'nedc.co2Comb'),"i18n":_vm.i18n,"aem-config":_vm.aemConfig}})],1):_vm._e(),_vm._v(" "),_c('div',{staticClass:"tw-w-full"},[_c('div',{ref:"carouselContainer",staticClass:"tw-w-full"},[_c('CarouselContainer',{staticClass:"stockcar-carousel",attrs:{"hide-controls":_vm.limitOptions < 3,"per-view":_vm.limitOptions,"gap":10,"hide-track-overflow":false,"visible-only-range":true,"theme":_vm.carouselTheme,"direction":_vm.direction,"carousel-name":"stockcar_details_carousel","sizing-option":"PER_VIEW"}},_vm._l((_vm.itemsList),function(config,id){return _c('CarouselItem',{key:id,attrs:{"id":id,"container-class":"tw-items-center tw-justify-center tw-flex tw-mx-100 tw-mt-100"}},[_c('ModelCard',{staticClass:"tw-px-450 tw-py-500",attrs:{"url":'details/' + config.id,"full-card-title":config.fullCardTitle,"short-card-title":config.shortCardTitle,"card-description":config.description,"car-price":_vm.getPriceOrDiscountPrice(config),"power":[config.powerKw, config.powerPs],"info-layer":_vm.vehicleInfoLayer(config, _vm.configInfoLayer, _vm.aemInfoLayer),"is-duo-reverse-variant":false,"brand":config.brand === 'bmwi' ? 'WBBI' : 'WBBM',"vehicle":config.vehicle,"url-i18n":_vm.aemConfig.buttonLabel,"i18n":_vm.i18n,"disclaimers":_vm.aemDisclaimerConfig,"paint":config.paint,"container-element":_vm.containerElement,"sa":_vm.prepareSa(
                  config.interior,
                  config.exterior,
                  config.options,
                  config.packages,
                  config.line,
                  config.modvar
                ),"cosy-url":_vm.aemConfig.cosyUrl,"cosy-prefix":_vm.aemConfig.cosyPrefix,"cosy-token":_vm.aemConfig.cosyToken,"shown-info":_vm.aemConfig.shownInfo,"currency-format":_vm.aemConfig.currencyConfiguration,"is-preproduction":config.isPreproduction,"has-discounted-price":config.hasDiscountedPrice,"card-variant":"default","find-out-more-i18n":"findOutMore","tracking-satelite-name":"stock_locator_home"},on:{"openDisclaimer":function($event){return _vm.openDisclaimer(config)}}},[_c('template',{slot:"model-card-wltp"},[(_vm.device === 'desktop')?_c('StockcarDisclaimer',{attrs:{"wltp-disclaimer":true,"currency-format":_vm.aemConfig.currencyConfiguration,"aem-config":_vm.aemConfig,"i18n":_vm.i18n}}):_vm._e()],1),_vm._v(" "),_c('template',{slot:"model-card-finance"},[(_vm.device === 'desktop')?_c('StockcarDisclaimer',{attrs:{"finance-disclaimer":true,"finance-data":_vm.getPriceInformation(config),"currency-format":_vm.aemConfig.currencyConfiguration,"co-emission":_vm.safeGet(config, 'nedc.co2Comb'),"i18n":_vm.i18n,"aem-config":_vm.aemConfig}}):_vm._e()],1)],2)],1)}),1)],1)])])},staticRenderFns: [],
    name: 'StockcarHomePageBestsellersCarousel',
    components: {
      CarouselContainer,
      CarouselItem,
      ModelCard,
      StockcarDisclaimer,
    },
    mixins: [
      stockcarDetecSizeMixin,
      stockcarListComponentMixin,
      stockcarTranslationComponent,
      PriceMixin,
      preprodImagesMixin,
    ],
    props: {
      items: {
        type: Array,
        default() {
          return [];
        },
      },
      title: {
        type: String,
        default: '',
      },
      cosyUrl: {
        type: String,
        required: true,
      },
      aemConfig: {
        type: Object,
        required: true,
      },
    },
    data() {
      return {
        modelCardConfig: null,
        modalOpened: false,
        containerElement: {},
        configInfoLayer,
        vehicleInfoLayer,
        aemInfoLayer: {
          co2DefaultDisplayType: this.aemConfig.co2DefaultDisplayType,
          fuelConsumptionDefaultDisplayType: this.aemConfig
            .fuelConsumptionDefaultDisplayType,
          rangeDefaultDisplayType: this.aemConfig.rangeDefaultDisplayType,
        },
        aemDisclaimerConfig: {
          nefzDisclaimerEnable: this.aemConfig.nefzDisclaimerEnable,
          nefzCorrelatedDisclaimerEnable: this.aemConfig
            .nefzCorrelatedDisclaimerEnable,
          wltpDisclaimerEnable: this.aemConfig.wltpDisclaimerEnable,
          emissionIconDisclaimerEnable: this.aemConfig
            .emissionIconDisclaimerEnable,
        },
        limit: 3,
        carouselTheme: {
          class: 'tw-text-3xl',
          disabledArrowOpacity: 0.3,
          leftArrowClass: 'tw--ml-700',
          rightArrowClass: 'tw--mr-700',
          leftArrowStyles: {
            position: 'relative',
            top: '-20px',
            background: 'none',
          },
          rightArrowStyles: {
            position: 'relative',
            top: '-20px',
            background: 'none',
          },
        },
      };
    },
    computed: {
      itemsList() {
        return this.getItems();
      },
      direction() {
        if (this.aemConfig.RTLTextDirection) {
          return 'rtl';
        }
        return 'ltr';
      },
      limitOptions() {
        switch (this.device) {
          case 'desktop':
            return 3;
          case 'tablet':
            return 2;
          case 'mobile':
            return 1;
          default:
            return 3;
        }
      },
    },
    mounted() {
      this.containerElement = this.$refs.carouselContainer;
    },
    methods: {
      getPriceOrDiscountPrice(vehicle) {
        const discountPrice = this.getVehicleDicountedPrice(vehicle);

        if (discountPrice) return discountPrice;

        return this.getVehiclePrice(vehicle);
      },
      closeModal() {
        this.modalOpened = false;
      },
      openDisclaimer(modelCardConfig) {
        this.modalOpened = true;
        this.modelCardConfig = modelCardConfig;
      },
      safeGet(object, path) {
        return get(object, path);
      },
      prepareSa(
        interior,
        exterior,
        options,
        packages = [],
        line = [],
        modvar = []
      ) {
        let sa = [];
        return sa
          .concat(interior, exterior, options, packages, line, modvar)
          .join();
      },
      getItems() {
        return this.items.slice(0, 9);
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside StockarHomePage component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".hero-teaser{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;width:100%}@media (max-width:1752px){.hero-teaser{width:100vw!important;margin-left:-50vw;left:50%}[dir=rtl] .hero-teaser{width:100vw!important;margin-right:-50vw;right:50%}}@media (min-width:1753px){.hero-teaser{max-width:109.5rem;margin:0 auto}}.hero-teaser .content{display:none}.hero-teaser-content-mobile{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:start;-ms-flex-align:start;align-items:start;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}html[dir=rtl] .hero-teaser-content-mobile{-webkit-box-align:end;-ms-flex-align:end;align-items:end}@media (min-width:992px){.hero-teaser .content{position:absolute;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:start;-ms-flex-align:start;align-items:start;width:100%;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;padding:122px 79px 0}.hero-teaser-content-mobile{display:none}}html[dir=rtl] .hero-teaser .content{right:0;-webkit-box-align:end;-ms-flex-align:end;align-items:end}.hero-teaser h2{font-size:32px;line-height:45px;color:#fff}.hero-teaser h3{color:#fff}.hero-teaser .coming-soon-button{padding:14px 51px}.hero-teaser .image{display:-webkit-box;display:-ms-flexbox;display:flex;width:100%}.hero-teaser .image img{width:100%}.stockcar-home-page-loading-container{position:relative;min-height:200px}.stockcar-homepage-teaser{min-height:150px}.stockcar-homepage-teaser .teaser-text-container{top:15px;padding-top:0;padding-left:0}.stockcar-homepage-teaser picture{position:relative;left:-20px;width:calc(100% + 40px)}.stockcar-homepage-teaser h1{margin-top:6px;margin-bottom:30px;font-size:25px;line-height:31px;color:#1a1a1a}.stockcar-homepage-teaser .teaser-secondary-button{font-size:12px;font-weight:700;color:#fff;background-color:#4d4d4d}html[dir=rtl] .show-all-cars{margin-right:10px}@media (min-width:768px){.stockcar-homepage-teaser .teaser-secondary-button{width:330px}.stockcar-homepage-teaser .teaser-text-container{top:15px}.stockcar-homepage-teaser picture{position:relative;left:0;width:100%}.stockcar-homepage-teaser h1{font-size:35px;line-height:35px}}@media (min-width:1200px){.stockcar-homepage-teaser .teaser-text-container{top:15px;left:45px}html[dir=rtl] .teaser-text-container{right:45px;left:auto}.stockcar-homepage-teaser h1{margin-top:6px;margin-bottom:30px;font-size:48px;line-height:51px;color:#1a1a1a}.stockcar-homepage-teaser .teaser-secondary-button{width:100%}}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var StockcarHomePageContent = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tw-w-full"},[_c('div',{staticClass:"tw-px-400"},[(_vm.hasHeroPreprodImages)?_c('GeneralInfoBanner',{attrs:{"is-enabled":_vm.aemConfig.enableGeneralInfoBanner,"text":_vm.aemConfig.generalInfoBannerText}}):_vm._e(),_vm._v(" "),(_vm.hasHeroPreprodImages)?_c('div',{staticClass:"tw-mb-500"},[_c('div',{staticClass:"hero-teaser"},[_c('div',{staticClass:"image"},[_c('img',{attrs:{"src":_vm.promotionalSettings.image.url,"alt":"fullCardTitle"}})]),_vm._v(" "),_c('div',{staticClass:"content md:tw-container"},[(_vm.promotionalSettings.headline)?_c('h2',{staticClass:"tw-mb-400"},[_vm._v(" "+_vm._s(_vm.promotionalSettings.headline)+" ")]):_vm._e(),_vm._v(" "),(_vm.promotionalSettings.subheadline)?_c('h3',{staticClass:"tw-text-m tw-mb-400"},[_vm._v(" "+_vm._s(_vm.promotionalSettings.subheadline)+" ")]):_vm._e(),_vm._v(" "),(_vm.promotionalSettings.url)?_c('router-link',{staticClass:"tw-mb-0 lg:tw-max-w-xs",attrs:{"data-tracking-linkid":_vm.activityMapLink,"to":{
                path: _vm.promotionalSettings.url,
                query: _vm.filtersQuery,
              }}},[_c('BaseButton',{attrs:{"link-text":_vm.i18n.comingSoonLabel,"classes":"coming-soon-button tw-h-650\n              tw-bg-blue hover:tw-bg-blue-dark tw-text-white tw-inline-block"}})],1):_vm._e()],1)]),_vm._v(" "),_c('div',{staticClass:"hero-teaser-content-mobile"},[_c('h2',{staticClass:"tw-text-2xl tw-mt-400 tw-mb-400"},[_vm._v(" "+_vm._s(_vm.promotionalSettings.headline)+" ")]),_vm._v(" "),_c('h3',{staticClass:"tw-text-m tw-mb-400"},[_vm._v(" "+_vm._s(_vm.promotionalSettings.subheadline)+" ")]),_vm._v(" "),_c('router-link',{staticClass:"tw-block tw-mb-0 tw-mx-auto tw-w-full md:tw-w-1/3 lg:tw-max-w-xs",attrs:{"data-tracking-linkid":_vm.activityMapLink,"to":{
              path: _vm.promotionalSettings.url,
              query: _vm.filtersQuery,
            }}},[_c('BaseButton',{attrs:{"link-text":_vm.i18n.comingSoonLabel,"classes":"tw-w-full tw-mb-400 tw-py-300 tw-h-650\n              tw-bg-blue hover:tw-bg-blue-dark tw-text-white tw-inline-block"}})],1)],1)]):_vm._e(),_vm._v(" "),_c('div',{staticClass:"tw-container"},[(!_vm.hasHeroPreprodImages)?_c('GeneralInfoBanner',{attrs:{"is-enabled":_vm.aemConfig.enableGeneralInfoBanner,"text":_vm.aemConfig.generalInfoBannerText}}):_vm._e(),_vm._v(" "),_c('h2',{staticClass:"tw-mb-300 tw-font-bmw-light tw-text-2xl"},[_vm._v(" "+_vm._s(_vm.aemConfig.homeHeadline)+" ")]),_vm._v(" "),_c('h4',{staticClass:"tw-mb-600 tw-font-bmw-light tw-text-m"},[_vm._v(" "+_vm._s(_vm.aemConfig.homeSubheadline)+" ")])],1),_vm._v(" "),_c('div',{staticClass:"tw-container tw-w-full lg:tw-mb-0 md:tw-mb-600 sm:tw-mb-800"},[_c('StockcarFiltersBar',{attrs:{"parameters":_vm.parameters,"aem-config":_vm.aemConfig,"i18n":_vm.i18n,"enabled-filters":{ series: true, bodytype: true, price: true },"current-geolocation":_vm.currentGeolocation,"price-range":_vm.priceRange,"filters-bar-button-text":_vm.filtersBarButtonText},on:{"changePrice":_vm.updatePriceValue,"changeFilters":_vm.updateFiltersParams,"showResults":function($event){return _vm.onSubmit(_vm.parameters.filters)},"onResponse":_vm.updatePriceOverallRange}},[_c('div',{staticClass:"tw-w-1/4 tw-hidden md:tw-flex"},[_c('BaseButton',{staticClass:"show-all-cars",attrs:{"classes":"tw-w-full tw-py-300 tw-h-650 tw-bg-blue hover:tw-bg-blue-dark tw-text-white tw-inline-block","link-text":_vm.filtersBarButtonText},on:{"onclick":function($event){return _vm.onSubmit(_vm.parameters.filters)}}})],1)])],1),_vm._v(" "),_c('div',{staticClass:"tw-container tw-relative tw-min-h-700"},[(!_vm.hasHeroPreprodImages)?_c('TeaserItem',{staticClass:"tw-w-full lg:tw-mb-800",attrs:{"lazy-image":false,"slim-font":false,"inverted-font-color":false,"text-container":false,"img-small":_vm.homePageImages.homeImage.small,"img-medium":_vm.homePageImages.homeImage.medium,"img-large":_vm.homePageImages.homeImage.big}}):_vm._e(),_vm._v(" "),_c('div',{staticClass:"showall-button tw-flex tw-justify-center"},[_c('BaseButton',{attrs:{"link-text":_vm.i18n.showAll,"classes":"tw-w-full md:tw-w-1/3 tw-py-300 tw-h-650 tw-mb-800 tw-mt-600\n            tw-bg-blue hover:tw-bg-blue-dark tw-text-white lg:tw-hidden tw-inline-block"},on:{"onclick":function($event){return _vm.onSubmit({})}}})],1)],1),_vm._v(" "),_c('div',{staticClass:"tw-container stockcar-home-page-loading-container"},[(_vm.aemConfig.bestsellersEnable && _vm.bestsellerData)?_c('StockcarHomePageBestsellersCarousel',{attrs:{"title":_vm.hasHeroPreprodImages ? '' : _vm.aemConfig.bestsellersCategoryHeadline,"cosy-url":_vm.aemConfig.cosyUrl,"cosy-prefix":_vm.aemConfig.cosyPrefix,"cosy-token":_vm.aemConfig.cosyToken,"aem-config":_vm.aemConfig,"items":_vm.bestsellerItems,"i18n":_vm.i18n}}):_vm._e()],1),_vm._v(" "),(_vm.aemConfig.nearestEnable && _vm.currentGeolocation)?_c('TeaserItem',{staticClass:"tw-container stockcar-homepage-teaser tw-mb-600",attrs:{"lazy-image":false,"slim-font":false,"inverted-font-color":false,"img-small":_vm.homePageImages.teaserImage.small,"img-medium":_vm.homePageImages.teaserImage.medium,"img-large":_vm.homePageImages.teaserImage.big,"large-heading-text":_vm.aemConfig.nearestCategoryHeadline,"secondary-button-label":_vm.aemConfig.nearestButtonLabel},on:{"secondary":function($event){return _vm.clickTeaserButton()}}}):_vm._e()],1)])},staticRenderFns: [],
    name: 'StockarHomePageContent',
    components: {
      TeaserItem,
      BaseButton,
      StockcarFetchJson,
      StockcarHomePageBestsellersCarousel,
      StockcarFiltersBar,
      GeneralInfoBanner,
    },
    mixins: [
      stockcarContentMixin,
      stockcarDetecSizeMixin,
      preprodImagesPropsMixin,
      preprodImagesMixin,
    ],
    data() {
      return {
        bestsellerData: null,
        parameters: {
          filters: {},
        },
        priceRange: {
          priceMin: 0,
          priceMax: 0,
        },
        currentGeolocation: null,
      };
    },
    computed: {
      vehicleDataItems() {
        if (this.vehicleData && this.vehicleData.data) {
          const list = singleModelList(this.vehicleData.data, this.aemConfig);
          return list.data;
        }
        return [];
      },
      bestsellerItems() {
        if (this.bestsellerData && this.bestsellerData.data) {
          const list = singleModelList(this.bestsellerData.data, this.aemConfig);
          return list.data;
        }
        return [];
      },
      promotionalSettings() {
        if (!this.vehicleDataItems || this.vehicleDataItems.length === 0) {
          return {};
        }

        return this.heroPromotionalSettings(this.vehicleDataItems);
      },
      hasHeroPreprodImages() {
        return Boolean(this.promotionalSettings.image);
      },
      activityMapLink() {
        return `sl > new car stocklocator-importers > vehicle details viewed - pre sale - ${this.promotionalSettings.fullCardTitle}`;
      },
      filtersQuery() {
        return {
          filters: JSON.stringify(this.parameters.filters),
          sorting: JSON.stringify(this.parameters.sorting),
        };
      },
      filtersBarButtonText() {
        const isAnySelected = (filterCategory) =>
          !!Object.keys(filterCategory).find(
            (optionKey) => filterCategory[optionKey]
          );
        const isSelectedFilter = Object.keys(this.parameters.filters).find(
          (filterKey) => {
            if (filterKey == 'series' || filterKey == 'body') {
              return isAnySelected(this.parameters.filters[filterKey]);
            } else if (filterKey == 'price') {
              return (
                this.parameters.filters.price[0] > this.priceRange.priceMin ||
                this.parameters.filters.price[1] < this.priceRange.priceMax
              );
            } else {
              return false;
            }
          }
        );
        return isSelectedFilter
          ? this.aemConfig.filterSelection
          : this.aemConfig.filterNoSelection;
      },
      homePageImages() {
        const { baseUrl } = this.aemConfig.apiConfiguration;
        const { domainPageName } = this.aemConfig;
        const positionQuery = this.getQueryGeolocation(this.currentGeolocation);
        const homeUrl = `${baseUrl}/vehicles/${
        domainPageName || 'bmw_de'
      }/merge/most-expensive?locale=${this.aemConfig.languagePageName}&`;
        const teaserUrl = `${baseUrl}/vehicles/${
        domainPageName || 'bmw_de'
      }/merge/nearest?locale=${
        this.aemConfig.languagePageName
      }&${positionQuery}`;
        return {
          teaserImage: {
            small: `${teaserUrl}w=500`,
            medium: `${teaserUrl}w=992`,
            big: teaserUrl,
          },
          homeImage: {
            small: `${homeUrl}w=500`,
            medium: `${homeUrl}w=992`,
            big: homeUrl,
          },
        };
      },
    },
    created() {
      if (this.$router.currentRoute.query.filters) {
        const filters = JSON.parse(this.$router.currentRoute.query.filters);

        this.parameters = {
          ...this.parameters,
          filters: {
            ...filters,
          },
        };
      }

      TrackingEventHandler.dispatchEvent(TRACKING_EVENT_ENTER_PAGE, {
        name: PAGE_TYPE_HOME_PAGE,
        language: this.aemConfig.languagePageName,
      });
      initGeoLocation().then((position) => {
        this.currentGeolocation = position;
      });
    },
    mounted() {
      this.fetchBestsellerData();
    },
    methods: {
      getQueryGeolocation(geolocation) {
        if (geolocation) {
          return `lng=${geolocation.lng}&lat=${geolocation.lat}&`;
        }
        return '';
      },
      onSubmit(filters) {
        this.$router.push({
          path: 'results',
          query: {
            filters: JSON.stringify(filters),
          },
        });
      },
      updateFiltersParams(filters) {
        const newFilters = {
          ...this.parameters.filters,
          ...filters,
        };
        this.parameters = { filters: newFilters };
      },
      clickTeaserButton() {
        let query = {};
        if (this.currentGeolocation) {
          query = {
            filters: JSON.stringify({
              radius: +this.aemConfig.nearestRange,
            }),
          };
        }
        this.$router.push({
          path: 'results',
          query,
        });
      },
      updatePriceOverallRange(filters) {
        this.updatePriceRange({
          priceMin: Math.ceil(filters.data.attributes.overallPriceMin),
          priceMax: Math.ceil(filters.data.attributes.overallPriceMax),
        });
      },
      updatePriceRange({ priceMin, priceMax }) {
        this.priceRange.priceMin = priceMin;
        this.priceRange.priceMax = priceMax;
        if (!this.priceRange.values) {
          this.$set(this.priceRange, 'values', [priceMin, priceMax]);
        }
      },
      updatePriceValue(newPrices) {
        this.$set(this.priceRange, 'values', newPrices);
        this.updateFiltersParams({
          price: newPrices,
        });
      },
      fetchBestsellerData() {
        const apiConfig = this.aemConfig.apiConfiguration;
        const baseUrl = apiConfig.baseUrl;
        const market = this.aemConfig.domainPageName;
        const locale = this.aemConfig.languagePageName;
        const path = `vehicles/${market}/best-sellers?locale=${locale}`;
        const url = `${baseUrl}/${path}$`;
        fetch(url)
          .then((res) => res.json())
          .then((data) => (this.bestsellerData = data));
      },
    },
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside StockarHomePage component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  (function(){ if(typeof document !== 'undefined'){ var head=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=""; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head.appendChild(style); } })();

  var StockarHomePage = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('StockcarHomePageContent',{attrs:{"aem-config":_vm.aemConfig,"i18n":_vm.i18n,"vehicle-data":_vm.vehicleData,"data-tailwind":""}})},staticRenderFns: [],
    name: 'StockarHomePage',
    components: {
      StockcarHomePageContent,
    },
    mixins: [stockcarPageMixin],
    errorCaptured(err, vm, info) {
      console.warn(
        `${err.stack}\n\nfound in ${info} inside StockarHomePage component`
      );
      this.$emit('error', err);
      return false;
    },
  };

  const prepareKeys = (filter = {}) => {
    return Object.keys(filter).filter(key => {
      return filter[key];
    }).join();
  };

  const prepareAttributesEvent = (filters = {}, config = {}) => {
    return {
      requestedURL: 'na',
      errorCode: 'na',
      searchResults: filters.results || 'na',
      solutionSpecific: {
        slCarBudgetMax: filters.maxPrice || 'na',
        slCarBudgetMin: filters.minPrice || 'na',
        slExteriorColor: prepareKeys(filters.paint) || 'all',
        slFuelType: prepareKeys(filters.fuel) || 'all',
        slInteriorColor: 'na',
        slModelName: prepareKeys(filters.body) || 'all',
        slMonthlyBudgetMax: 'na',
        slMonthlyBudgetMin: 'na',
        slLocation: filters.radius || 'na',
        slOptions: prepareKeys(filters.options) || 'all',
        slSeries: prepareKeys(filters.series) || 'all',
        slTransmission: prepareKeys(filters.transmissionType) || 'all'
      },
      linkedComponent: {
        componentInfo: config.componentID,
      },
      linkedPage: {
        pageInfo: 'na',
      },
      linkedProduct: {
        productInfo: 'na'
      }
    }
  };

  const reducer = action => {
    switch (action.name) {
    case 'view_details.ModelCard':
      return {
        sateliteName: 'stock-locator',
        event: {
          eventInfo: {
            eventName: 'sl > interactions',
            eventAction: 'open layer',
            eventPoints: 'na',
            type: 'interaction',
            timestamp: new Date().getTime(),
            effect: 'sl > vehicle details clicked',
            cause: 'default'
          },
          category: {
            primaryCategory: 'digital > new car stock locator',
            subcategory1: 'na'
          },
          attributes: prepareAttributesEvent({}, action.config.componentInfo),
        },
      };
    case 'toggle_tooltip.ModelCard':
      return {
        sateliteName: 'stock-locator',
        event: {
          eventInfo: {
            eventName: 'sl > interactions',
            eventAction: 'open layer',
            eventPoints: 'na',
            type: 'ux',
            timestamp: new Date().getTime(),
            effect: action.data.isOpened ? 'sl > price information tooltip opened' : 'sl > price information tooltip closed',
            cause: 'default'
          },
          category: {
            primaryCategory: 'digital > new car stock locator',
            subcategory1: 'na'
          },
          attributes: prepareAttributesEvent({}, action.config.componentInfo),
        },
      };
    case 'next_image.StockcarDetailsCarousel': {
      const prepareEffect = (dir) => {
        if (dir === 'left') {
          return 'sl > banner slided left';
        } if (dir === 'right') {
          return 'sl > banner slided right';
        }
        return 'sl > banner slided with pagination dot';
      };
      return {
        sateliteName: 'stock-locator',
        event: {
          eventInfo: {
            eventName: 'sl > interactions',
            eventAction: 'slide',
            eventPoints: 'na',
            type: 'ux',
            timestamp: new Date().getTime(),
            effect: prepareEffect(action.data.dir),
            cause: 'default'
          },
          category: {
            primaryCategory: 'digital > new car stock locator',
            subcategory1: 'na'
          },
          attributes: prepareAttributesEvent({}, action.config.componentInfo),
        },
      };
    }
    case 'CTA.StockcarDetailsDealerLocator': {
      const prepareEffect = (label, url) => {
        return `sl > ${label} > ${url}`;
      };
      return {
        sateliteName: 'stock-locator',
        event: {
          eventInfo: {
            eventName: 'sl > interactions',
            eventAction: 'internal click',
            eventPoints: 'na',
            type: 'interaction',
            timestamp: new Date().getTime(),
            effect: prepareEffect(action.data.label, action.data.url),
            cause: 'default'
          },
          category: {
            primaryCategory: 'digital > new car stock locator',
            subcategory1: 'na'
          },
          attributes: prepareAttributesEvent({}, action.config.componentInfo),
        },
      };
    }
    case 'toggle_options.StockcarDetailsOptions': {
      const prepareAction = (isOpened) => {
        if (isOpened) {
          return 'open content';
        }
        return 'close content';
      };
      const prepareEffect = (isOpened) => {
        if (isOpened) {
          return 'more options shown';
        }
        return 'less options shown';
      };
      return {
        sateliteName: 'stock-locator',
        event: {
          eventInfo: {
            eventName: 'sl > interactions',
            eventAction: prepareAction(action.data.isOpened),
            eventPoints: 'na',
            type: 'uxn',
            timestamp: new Date().getTime(),
            effect: prepareEffect(action.data.isOpened),
            cause: 'default'
          },
          category: {
            primaryCategory: 'digital > new car stock locator',
            subcategory1: 'na'
          },
          attributes: prepareAttributesEvent({}, action.config.componentInfo),
        },
      };
    }
    case 'toggle_options_overlay.TitledOptionCard': {
      const prepareAction = (isOpened) => {
        if (isOpened) {
          return 'open content';
        }
        return 'close content';
      };
      const prepareEffect = (code, isOpened) => {
        const status = isOpened ? 'opened' : 'closed';
        return `sl > option ${code} ${status}`
      };
      return {
        sateliteName: 'stock-locator',
        event: {
          eventInfo: {
            eventName: 'sl > interactions',
            eventAction: prepareAction(action.data.isOpened),
            eventPoints: 'na',
            type: 'uxn',
            timestamp: new Date().getTime(),
            effect: prepareEffect(action.data.saCode),
            cause: 'default'
          },
          category: {
            primaryCategory: 'digital > new car stock locator',
            subcategory1: 'na'
          },
          attributes: prepareAttributesEvent({}, action.config.componentInfo),
        },
      };
    }
    case 'set_sorting_field.StockcarListSorting':
      return {
        sateliteName: 'stock-locator',
        event: {
          eventInfo: {
            eventName: 'sl > interaction',
            eventAction: 'sort',
            effect: `sl > sort ${action.data.eventName}`,
            eventPoints: 'na',
            type: 'ux',
            timeStamp: new Date().getTime(),
            cause: 'default',
          },
          category: {
            primaryCategory: 'digital > new car stock locator',
            subcategory1: 'na'
          },
          attributes: prepareAttributesEvent(),
        },
      };
    case 'page_load.StockcarListContent':
      return {
        sateliteName: 'stock-locator',
        event: {
          eventInfo: {
            eventName: 'sl > start',
            eventAction: 'page load',
            effect: 'sl > stock locator started',
            eventPoints: 'na',
            type: 'interaction',
            timeStamp: new Date().getTime(),
            cause: 'default',
          },
          category: {
            primaryCategory: 'digital > new car stock locator',
            subcategory1: 'na'
          },
          attributes: prepareAttributesEvent(),
        },
      };
    case 'homepage_show_all.StockarHomePageContent':
      return {
        sateliteName: 'stock-locator',
        event: {
          eventInfo: {
            eventName: 'sl > interaction',
            eventAction: 'internal click',
            effect: 'sl > show all clicked',
            eventPoints: 'na',
            type: 'interaction',
            timeStamp: new Date().getTime(),
            cause: 'default',
          },
          category: {
            primaryCategory: 'digital > new car stock locator',
            subcategory1: 'na'
          },
          attributes: prepareAttributesEvent(),
        },
      };
    case 'change_filter.StockcarListPage':
      return {
        sateliteName: 'stock-locator',
        event: {
          eventInfo: {
            eventName: 'sl > search filter',
            eventAction: 'search',
            effect: 'sl > search filter selected',
            eventPoints: 'na',
            type: 'interaction',
            timeStamp: new Date().getTime(),
            cause: 'default',
          },
          category: {
            primaryCategory: 'digital > new car stock locator',
            subcategory1: 'na'
          },
          attributes: prepareAttributesEvent(action.data.filter),
        },
      };
    case 'teaser_track.StockarHomePage':
      return {
        sateliteName: 'stock-locator',
        event: {
          attributes: prepareAttributesEvent(),
        },
      };
    }
  };

  function requiredArgs(required, args) {
    if (args.length < required) {
      throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
    }
  }

  /**
   * @name toDate
   * @category Common Helpers
   * @summary Convert the given argument to an instance of Date.
   *
   * @description
   * Convert the given argument to an instance of Date.
   *
   * If the argument is an instance of Date, the function returns its clone.
   *
   * If the argument is a number, it is treated as a timestamp.
   *
   * If the argument is none of the above, the function returns Invalid Date.
   *
   * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
   *
   * @param {Date|Number} argument - the value to convert
   * @returns {Date} the parsed date in the local time zone
   * @throws {TypeError} 1 argument required
   *
   * @example
   * // Clone the date:
   * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
   * //=> Tue Feb 11 2014 11:30:30
   *
   * @example
   * // Convert the timestamp to date:
   * const result = toDate(1392098430000)
   * //=> Tue Feb 11 2014 11:30:30
   */

  function toDate(argument) {
    requiredArgs(1, arguments);
    var argStr = Object.prototype.toString.call(argument); // Clone the date

    if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
      // Prevent the date to lose the milliseconds when passed to new Date() in IE10
      return new Date(argument.getTime());
    } else if (typeof argument === 'number' || argStr === '[object Number]') {
      return new Date(argument);
    } else {
      if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
        // eslint-disable-next-line no-console
        console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console

        console.warn(new Error().stack);
      }

      return new Date(NaN);
    }
  }

  /**
   * @name isValid
   * @category Common Helpers
   * @summary Is the given date valid?
   *
   * @description
   * Returns false if argument is Invalid Date and true otherwise.
   * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
   * Invalid Date is a Date, whose time value is NaN.
   *
   * Time value of Date: http://es5.github.io/#x15.9.1.1
   *
   * ### v2.0.0 breaking changes:
   *
   * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
   *
   * - Now `isValid` doesn't throw an exception
   *   if the first argument is not an instance of Date.
   *   Instead, argument is converted beforehand using `toDate`.
   *
   *   Examples:
   *
   *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |
   *   |---------------------------|---------------|---------------|
   *   | `new Date()`              | `true`        | `true`        |
   *   | `new Date('2016-01-01')`  | `true`        | `true`        |
   *   | `new Date('')`            | `false`       | `false`       |
   *   | `new Date(1488370835081)` | `true`        | `true`        |
   *   | `new Date(NaN)`           | `false`       | `false`       |
   *   | `'2016-01-01'`            | `TypeError`   | `false`       |
   *   | `''`                      | `TypeError`   | `false`       |
   *   | `1488370835081`           | `TypeError`   | `true`        |
   *   | `NaN`                     | `TypeError`   | `false`       |
   *
   *   We introduce this change to make *date-fns* consistent with ECMAScript behavior
   *   that try to coerce arguments to the expected type
   *   (which is also the case with other *date-fns* functions).
   *
   * @param {*} date - the date to check
   * @returns {Boolean} the date is valid
   * @throws {TypeError} 1 argument required
   *
   * @example
   * // For the valid date:
   * var result = isValid(new Date(2014, 1, 31))
   * //=> true
   *
   * @example
   * // For the value, convertable into a date:
   * var result = isValid(1393804800000)
   * //=> true
   *
   * @example
   * // For the invalid date:
   * var result = isValid(new Date(''))
   * //=> false
   */

  function isValid(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    return !isNaN(date);
  }

  var formatDistanceLocale = {
    lessThanXSeconds: {
      one: 'less than a second',
      other: 'less than {{count}} seconds'
    },
    xSeconds: {
      one: '1 second',
      other: '{{count}} seconds'
    },
    halfAMinute: 'half a minute',
    lessThanXMinutes: {
      one: 'less than a minute',
      other: 'less than {{count}} minutes'
    },
    xMinutes: {
      one: '1 minute',
      other: '{{count}} minutes'
    },
    aboutXHours: {
      one: 'about 1 hour',
      other: 'about {{count}} hours'
    },
    xHours: {
      one: '1 hour',
      other: '{{count}} hours'
    },
    xDays: {
      one: '1 day',
      other: '{{count}} days'
    },
    aboutXMonths: {
      one: 'about 1 month',
      other: 'about {{count}} months'
    },
    xMonths: {
      one: '1 month',
      other: '{{count}} months'
    },
    aboutXYears: {
      one: 'about 1 year',
      other: 'about {{count}} years'
    },
    xYears: {
      one: '1 year',
      other: '{{count}} years'
    },
    overXYears: {
      one: 'over 1 year',
      other: 'over {{count}} years'
    },
    almostXYears: {
      one: 'almost 1 year',
      other: 'almost {{count}} years'
    }
  };
  function formatDistance(token, count, options) {
    options = options || {};
    var result;

    if (typeof formatDistanceLocale[token] === 'string') {
      result = formatDistanceLocale[token];
    } else if (count === 1) {
      result = formatDistanceLocale[token].one;
    } else {
      result = formatDistanceLocale[token].other.replace('{{count}}', count);
    }

    if (options.addSuffix) {
      if (options.comparison > 0) {
        return 'in ' + result;
      } else {
        return result + ' ago';
      }
    }

    return result;
  }

  function buildFormatLongFn(args) {
    return function (dirtyOptions) {
      var options = dirtyOptions || {};
      var width = options.width ? String(options.width) : args.defaultWidth;
      var format = args.formats[width] || args.formats[args.defaultWidth];
      return format;
    };
  }

  var dateFormats = {
    full: 'EEEE, MMMM do, y',
    long: 'MMMM do, y',
    medium: 'MMM d, y',
    short: 'MM/dd/yyyy'
  };
  var timeFormats = {
    full: 'h:mm:ss a zzzz',
    long: 'h:mm:ss a z',
    medium: 'h:mm:ss a',
    short: 'h:mm a'
  };
  var dateTimeFormats = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: '{{date}}, {{time}}',
    short: '{{date}}, {{time}}'
  };
  var formatLong = {
    date: buildFormatLongFn({
      formats: dateFormats,
      defaultWidth: 'full'
    }),
    time: buildFormatLongFn({
      formats: timeFormats,
      defaultWidth: 'full'
    }),
    dateTime: buildFormatLongFn({
      formats: dateTimeFormats,
      defaultWidth: 'full'
    })
  };

  var formatRelativeLocale = {
    lastWeek: "'last' eeee 'at' p",
    yesterday: "'yesterday at' p",
    today: "'today at' p",
    tomorrow: "'tomorrow at' p",
    nextWeek: "eeee 'at' p",
    other: 'P'
  };
  function formatRelative(token, _date, _baseDate, _options) {
    return formatRelativeLocale[token];
  }

  function buildLocalizeFn(args) {
    return function (dirtyIndex, dirtyOptions) {
      var options = dirtyOptions || {};
      var context = options.context ? String(options.context) : 'standalone';
      var valuesArray;

      if (context === 'formatting' && args.formattingValues) {
        var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
        var width = options.width ? String(options.width) : defaultWidth;
        valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
      } else {
        var _defaultWidth = args.defaultWidth;

        var _width = options.width ? String(options.width) : args.defaultWidth;

        valuesArray = args.values[_width] || args.values[_defaultWidth];
      }

      var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
      return valuesArray[index];
    };
  }

  var eraValues = {
    narrow: ['B', 'A'],
    abbreviated: ['BC', 'AD'],
    wide: ['Before Christ', 'Anno Domini']
  };
  var quarterValues = {
    narrow: ['1', '2', '3', '4'],
    abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
    wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.
    // If you are making a new locale based on this one, check if the same is true for the language you're working on.
    // Generally, formatted dates should look like they are in the middle of a sentence,
    // e.g. in Spanish language the weekdays and months should be in the lowercase.

  };
  var monthValues = {
    narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
    abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
  };
  var dayValues = {
    narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
    short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
    abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
  };
  var dayPeriodValues = {
    narrow: {
      am: 'a',
      pm: 'p',
      midnight: 'mi',
      noon: 'n',
      morning: 'morning',
      afternoon: 'afternoon',
      evening: 'evening',
      night: 'night'
    },
    abbreviated: {
      am: 'AM',
      pm: 'PM',
      midnight: 'midnight',
      noon: 'noon',
      morning: 'morning',
      afternoon: 'afternoon',
      evening: 'evening',
      night: 'night'
    },
    wide: {
      am: 'a.m.',
      pm: 'p.m.',
      midnight: 'midnight',
      noon: 'noon',
      morning: 'morning',
      afternoon: 'afternoon',
      evening: 'evening',
      night: 'night'
    }
  };
  var formattingDayPeriodValues = {
    narrow: {
      am: 'a',
      pm: 'p',
      midnight: 'mi',
      noon: 'n',
      morning: 'in the morning',
      afternoon: 'in the afternoon',
      evening: 'in the evening',
      night: 'at night'
    },
    abbreviated: {
      am: 'AM',
      pm: 'PM',
      midnight: 'midnight',
      noon: 'noon',
      morning: 'in the morning',
      afternoon: 'in the afternoon',
      evening: 'in the evening',
      night: 'at night'
    },
    wide: {
      am: 'a.m.',
      pm: 'p.m.',
      midnight: 'midnight',
      noon: 'noon',
      morning: 'in the morning',
      afternoon: 'in the afternoon',
      evening: 'in the evening',
      night: 'at night'
    }
  };

  function ordinalNumber(dirtyNumber, _dirtyOptions) {
    var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
    // if they are different for different grammatical genders,
    // use `options.unit`:
    //
    //   var options = dirtyOptions || {}
    //   var unit = String(options.unit)
    //
    // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
    // 'day', 'hour', 'minute', 'second'

    var rem100 = number % 100;

    if (rem100 > 20 || rem100 < 10) {
      switch (rem100 % 10) {
        case 1:
          return number + 'st';

        case 2:
          return number + 'nd';

        case 3:
          return number + 'rd';
      }
    }

    return number + 'th';
  }

  var localize = {
    ordinalNumber: ordinalNumber,
    era: buildLocalizeFn({
      values: eraValues,
      defaultWidth: 'wide'
    }),
    quarter: buildLocalizeFn({
      values: quarterValues,
      defaultWidth: 'wide',
      argumentCallback: function (quarter) {
        return Number(quarter) - 1;
      }
    }),
    month: buildLocalizeFn({
      values: monthValues,
      defaultWidth: 'wide'
    }),
    day: buildLocalizeFn({
      values: dayValues,
      defaultWidth: 'wide'
    }),
    dayPeriod: buildLocalizeFn({
      values: dayPeriodValues,
      defaultWidth: 'wide',
      formattingValues: formattingDayPeriodValues,
      defaultFormattingWidth: 'wide'
    })
  };

  function buildMatchPatternFn(args) {
    return function (dirtyString, dirtyOptions) {
      var string = String(dirtyString);
      var options = dirtyOptions || {};
      var matchResult = string.match(args.matchPattern);

      if (!matchResult) {
        return null;
      }

      var matchedString = matchResult[0];
      var parseResult = string.match(args.parsePattern);

      if (!parseResult) {
        return null;
      }

      var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
      value = options.valueCallback ? options.valueCallback(value) : value;
      return {
        value: value,
        rest: string.slice(matchedString.length)
      };
    };
  }

  function buildMatchFn(args) {
    return function (dirtyString, dirtyOptions) {
      var string = String(dirtyString);
      var options = dirtyOptions || {};
      var width = options.width;
      var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
      var matchResult = string.match(matchPattern);

      if (!matchResult) {
        return null;
      }

      var matchedString = matchResult[0];
      var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
      var value;

      if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {
        value = findIndex$1(parsePatterns, function (pattern) {
          return pattern.test(matchedString);
        });
      } else {
        value = findKey$1(parsePatterns, function (pattern) {
          return pattern.test(matchedString);
        });
      }

      value = args.valueCallback ? args.valueCallback(value) : value;
      value = options.valueCallback ? options.valueCallback(value) : value;
      return {
        value: value,
        rest: string.slice(matchedString.length)
      };
    };
  }

  function findKey$1(object, predicate) {
    for (var key in object) {
      if (object.hasOwnProperty(key) && predicate(object[key])) {
        return key;
      }
    }
  }

  function findIndex$1(array, predicate) {
    for (var key = 0; key < array.length; key++) {
      if (predicate(array[key])) {
        return key;
      }
    }
  }

  var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
  var parseOrdinalNumberPattern = /\d+/i;
  var matchEraPatterns = {
    narrow: /^(b|a)/i,
    abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
    wide: /^(before christ|before common era|anno domini|common era)/i
  };
  var parseEraPatterns = {
    any: [/^b/i, /^(a|c)/i]
  };
  var matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](th|st|nd|rd)? quarter/i
  };
  var parseQuarterPatterns = {
    any: [/1/i, /2/i, /3/i, /4/i]
  };
  var matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
  };
  var parseMonthPatterns = {
    narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
    any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
  };
  var matchDayPatterns = {
    narrow: /^[smtwf]/i,
    short: /^(su|mo|tu|we|th|fr|sa)/i,
    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
  };
  var parseDayPatterns = {
    narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
    any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
  };
  var matchDayPeriodPatterns = {
    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
    any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
  };
  var parseDayPeriodPatterns = {
    any: {
      am: /^a/i,
      pm: /^p/i,
      midnight: /^mi/i,
      noon: /^no/i,
      morning: /morning/i,
      afternoon: /afternoon/i,
      evening: /evening/i,
      night: /night/i
    }
  };
  var match = {
    ordinalNumber: buildMatchPatternFn({
      matchPattern: matchOrdinalNumberPattern,
      parsePattern: parseOrdinalNumberPattern,
      valueCallback: function (value) {
        return parseInt(value, 10);
      }
    }),
    era: buildMatchFn({
      matchPatterns: matchEraPatterns,
      defaultMatchWidth: 'wide',
      parsePatterns: parseEraPatterns,
      defaultParseWidth: 'any'
    }),
    quarter: buildMatchFn({
      matchPatterns: matchQuarterPatterns,
      defaultMatchWidth: 'wide',
      parsePatterns: parseQuarterPatterns,
      defaultParseWidth: 'any',
      valueCallback: function (index) {
        return index + 1;
      }
    }),
    month: buildMatchFn({
      matchPatterns: matchMonthPatterns,
      defaultMatchWidth: 'wide',
      parsePatterns: parseMonthPatterns,
      defaultParseWidth: 'any'
    }),
    day: buildMatchFn({
      matchPatterns: matchDayPatterns,
      defaultMatchWidth: 'wide',
      parsePatterns: parseDayPatterns,
      defaultParseWidth: 'any'
    }),
    dayPeriod: buildMatchFn({
      matchPatterns: matchDayPeriodPatterns,
      defaultMatchWidth: 'any',
      parsePatterns: parseDayPeriodPatterns,
      defaultParseWidth: 'any'
    })
  };

  /**
   * @type {Locale}
   * @category Locales
   * @summary English locale (United States).
   * @language English
   * @iso-639-2 eng
   * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
   * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
   */

  var locale = {
    code: 'en-US',
    formatDistance: formatDistance,
    formatLong: formatLong,
    formatRelative: formatRelative,
    localize: localize,
    match: match,
    options: {
      weekStartsOn: 0
      /* Sunday */
      ,
      firstWeekContainsDate: 1
    }
  };

  function toInteger$1(dirtyNumber) {
    if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
      return NaN;
    }

    var number = Number(dirtyNumber);

    if (isNaN(number)) {
      return number;
    }

    return number < 0 ? Math.ceil(number) : Math.floor(number);
  }

  /**
   * @name addMilliseconds
   * @category Millisecond Helpers
   * @summary Add the specified number of milliseconds to the given date.
   *
   * @description
   * Add the specified number of milliseconds to the given date.
   *
   * ### v2.0.0 breaking changes:
   *
   * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
   *
   * @param {Date|Number} date - the date to be changed
   * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
   * @returns {Date} the new date with the milliseconds added
   * @throws {TypeError} 2 arguments required
   *
   * @example
   * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
   * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
   * //=> Thu Jul 10 2014 12:45:30.750
   */

  function addMilliseconds(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var timestamp = toDate(dirtyDate).getTime();
    var amount = toInteger$1(dirtyAmount);
    return new Date(timestamp + amount);
  }

  /**
   * @name subMilliseconds
   * @category Millisecond Helpers
   * @summary Subtract the specified number of milliseconds from the given date.
   *
   * @description
   * Subtract the specified number of milliseconds from the given date.
   *
   * ### v2.0.0 breaking changes:
   *
   * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
   *
   * @param {Date|Number} date - the date to be changed
   * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
   * @returns {Date} the new date with the milliseconds subtracted
   * @throws {TypeError} 2 arguments required
   *
   * @example
   * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
   * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
   * //=> Thu Jul 10 2014 12:45:29.250
   */

  function subMilliseconds(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger$1(dirtyAmount);
    return addMilliseconds(dirtyDate, -amount);
  }

  function addLeadingZeros(number, targetLength) {
    var sign = number < 0 ? '-' : '';
    var output = Math.abs(number).toString();

    while (output.length < targetLength) {
      output = '0' + output;
    }

    return sign + output;
  }

  /*
   * |     | Unit                           |     | Unit                           |
   * |-----|--------------------------------|-----|--------------------------------|
   * |  a  | AM, PM                         |  A* |                                |
   * |  d  | Day of month                   |  D  |                                |
   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
   * |  m  | Minute                         |  M  | Month                          |
   * |  s  | Second                         |  S  | Fraction of second             |
   * |  y  | Year (abs)                     |  Y  |                                |
   *
   * Letters marked by * are not implemented but reserved by Unicode standard.
   */

  var formatters = {
    // Year
    y: function (date, token) {
      // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
      // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
      // |----------|-------|----|-------|-------|-------|
      // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
      // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
      // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
      // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
      // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
    },
    // Month
    M: function (date, token) {
      var month = date.getUTCMonth();
      return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
    },
    // Day of the month
    d: function (date, token) {
      return addLeadingZeros(date.getUTCDate(), token.length);
    },
    // AM or PM
    a: function (date, token) {
      var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';

      switch (token) {
        case 'a':
        case 'aa':
        case 'aaa':
          return dayPeriodEnumValue.toUpperCase();

        case 'aaaaa':
          return dayPeriodEnumValue[0];

        case 'aaaa':
        default:
          return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
      }
    },
    // Hour [1-12]
    h: function (date, token) {
      return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
    },
    // Hour [0-23]
    H: function (date, token) {
      return addLeadingZeros(date.getUTCHours(), token.length);
    },
    // Minute
    m: function (date, token) {
      return addLeadingZeros(date.getUTCMinutes(), token.length);
    },
    // Second
    s: function (date, token) {
      return addLeadingZeros(date.getUTCSeconds(), token.length);
    },
    // Fraction of second
    S: function (date, token) {
      var numberOfDigits = token.length;
      var milliseconds = date.getUTCMilliseconds();
      var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
      return addLeadingZeros(fractionalSeconds, token.length);
    }
  };

  var MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.
  // See issue: https://github.com/date-fns/date-fns/issues/376

  function getUTCDayOfYear(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var timestamp = date.getTime();
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
    var startOfYearTimestamp = date.getTime();
    var difference = timestamp - startOfYearTimestamp;
    return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
  }

  // See issue: https://github.com/date-fns/date-fns/issues/376

  function startOfUTCISOWeek(dirtyDate) {
    requiredArgs(1, arguments);
    var weekStartsOn = 1;
    var date = toDate(dirtyDate);
    var day = date.getUTCDay();
    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
    date.setUTCDate(date.getUTCDate() - diff);
    date.setUTCHours(0, 0, 0, 0);
    return date;
  }

  // See issue: https://github.com/date-fns/date-fns/issues/376

  function getUTCISOWeekYear(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var year = date.getUTCFullYear();
    var fourthOfJanuaryOfNextYear = new Date(0);
    fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
    fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
    var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
    var fourthOfJanuaryOfThisYear = new Date(0);
    fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
    fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
    var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);

    if (date.getTime() >= startOfNextYear.getTime()) {
      return year + 1;
    } else if (date.getTime() >= startOfThisYear.getTime()) {
      return year;
    } else {
      return year - 1;
    }
  }

  // See issue: https://github.com/date-fns/date-fns/issues/376

  function startOfUTCISOWeekYear(dirtyDate) {
    requiredArgs(1, arguments);
    var year = getUTCISOWeekYear(dirtyDate);
    var fourthOfJanuary = new Date(0);
    fourthOfJanuary.setUTCFullYear(year, 0, 4);
    fourthOfJanuary.setUTCHours(0, 0, 0, 0);
    var date = startOfUTCISOWeek(fourthOfJanuary);
    return date;
  }

  var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
  // See issue: https://github.com/date-fns/date-fns/issues/376

  function getUTCISOWeek(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)

    return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
  }

  // See issue: https://github.com/date-fns/date-fns/issues/376

  function startOfUTCWeek(dirtyDate, dirtyOptions) {
    requiredArgs(1, arguments);
    var options = dirtyOptions || {};
    var locale = options.locale;
    var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger$1(localeWeekStartsOn);
    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger$1(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
      throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    }

    var date = toDate(dirtyDate);
    var day = date.getUTCDay();
    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
    date.setUTCDate(date.getUTCDate() - diff);
    date.setUTCHours(0, 0, 0, 0);
    return date;
  }

  // See issue: https://github.com/date-fns/date-fns/issues/376

  function getUTCWeekYear(dirtyDate, dirtyOptions) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate, dirtyOptions);
    var year = date.getUTCFullYear();
    var options = dirtyOptions || {};
    var locale = options.locale;
    var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger$1(localeFirstWeekContainsDate);
    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger$1(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
      throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
    }

    var firstWeekOfNextYear = new Date(0);
    firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
    firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
    var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
    var firstWeekOfThisYear = new Date(0);
    firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
    firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
    var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);

    if (date.getTime() >= startOfNextYear.getTime()) {
      return year + 1;
    } else if (date.getTime() >= startOfThisYear.getTime()) {
      return year;
    } else {
      return year - 1;
    }
  }

  // See issue: https://github.com/date-fns/date-fns/issues/376

  function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
    requiredArgs(1, arguments);
    var options = dirtyOptions || {};
    var locale = options.locale;
    var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger$1(localeFirstWeekContainsDate);
    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger$1(options.firstWeekContainsDate);
    var year = getUTCWeekYear(dirtyDate, dirtyOptions);
    var firstWeek = new Date(0);
    firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
    firstWeek.setUTCHours(0, 0, 0, 0);
    var date = startOfUTCWeek(firstWeek, dirtyOptions);
    return date;
  }

  var MILLISECONDS_IN_WEEK$1 = 604800000; // This function will be a part of public API when UTC function will be implemented.
  // See issue: https://github.com/date-fns/date-fns/issues/376

  function getUTCWeek(dirtyDate, options) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)

    return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
  }

  var dayPeriodEnum = {
    am: 'am',
    pm: 'pm',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* | Milliseconds in day            |
     * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
     * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
     * |  d  | Day of month                   |  D  | Day of year                    |
     * |  e  | Local day of week              |  E  | Day of week                    |
     * |  f  |                                |  F* | Day of week in month           |
     * |  g* | Modified Julian day            |  G  | Era                            |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  i! | ISO day of week                |  I! | ISO week of year               |
     * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
     * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
     * |  l* | (deprecated)                   |  L  | Stand-alone month              |
     * |  m  | Minute                         |  M  | Month                          |
     * |  n  |                                |  N  |                                |
     * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
     * |  p! | Long localized time            |  P! | Long localized date            |
     * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
     * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
     * |  u  | Extended year                  |  U* | Cyclic year                    |
     * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
     * |  w  | Local week of year             |  W* | Week of month                  |
     * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
     * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
     * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     *
     * Letters marked by ! are non-standard, but implemented by date-fns:
     * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
     * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
     *   i.e. 7 for Sunday, 1 for Monday, etc.
     * - `I` is ISO week of year, as opposed to `w` which is local week of year.
     * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
     *   `R` is supposed to be used in conjunction with `I` and `i`
     *   for universal ISO week-numbering date, whereas
     *   `Y` is supposed to be used in conjunction with `w` and `e`
     *   for week-numbering date specific to the locale.
     * - `P` is long localized date format
     * - `p` is long localized time format
     */

  };
  var formatters$1 = {
    // Era
    G: function (date, token, localize) {
      var era = date.getUTCFullYear() > 0 ? 1 : 0;

      switch (token) {
        // AD, BC
        case 'G':
        case 'GG':
        case 'GGG':
          return localize.era(era, {
            width: 'abbreviated'
          });
        // A, B

        case 'GGGGG':
          return localize.era(era, {
            width: 'narrow'
          });
        // Anno Domini, Before Christ

        case 'GGGG':
        default:
          return localize.era(era, {
            width: 'wide'
          });
      }
    },
    // Year
    y: function (date, token, localize) {
      // Ordinal number
      if (token === 'yo') {
        var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

        var year = signedYear > 0 ? signedYear : 1 - signedYear;
        return localize.ordinalNumber(year, {
          unit: 'year'
        });
      }

      return formatters.y(date, token);
    },
    // Local week-numbering year
    Y: function (date, token, localize, options) {
      var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)

      var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year

      if (token === 'YY') {
        var twoDigitYear = weekYear % 100;
        return addLeadingZeros(twoDigitYear, 2);
      } // Ordinal number


      if (token === 'Yo') {
        return localize.ordinalNumber(weekYear, {
          unit: 'year'
        });
      } // Padding


      return addLeadingZeros(weekYear, token.length);
    },
    // ISO week-numbering year
    R: function (date, token) {
      var isoWeekYear = getUTCISOWeekYear(date); // Padding

      return addLeadingZeros(isoWeekYear, token.length);
    },
    // Extended year. This is a single number designating the year of this calendar system.
    // The main difference between `y` and `u` localizers are B.C. years:
    // | Year | `y` | `u` |
    // |------|-----|-----|
    // | AC 1 |   1 |   1 |
    // | BC 1 |   1 |   0 |
    // | BC 2 |   2 |  -1 |
    // Also `yy` always returns the last two digits of a year,
    // while `uu` pads single digit years to 2 characters and returns other years unchanged.
    u: function (date, token) {
      var year = date.getUTCFullYear();
      return addLeadingZeros(year, token.length);
    },
    // Quarter
    Q: function (date, token, localize) {
      var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

      switch (token) {
        // 1, 2, 3, 4
        case 'Q':
          return String(quarter);
        // 01, 02, 03, 04

        case 'QQ':
          return addLeadingZeros(quarter, 2);
        // 1st, 2nd, 3rd, 4th

        case 'Qo':
          return localize.ordinalNumber(quarter, {
            unit: 'quarter'
          });
        // Q1, Q2, Q3, Q4

        case 'QQQ':
          return localize.quarter(quarter, {
            width: 'abbreviated',
            context: 'formatting'
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)

        case 'QQQQQ':
          return localize.quarter(quarter, {
            width: 'narrow',
            context: 'formatting'
          });
        // 1st quarter, 2nd quarter, ...

        case 'QQQQ':
        default:
          return localize.quarter(quarter, {
            width: 'wide',
            context: 'formatting'
          });
      }
    },
    // Stand-alone quarter
    q: function (date, token, localize) {
      var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

      switch (token) {
        // 1, 2, 3, 4
        case 'q':
          return String(quarter);
        // 01, 02, 03, 04

        case 'qq':
          return addLeadingZeros(quarter, 2);
        // 1st, 2nd, 3rd, 4th

        case 'qo':
          return localize.ordinalNumber(quarter, {
            unit: 'quarter'
          });
        // Q1, Q2, Q3, Q4

        case 'qqq':
          return localize.quarter(quarter, {
            width: 'abbreviated',
            context: 'standalone'
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)

        case 'qqqqq':
          return localize.quarter(quarter, {
            width: 'narrow',
            context: 'standalone'
          });
        // 1st quarter, 2nd quarter, ...

        case 'qqqq':
        default:
          return localize.quarter(quarter, {
            width: 'wide',
            context: 'standalone'
          });
      }
    },
    // Month
    M: function (date, token, localize) {
      var month = date.getUTCMonth();

      switch (token) {
        case 'M':
        case 'MM':
          return formatters.M(date, token);
        // 1st, 2nd, ..., 12th

        case 'Mo':
          return localize.ordinalNumber(month + 1, {
            unit: 'month'
          });
        // Jan, Feb, ..., Dec

        case 'MMM':
          return localize.month(month, {
            width: 'abbreviated',
            context: 'formatting'
          });
        // J, F, ..., D

        case 'MMMMM':
          return localize.month(month, {
            width: 'narrow',
            context: 'formatting'
          });
        // January, February, ..., December

        case 'MMMM':
        default:
          return localize.month(month, {
            width: 'wide',
            context: 'formatting'
          });
      }
    },
    // Stand-alone month
    L: function (date, token, localize) {
      var month = date.getUTCMonth();

      switch (token) {
        // 1, 2, ..., 12
        case 'L':
          return String(month + 1);
        // 01, 02, ..., 12

        case 'LL':
          return addLeadingZeros(month + 1, 2);
        // 1st, 2nd, ..., 12th

        case 'Lo':
          return localize.ordinalNumber(month + 1, {
            unit: 'month'
          });
        // Jan, Feb, ..., Dec

        case 'LLL':
          return localize.month(month, {
            width: 'abbreviated',
            context: 'standalone'
          });
        // J, F, ..., D

        case 'LLLLL':
          return localize.month(month, {
            width: 'narrow',
            context: 'standalone'
          });
        // January, February, ..., December

        case 'LLLL':
        default:
          return localize.month(month, {
            width: 'wide',
            context: 'standalone'
          });
      }
    },
    // Local week of year
    w: function (date, token, localize, options) {
      var week = getUTCWeek(date, options);

      if (token === 'wo') {
        return localize.ordinalNumber(week, {
          unit: 'week'
        });
      }

      return addLeadingZeros(week, token.length);
    },
    // ISO week of year
    I: function (date, token, localize) {
      var isoWeek = getUTCISOWeek(date);

      if (token === 'Io') {
        return localize.ordinalNumber(isoWeek, {
          unit: 'week'
        });
      }

      return addLeadingZeros(isoWeek, token.length);
    },
    // Day of the month
    d: function (date, token, localize) {
      if (token === 'do') {
        return localize.ordinalNumber(date.getUTCDate(), {
          unit: 'date'
        });
      }

      return formatters.d(date, token);
    },
    // Day of year
    D: function (date, token, localize) {
      var dayOfYear = getUTCDayOfYear(date);

      if (token === 'Do') {
        return localize.ordinalNumber(dayOfYear, {
          unit: 'dayOfYear'
        });
      }

      return addLeadingZeros(dayOfYear, token.length);
    },
    // Day of week
    E: function (date, token, localize) {
      var dayOfWeek = date.getUTCDay();

      switch (token) {
        // Tue
        case 'E':
        case 'EE':
        case 'EEE':
          return localize.day(dayOfWeek, {
            width: 'abbreviated',
            context: 'formatting'
          });
        // T

        case 'EEEEE':
          return localize.day(dayOfWeek, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu

        case 'EEEEEE':
          return localize.day(dayOfWeek, {
            width: 'short',
            context: 'formatting'
          });
        // Tuesday

        case 'EEEE':
        default:
          return localize.day(dayOfWeek, {
            width: 'wide',
            context: 'formatting'
          });
      }
    },
    // Local day of week
    e: function (date, token, localize, options) {
      var dayOfWeek = date.getUTCDay();
      var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

      switch (token) {
        // Numerical value (Nth day of week with current locale or weekStartsOn)
        case 'e':
          return String(localDayOfWeek);
        // Padded numerical value

        case 'ee':
          return addLeadingZeros(localDayOfWeek, 2);
        // 1st, 2nd, ..., 7th

        case 'eo':
          return localize.ordinalNumber(localDayOfWeek, {
            unit: 'day'
          });

        case 'eee':
          return localize.day(dayOfWeek, {
            width: 'abbreviated',
            context: 'formatting'
          });
        // T

        case 'eeeee':
          return localize.day(dayOfWeek, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu

        case 'eeeeee':
          return localize.day(dayOfWeek, {
            width: 'short',
            context: 'formatting'
          });
        // Tuesday

        case 'eeee':
        default:
          return localize.day(dayOfWeek, {
            width: 'wide',
            context: 'formatting'
          });
      }
    },
    // Stand-alone local day of week
    c: function (date, token, localize, options) {
      var dayOfWeek = date.getUTCDay();
      var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

      switch (token) {
        // Numerical value (same as in `e`)
        case 'c':
          return String(localDayOfWeek);
        // Padded numerical value

        case 'cc':
          return addLeadingZeros(localDayOfWeek, token.length);
        // 1st, 2nd, ..., 7th

        case 'co':
          return localize.ordinalNumber(localDayOfWeek, {
            unit: 'day'
          });

        case 'ccc':
          return localize.day(dayOfWeek, {
            width: 'abbreviated',
            context: 'standalone'
          });
        // T

        case 'ccccc':
          return localize.day(dayOfWeek, {
            width: 'narrow',
            context: 'standalone'
          });
        // Tu

        case 'cccccc':
          return localize.day(dayOfWeek, {
            width: 'short',
            context: 'standalone'
          });
        // Tuesday

        case 'cccc':
        default:
          return localize.day(dayOfWeek, {
            width: 'wide',
            context: 'standalone'
          });
      }
    },
    // ISO day of week
    i: function (date, token, localize) {
      var dayOfWeek = date.getUTCDay();
      var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;

      switch (token) {
        // 2
        case 'i':
          return String(isoDayOfWeek);
        // 02

        case 'ii':
          return addLeadingZeros(isoDayOfWeek, token.length);
        // 2nd

        case 'io':
          return localize.ordinalNumber(isoDayOfWeek, {
            unit: 'day'
          });
        // Tue

        case 'iii':
          return localize.day(dayOfWeek, {
            width: 'abbreviated',
            context: 'formatting'
          });
        // T

        case 'iiiii':
          return localize.day(dayOfWeek, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu

        case 'iiiiii':
          return localize.day(dayOfWeek, {
            width: 'short',
            context: 'formatting'
          });
        // Tuesday

        case 'iiii':
        default:
          return localize.day(dayOfWeek, {
            width: 'wide',
            context: 'formatting'
          });
      }
    },
    // AM or PM
    a: function (date, token, localize) {
      var hours = date.getUTCHours();
      var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';

      switch (token) {
        case 'a':
        case 'aa':
        case 'aaa':
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'abbreviated',
            context: 'formatting'
          });

        case 'aaaaa':
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'aaaa':
        default:
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'wide',
            context: 'formatting'
          });
      }
    },
    // AM, PM, midnight, noon
    b: function (date, token, localize) {
      var hours = date.getUTCHours();
      var dayPeriodEnumValue;

      if (hours === 12) {
        dayPeriodEnumValue = dayPeriodEnum.noon;
      } else if (hours === 0) {
        dayPeriodEnumValue = dayPeriodEnum.midnight;
      } else {
        dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
      }

      switch (token) {
        case 'b':
        case 'bb':
        case 'bbb':
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'abbreviated',
            context: 'formatting'
          });

        case 'bbbbb':
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'bbbb':
        default:
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'wide',
            context: 'formatting'
          });
      }
    },
    // in the morning, in the afternoon, in the evening, at night
    B: function (date, token, localize) {
      var hours = date.getUTCHours();
      var dayPeriodEnumValue;

      if (hours >= 17) {
        dayPeriodEnumValue = dayPeriodEnum.evening;
      } else if (hours >= 12) {
        dayPeriodEnumValue = dayPeriodEnum.afternoon;
      } else if (hours >= 4) {
        dayPeriodEnumValue = dayPeriodEnum.morning;
      } else {
        dayPeriodEnumValue = dayPeriodEnum.night;
      }

      switch (token) {
        case 'B':
        case 'BB':
        case 'BBB':
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'abbreviated',
            context: 'formatting'
          });

        case 'BBBBB':
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'BBBB':
        default:
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: 'wide',
            context: 'formatting'
          });
      }
    },
    // Hour [1-12]
    h: function (date, token, localize) {
      if (token === 'ho') {
        var hours = date.getUTCHours() % 12;
        if (hours === 0) hours = 12;
        return localize.ordinalNumber(hours, {
          unit: 'hour'
        });
      }

      return formatters.h(date, token);
    },
    // Hour [0-23]
    H: function (date, token, localize) {
      if (token === 'Ho') {
        return localize.ordinalNumber(date.getUTCHours(), {
          unit: 'hour'
        });
      }

      return formatters.H(date, token);
    },
    // Hour [0-11]
    K: function (date, token, localize) {
      var hours = date.getUTCHours() % 12;

      if (token === 'Ko') {
        return localize.ordinalNumber(hours, {
          unit: 'hour'
        });
      }

      return addLeadingZeros(hours, token.length);
    },
    // Hour [1-24]
    k: function (date, token, localize) {
      var hours = date.getUTCHours();
      if (hours === 0) hours = 24;

      if (token === 'ko') {
        return localize.ordinalNumber(hours, {
          unit: 'hour'
        });
      }

      return addLeadingZeros(hours, token.length);
    },
    // Minute
    m: function (date, token, localize) {
      if (token === 'mo') {
        return localize.ordinalNumber(date.getUTCMinutes(), {
          unit: 'minute'
        });
      }

      return formatters.m(date, token);
    },
    // Second
    s: function (date, token, localize) {
      if (token === 'so') {
        return localize.ordinalNumber(date.getUTCSeconds(), {
          unit: 'second'
        });
      }

      return formatters.s(date, token);
    },
    // Fraction of second
    S: function (date, token) {
      return formatters.S(date, token);
    },
    // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
    X: function (date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timezoneOffset = originalDate.getTimezoneOffset();

      if (timezoneOffset === 0) {
        return 'Z';
      }

      switch (token) {
        // Hours and optional minutes
        case 'X':
          return formatTimezoneWithOptionalMinutes(timezoneOffset);
        // Hours, minutes and optional seconds without `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `XX`

        case 'XXXX':
        case 'XX':
          // Hours and minutes without `:` delimiter
          return formatTimezone(timezoneOffset);
        // Hours, minutes and optional seconds with `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `XXX`

        case 'XXXXX':
        case 'XXX': // Hours and minutes with `:` delimiter

        default:
          return formatTimezone(timezoneOffset, ':');
      }
    },
    // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
    x: function (date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timezoneOffset = originalDate.getTimezoneOffset();

      switch (token) {
        // Hours and optional minutes
        case 'x':
          return formatTimezoneWithOptionalMinutes(timezoneOffset);
        // Hours, minutes and optional seconds without `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `xx`

        case 'xxxx':
        case 'xx':
          // Hours and minutes without `:` delimiter
          return formatTimezone(timezoneOffset);
        // Hours, minutes and optional seconds with `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `xxx`

        case 'xxxxx':
        case 'xxx': // Hours and minutes with `:` delimiter

        default:
          return formatTimezone(timezoneOffset, ':');
      }
    },
    // Timezone (GMT)
    O: function (date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timezoneOffset = originalDate.getTimezoneOffset();

      switch (token) {
        // Short
        case 'O':
        case 'OO':
        case 'OOO':
          return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
        // Long

        case 'OOOO':
        default:
          return 'GMT' + formatTimezone(timezoneOffset, ':');
      }
    },
    // Timezone (specific non-location)
    z: function (date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timezoneOffset = originalDate.getTimezoneOffset();

      switch (token) {
        // Short
        case 'z':
        case 'zz':
        case 'zzz':
          return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
        // Long

        case 'zzzz':
        default:
          return 'GMT' + formatTimezone(timezoneOffset, ':');
      }
    },
    // Seconds timestamp
    t: function (date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timestamp = Math.floor(originalDate.getTime() / 1000);
      return addLeadingZeros(timestamp, token.length);
    },
    // Milliseconds timestamp
    T: function (date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timestamp = originalDate.getTime();
      return addLeadingZeros(timestamp, token.length);
    }
  };

  function formatTimezoneShort(offset, dirtyDelimiter) {
    var sign = offset > 0 ? '-' : '+';
    var absOffset = Math.abs(offset);
    var hours = Math.floor(absOffset / 60);
    var minutes = absOffset % 60;

    if (minutes === 0) {
      return sign + String(hours);
    }

    var delimiter = dirtyDelimiter || '';
    return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
  }

  function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
    if (offset % 60 === 0) {
      var sign = offset > 0 ? '-' : '+';
      return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
    }

    return formatTimezone(offset, dirtyDelimiter);
  }

  function formatTimezone(offset, dirtyDelimiter) {
    var delimiter = dirtyDelimiter || '';
    var sign = offset > 0 ? '-' : '+';
    var absOffset = Math.abs(offset);
    var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
    var minutes = addLeadingZeros(absOffset % 60, 2);
    return sign + hours + delimiter + minutes;
  }

  function dateLongFormatter(pattern, formatLong) {
    switch (pattern) {
      case 'P':
        return formatLong.date({
          width: 'short'
        });

      case 'PP':
        return formatLong.date({
          width: 'medium'
        });

      case 'PPP':
        return formatLong.date({
          width: 'long'
        });

      case 'PPPP':
      default:
        return formatLong.date({
          width: 'full'
        });
    }
  }

  function timeLongFormatter(pattern, formatLong) {
    switch (pattern) {
      case 'p':
        return formatLong.time({
          width: 'short'
        });

      case 'pp':
        return formatLong.time({
          width: 'medium'
        });

      case 'ppp':
        return formatLong.time({
          width: 'long'
        });

      case 'pppp':
      default:
        return formatLong.time({
          width: 'full'
        });
    }
  }

  function dateTimeLongFormatter(pattern, formatLong) {
    var matchResult = pattern.match(/(P+)(p+)?/);
    var datePattern = matchResult[1];
    var timePattern = matchResult[2];

    if (!timePattern) {
      return dateLongFormatter(pattern, formatLong);
    }

    var dateTimeFormat;

    switch (datePattern) {
      case 'P':
        dateTimeFormat = formatLong.dateTime({
          width: 'short'
        });
        break;

      case 'PP':
        dateTimeFormat = formatLong.dateTime({
          width: 'medium'
        });
        break;

      case 'PPP':
        dateTimeFormat = formatLong.dateTime({
          width: 'long'
        });
        break;

      case 'PPPP':
      default:
        dateTimeFormat = formatLong.dateTime({
          width: 'full'
        });
        break;
    }

    return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
  }

  var longFormatters = {
    p: timeLongFormatter,
    P: dateTimeLongFormatter
  };

  var MILLISECONDS_IN_MINUTE = 60000;

  function getDateMillisecondsPart(date) {
    return date.getTime() % MILLISECONDS_IN_MINUTE;
  }
  /**
   * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
   * They usually appear for dates that denote time before the timezones were introduced
   * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
   * and GMT+01:00:00 after that date)
   *
   * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
   * which would lead to incorrect calculations.
   *
   * This function returns the timezone offset in milliseconds that takes seconds in account.
   */


  function getTimezoneOffsetInMilliseconds(dirtyDate) {
    var date = new Date(dirtyDate.getTime());
    var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());
    date.setSeconds(0, 0);
    var hasNegativeUTCOffset = baseTimezoneOffset > 0;
    var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);
    return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;
  }

  var protectedDayOfYearTokens = ['D', 'DD'];
  var protectedWeekYearTokens = ['YY', 'YYYY'];
  function isProtectedDayOfYearToken(token) {
    return protectedDayOfYearTokens.indexOf(token) !== -1;
  }
  function isProtectedWeekYearToken(token) {
    return protectedWeekYearTokens.indexOf(token) !== -1;
  }
  function throwProtectedError(token) {
    if (token === 'YYYY') {
      throw new RangeError('Use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr');
    } else if (token === 'YY') {
      throw new RangeError('Use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr');
    } else if (token === 'D') {
      throw new RangeError('Use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr');
    } else if (token === 'DD') {
      throw new RangeError('Use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr');
    }
  }

  // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
  //   (one of the certain letters followed by `o`)
  // - (\w)\1* matches any sequences of the same letter
  // - '' matches two quote characters in a row
  // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
  //   except a single quote symbol, which ends the sequence.
  //   Two quote characters do not end the sequence.
  //   If there is no matching single quote
  //   then the sequence will continue until the end of the string.
  // - . matches any single character unmatched by previous parts of the RegExps

  var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
  // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

  var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
  var escapedStringRegExp = /^'([^]*?)'?$/;
  var doubleQuoteRegExp = /''/g;
  var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  /**
   * @name format
   * @category Common Helpers
   * @summary Format the date.
   *
   * @description
   * Return the formatted date string in the given format. The result may vary by locale.
   *
   * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
   * > See: https://git.io/fxCyr
   *
   * The characters wrapped between two single quotes characters (') are escaped.
   * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
   * (see the last example)
   *
   * Format of the string is based on Unicode Technical Standard #35:
   * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
   * with a few additions (see note 7 below the table).
   *
   * Accepted patterns:
   * | Unit                            | Pattern | Result examples                   | Notes |
   * |---------------------------------|---------|-----------------------------------|-------|
   * | Era                             | G..GGG  | AD, BC                            |       |
   * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
   * |                                 | GGGGG   | A, B                              |       |
   * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
   * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
   * |                                 | yy      | 44, 01, 00, 17                    | 5     |
   * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
   * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
   * |                                 | yyyyy   | ...                               | 3,5   |
   * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
   * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
   * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
   * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
   * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
   * |                                 | YYYYY   | ...                               | 3,5   |
   * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
   * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
   * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
   * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
   * |                                 | RRRRR   | ...                               | 3,5,7 |
   * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
   * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
   * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
   * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
   * |                                 | uuuuu   | ...                               | 3,5   |
   * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
   * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
   * |                                 | QQ      | 01, 02, 03, 04                    |       |
   * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
   * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
   * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
   * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
   * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
   * |                                 | qq      | 01, 02, 03, 04                    |       |
   * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
   * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
   * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
   * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
   * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
   * |                                 | MM      | 01, 02, ..., 12                   |       |
   * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
   * |                                 | MMMM    | January, February, ..., December  | 2     |
   * |                                 | MMMMM   | J, F, ..., D                      |       |
   * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
   * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
   * |                                 | LL      | 01, 02, ..., 12                   |       |
   * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
   * |                                 | LLLL    | January, February, ..., December  | 2     |
   * |                                 | LLLLL   | J, F, ..., D                      |       |
   * | Local week of year              | w       | 1, 2, ..., 53                     |       |
   * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
   * |                                 | ww      | 01, 02, ..., 53                   |       |
   * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
   * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
   * |                                 | II      | 01, 02, ..., 53                   | 7     |
   * | Day of month                    | d       | 1, 2, ..., 31                     |       |
   * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
   * |                                 | dd      | 01, 02, ..., 31                   |       |
   * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
   * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
   * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
   * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
   * |                                 | DDDD    | ...                               | 3     |
   * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |
   * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
   * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
   * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
   * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
   * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
   * |                                 | ii      | 01, 02, ..., 07                   | 7     |
   * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |
   * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
   * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
   * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |
   * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
   * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
   * |                                 | ee      | 02, 03, ..., 01                   |       |
   * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |
   * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
   * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
   * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
   * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
   * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
   * |                                 | cc      | 02, 03, ..., 01                   |       |
   * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |
   * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
   * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
   * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
   * | AM, PM                          | a..aaa  | AM, PM                            |       |
   * |                                 | aaaa    | a.m., p.m.                        | 2     |
   * |                                 | aaaaa   | a, p                              |       |
   * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |
   * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
   * |                                 | bbbbb   | a, p, n, mi                       |       |
   * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
   * |                                 | BBBB    | at night, in the morning, ...     | 2     |
   * |                                 | BBBBB   | at night, in the morning, ...     |       |
   * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
   * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
   * |                                 | hh      | 01, 02, ..., 11, 12               |       |
   * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
   * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
   * |                                 | HH      | 00, 01, 02, ..., 23               |       |
   * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
   * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
   * |                                 | KK      | 1, 2, ..., 11, 0                  |       |
   * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
   * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
   * |                                 | kk      | 24, 01, 02, ..., 23               |       |
   * | Minute                          | m       | 0, 1, ..., 59                     |       |
   * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
   * |                                 | mm      | 00, 01, ..., 59                   |       |
   * | Second                          | s       | 0, 1, ..., 59                     |       |
   * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
   * |                                 | ss      | 00, 01, ..., 59                   |       |
   * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
   * |                                 | SS      | 00, 01, ..., 99                   |       |
   * |                                 | SSS     | 000, 0001, ..., 999               |       |
   * |                                 | SSSS    | ...                               | 3     |
   * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
   * |                                 | XX      | -0800, +0530, Z                   |       |
   * |                                 | XXX     | -08:00, +05:30, Z                 |       |
   * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
   * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
   * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
   * |                                 | xx      | -0800, +0530, +0000               |       |
   * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
   * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
   * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
   * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
   * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
   * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
   * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
   * | Seconds timestamp               | t       | 512969520                         | 7     |
   * |                                 | tt      | ...                               | 3,7   |
   * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
   * |                                 | TT      | ...                               | 3,7   |
   * | Long localized date             | P       | 05/29/1453                        | 7     |
   * |                                 | PP      | May 29, 1453                      | 7     |
   * |                                 | PPP     | May 29th, 1453                    | 7     |
   * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |
   * | Long localized time             | p       | 12:00 AM                          | 7     |
   * |                                 | pp      | 12:00:00 AM                       | 7     |
   * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
   * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
   * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |
   * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |
   * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |
   * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |
   * Notes:
   * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
   *    are the same as "stand-alone" units, but are different in some languages.
   *    "Formatting" units are declined according to the rules of the language
   *    in the context of a date. "Stand-alone" units are always nominative singular:
   *
   *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
   *
   *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
   *
   * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
   *    the single quote characters (see below).
   *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
   *    the output will be the same as default pattern for this unit, usually
   *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
   *    are marked with "2" in the last column of the table.
   *
   *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
   *
   *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
   *
   *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
   *
   *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
   *
   *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
   *
   * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
   *    The output will be padded with zeros to match the length of the pattern.
   *
   *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
   *
   * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
   *    These tokens represent the shortest form of the quarter.
   *
   * 5. The main difference between `y` and `u` patterns are B.C. years:
   *
   *    | Year | `y` | `u` |
   *    |------|-----|-----|
   *    | AC 1 |   1 |   1 |
   *    | BC 1 |   1 |   0 |
   *    | BC 2 |   2 |  -1 |
   *
   *    Also `yy` always returns the last two digits of a year,
   *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
   *
   *    | Year | `yy` | `uu` |
   *    |------|------|------|
   *    | 1    |   01 |   01 |
   *    | 14   |   14 |   14 |
   *    | 376  |   76 |  376 |
   *    | 1453 |   53 | 1453 |
   *
   *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
   *    except local week-numbering years are dependent on `options.weekStartsOn`
   *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
   *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
   *
   * 6. Specific non-location timezones are currently unavailable in `date-fns`,
   *    so right now these tokens fall back to GMT timezones.
   *
   * 7. These patterns are not in the Unicode Technical Standard #35:
   *    - `i`: ISO day of week
   *    - `I`: ISO week of year
   *    - `R`: ISO week-numbering year
   *    - `t`: seconds timestamp
   *    - `T`: milliseconds timestamp
   *    - `o`: ordinal number modifier
   *    - `P`: long localized date
   *    - `p`: long localized time
   *
   * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
   *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
   *
   * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
   *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
   *
   * ### v2.0.0 breaking changes:
   *
   * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
   *
   * - The second argument is now required for the sake of explicitness.
   *
   *   ```javascript
   *   // Before v2.0.0
   *   format(new Date(2016, 0, 1))
   *
   *   // v2.0.0 onward
   *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
   *   ```
   *
   * - New format string API for `format` function
   *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).
   *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
   *
   * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
   *
   * @param {Date|Number} date - the original date
   * @param {String} format - the string of tokens
   * @param {Object} [options] - an object with options.
   * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
   * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
   * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
   * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
   *   see: https://git.io/fxCyr
   * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
   *   see: https://git.io/fxCyr
   * @returns {String} the formatted date string
   * @throws {TypeError} 2 arguments required
   * @throws {RangeError} `date` must not be Invalid Date
   * @throws {RangeError} `options.locale` must contain `localize` property
   * @throws {RangeError} `options.locale` must contain `formatLong` property
   * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
   * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
   * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr
   * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr
   * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr
   * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr
   * @throws {RangeError} format string contains an unescaped latin alphabet character
   *
   * @example
   * // Represent 11 February 2014 in middle-endian format:
   * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
   * //=> '02/11/2014'
   *
   * @example
   * // Represent 2 July 2014 in Esperanto:
   * import { eoLocale } from 'date-fns/locale/eo'
   * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
   *   locale: eoLocale
   * })
   * //=> '2-a de julio 2014'
   *
   * @example
   * // Escape string by single quote characters:
   * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
   * //=> "3 o'clock"
   */

  function format$1(dirtyDate, dirtyFormatStr, dirtyOptions) {
    requiredArgs(2, arguments);
    var formatStr = String(dirtyFormatStr);
    var options = dirtyOptions || {};
    var locale$$1 = options.locale || locale;
    var localeFirstWeekContainsDate = locale$$1.options && locale$$1.options.firstWeekContainsDate;
    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger$1(localeFirstWeekContainsDate);
    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger$1(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
      throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
    }

    var localeWeekStartsOn = locale$$1.options && locale$$1.options.weekStartsOn;
    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger$1(localeWeekStartsOn);
    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger$1(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
      throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    }

    if (!locale$$1.localize) {
      throw new RangeError('locale must contain localize property');
    }

    if (!locale$$1.formatLong) {
      throw new RangeError('locale must contain formatLong property');
    }

    var originalDate = toDate(dirtyDate);

    if (!isValid(originalDate)) {
      throw new RangeError('Invalid time value');
    } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
    // This ensures that when UTC functions will be implemented, locales will be compatible with them.
    // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376


    var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
    var utcDate = subMilliseconds(originalDate, timezoneOffset);
    var formatterOptions = {
      firstWeekContainsDate: firstWeekContainsDate,
      weekStartsOn: weekStartsOn,
      locale: locale$$1,
      _originalDate: originalDate
    };
    var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
      var firstCharacter = substring[0];

      if (firstCharacter === 'p' || firstCharacter === 'P') {
        var longFormatter = longFormatters[firstCharacter];
        return longFormatter(substring, locale$$1.formatLong, formatterOptions);
      }

      return substring;
    }).join('').match(formattingTokensRegExp).map(function (substring) {
      // Replace two single quote characters with one single quote character
      if (substring === "''") {
        return "'";
      }

      var firstCharacter = substring[0];

      if (firstCharacter === "'") {
        return cleanEscapedString(substring);
      }

      var formatter = formatters$1[firstCharacter];

      if (formatter) {
        if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
          throwProtectedError(substring);
        }

        if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
          throwProtectedError(substring);
        }

        return formatter(utcDate, substring, locale$$1.localize, formatterOptions);
      }

      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
      }

      return substring;
    }).join('');
    return result;
  }

  function cleanEscapedString(input) {
    return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
  }

  (function(){ if(typeof document !== 'undefined'){ var head$$1=document.head||document.getElementsByTagName('head')[0], style=document.createElement('style'), css=".stockcar-main-container{min-height:50vh}.disclaimer .referenceable-disclaimer{margin:0 0 15px}.disclaimer a:hover{color:#0653b6}.disclaimer a{font-size:12px;color:#1366d7}.disclaimer p{padding:0;margin:0 0 15px;font-size:12px;line-height:1.21;color:#8e8e8e;-webkit-margin-before:0;margin-block-start:0}.disclaimer .referenceable-disclaimer p:first-child,.disclaimer .referenceable-disclaimer p:nth-child(2){display:inline}@media (min-width:768px) and (max-width:1024px){.stockcar{padding-right:20px;padding-left:20px}}@media (min-width:1760px){.tw-container{max-width:1200px}}"; style.type='text/css'; if (style.styleSheet){ style.styleSheet.cssText = css; } else { style.appendChild(document.createTextNode(css)); } head$$1.appendChild(style); } })();

  var Stockcar = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"stockcar-main-container"},[_c('StockcarFetchJson',{attrs:{"parameters":{},"market":_vm.aemConfig.domainPageName,"locale":_vm.aemConfig.languagePageName,"api-config":_vm.aemConfig.apiConfiguration,"url-type":"list"},on:{"onResponse":_vm.getExchangeProps}}),_vm._v(" "),(_vm.aemConfig.isDealerMarket)?_c('StockcarFetchJson',{attrs:{"market":_vm.aemConfig.domainPageName,"api-config":_vm.aemConfig.apiConfiguration,"url-type":"dealers"},on:{"onResponse":_vm.createDealersListObject}}):_vm._e(),_vm._v(" "),(_vm.hasExchangeData)?_c('StockcarFetchJson',{attrs:{"parameters":{},"market":_vm.aemConfig.domainPageName,"locale":_vm.aemConfig.languagePageName,"api-config":_vm.aemConfig.apiConfiguration,"url-type":"filters"},on:{"onResponse":_vm.createInitialQueryFilters},scopedSlots:_vm._u([{key:"default",fn:function({ fetchJson, isPending }){return [(!isPending)?_c('div',{staticClass:"tw-w-full"},[_c('div',{staticClass:"stockcar",attrs:{"data-tailwind":""}},[_c('router-view',{key:_vm.$route.name + (_vm.$route.params.id || ''),attrs:{"aem-config":_vm.getConfig(_vm.config),"i18n":_vm.getConfig(_vm.i18n),"vehicle-data":_vm.vehicleData}})],1)]):_vm._e()]}}],null,false,1017993275)}):_vm._e()],1)},staticRenderFns: [],
    name: 'Stockcar',
    components: {
      StockcarFetchJson,
    },
    props: {
      activeTracking: {
        type: Boolean,
        default: true,
      },
      genericDisclaimer: {
        type: String,
        default: '',
      },
      dataTrackingComponent: {
        type: String,
        default: '',
      },
      actionLogger: {
        type: Function,
        default: () => {},
      },
      config: {
        type: String,
        default: '',
      },
      i18n: {
        type: String,
        default: '',
      },
    },
    data() {
      return {
        aemConfig: this.getConfig(this.config),
        hasExchangeData: !this.genericDisclaimer,
        genericPriceDisclaimer: this.genericDisclaimer,
        vehicleData: null,
      };
    },
    computed: {
      trackingComponent() {
        return this.replaceQuoteSigns(this.dataTrackingComponent);
      },
      isActiveTracking() {
        return this.activeTracking && this.dataTrackingComponent.length > 0;
      },
    },
    mounted() {
      const routes = [
        this.addListRoute(),
        this.addDetailsPageRoute(),
        this.addHomePageRoute(),
      ];
      this.$router.addRoutes(routes);
      this.trackingEventHandler = new TrackingEventHandler(
        this.$router,
        JSON.parse(this.trackingComponent),
        this.aemConfig,
        !this.isActiveTracking
      );
    },
    methods: {
      reducer,
      replaceQuoteSigns: (textValue) => textValue.replace(/&#34;/g, '"'),
      addListRoute() {
        return {
          name: 'results',
          path: '/results',
          component: StockcarListPage,
        };
      },
      addDetailsPageRoute() {
        return {
          name: 'details',
          path: '/details/:id',
          component: StockcarDetailsPage,
        };
      },
      addHomePageRoute() {
        return {
          name: 'home',
          path: '/',
          component: StockarHomePage,
        };
      },
      getConfig(config) {
        if (config && config.length > 0) {
          return {
            ...JSON.parse(config),
            genericDisclaimerCopy: this.genericPriceDisclaimer,
          };
        }
        return {};
      },
      getExchangeProps(response) {
        this.vehicleData = response;
        let $genericDisclaimer = document.getElementById('generic-disclaimer');

        if (!$genericDisclaimer) {
          this.hasExchangeData = true;
          return;
        }

        let disclaimer = $genericDisclaimer.innerHTML;

        const config = this.getConfig(this.config);
        const exchangeDate = this.formatExchangeDate(
          response.meta.exchangeDate,
          config.datePattern
        );
        const exchangeRate = this.formatExchangeRate(response.meta.exchangeRate);

        disclaimer = disclaimer.replace(/{date}/g, exchangeDate);
        disclaimer = disclaimer.replace(/{exchange_rate}/g, exchangeRate);

        $genericDisclaimer.innerHTML = disclaimer;

        this.genericPriceDisclaimer = this.genericDisclaimer
          .replace(/{date}/g, exchangeDate)
          .replace(/{exchange_rate}/g, exchangeRate);
        this.hasExchangeData = true;
      },
      formatExchangeDate(exchangeDate, datePattern) {
        try {
          return format$1(Date.parse(exchangeDate), datePattern);
        } catch (err) {
          return '';
        }
      },
      formatExchangeRate(exchangeRate) {
        try {
          return (1 / exchangeRate).toFixed(2);
        } catch (err) {
          return '';
        }
      },
      combineFilterValues(filters, newValues, key) {
        if (Object.keys(newValues).length < 1) {
          return filters;
        }
        return {
          ...filters,
          [key]: {
            ...newValues,
          },
        };
      },
      mapModelRangeNames(series, predicate) {
        return series
          .map((series) => series.uniqueModelRanges)
          .flat()
          .filter(predicate)
          .map((uniqueModelRange) => uniqueModelRange.modelRangeName)
          .reduce((obj, item) => {
            return {
              ...obj,
              [item]: true,
            };
          }, true);
      },
      mapSeries(series, predicate) {
        return series
          .filter(predicate)
          .map((item) => item.label)
          .reduce((obj, item) => {
            return {
              ...obj,
              [item]: true,
            };
          }, true);
      },
      createMarketingModelRangeFilterObjectFromModelRange(series) {
        let initialQueryModelRange = get(this.$route, 'query.modelRange', '');

        let filters = { series: {}, marketingModelRange: {} };

        if (initialQueryModelRange.length) {
          initialQueryModelRange = initialQueryModelRange.split(',');
          const mappedModelRangeNames = this.mapModelRangeNames(
            series,
            (uniqueModelRange) =>
              uniqueModelRange.modelRanges
                .map((el) => el.modelRange)
                .some((el) => initialQueryModelRange.includes(el))
          );
          const mappedSeries = this.mapSeries(series, (item) => {
            return item.uniqueModelRanges.some((uniqueModelRange) =>
              initialQueryModelRange.some((modelRange) =>
                uniqueModelRange.modelRanges.includes(modelRange)
              )
            );
          });

          filters = this.combineFilterValues(
            filters,
            mappedModelRangeNames,
            'marketingModelRange'
          );
          filters = this.combineFilterValues(filters, mappedSeries, 'series');
        }
        return filters;
      },
      createMarketingModelRangeFilterObjectFromUniqueCode(series) {
        let initialQueryUniqueCode = get(this.$route, 'query.uniqueCode', '');

        let filters = { series: {}, marketingModelRange: {} };

        if (initialQueryUniqueCode.length) {
          initialQueryUniqueCode = initialQueryUniqueCode.split(',');
          const mappedModelRangeNames = this.mapModelRangeNames(
            series,
            (uniqueModelRange) =>
              initialQueryUniqueCode.includes(uniqueModelRange.uniqueCode)
          );
          const mappedSeries = this.mapSeries(series, (item) =>
            item.uniqueModelRanges.some((el) =>
              initialQueryUniqueCode.includes(el.uniqueCode)
            )
          );

          filters = this.combineFilterValues(
            filters,
            mappedModelRangeNames,
            'marketingModelRange'
          );
          filters = this.combineFilterValues(filters, mappedSeries, 'series');
        }
        return filters;
      },
      hasFilterParameters() {
        let initialQueryUniqueCode = get(this.$route, 'query.uniqueCode', '');
        let initialQueryModelRange = get(this.$route, 'query.modelRange', '');
        return (
          initialQueryUniqueCode.length > 0 || initialQueryModelRange.length > 0
        );
      },
      createInitialQueryFilters(response) {
        const allOptions = get(response, 'data.attributes', {});
        Vue.prototype.$allOptions = allOptions;

        if (!this.hasFilterParameters()) {
          return;
        }

        const series = get(allOptions, 'series', []);

        if (!series.length) {
          this.$nextTick(() => {
            TrackingEventHandler.dispatchEvent(TRACKING_EVENT_START);
          });
          return;
        }

        const uniqueCodeFilters = this.createMarketingModelRangeFilterObjectFromUniqueCode(
          series
        );
        const modelRangeFilters = this.createMarketingModelRangeFilterObjectFromModelRange(
          series
        );

        const filters = {
          ...(get(this.aemConfig, 'filters.marketingModelRange', false) &&
            (Object.keys(uniqueCodeFilters.marketingModelRange).length ||
              Object.keys(modelRangeFilters.marketingModelRange).length) && {
              marketingModelRange: {
                ...uniqueCodeFilters.marketingModelRange,
                ...modelRangeFilters.marketingModelRange,
              },
            }),
          ...(get(this.aemConfig, 'filters.series', false) &&
            (Object.keys(uniqueCodeFilters.series).length ||
              Object.keys(modelRangeFilters.series).length) && {
              series: {
                ...uniqueCodeFilters.series,
                ...modelRangeFilters.series,
              },
            }),
        };

        this.$router.replace(
          {
            name: this.$router.currentRoute.name,
            query: {
              filters: JSON.stringify(filters),
            },
          },
          () => {
            this.$nextTick(() => {
              setTimeout(
                () =>
                  TrackingEventHandler.dispatchEvent(TRACKING_EVENT_START, {
                    filter: filters,
                  }),
                500
              );
            });
          }
        );
      },
      createDealersListObject(response) {
        Vue.prototype.$marketDealers = response.data.map((dealer) => {
          return {
            ...dealer.attributes,
            id: dealer.id,
          };
        });
      },
    },
  };

  return Stockcar;

});
require(['vue', 'vue-router', 'Stockcar'], function(Vue, VueRouter, Stockcar){
      
  if (typeof console == "undefined" || !console.log || !console.warn || !console.error || !console.info) {
    this.console = {
      log: function() {},
      warn: function() {},
      error: function() {},
      info: function() {}
    };
  }

      Vue.use(VueRouter);
      Vue.component(Stockcar.name,Stockcar);
      var params = {
        routes: [],
        scrollBehavior: function (to, from, savedPosition) {
          return { x: 0, y: 0 }
        }
      };
      var router = new VueRouter(params);
      new Vue({router: router}).$mount('#stockcar');
    })
